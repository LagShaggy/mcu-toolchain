
stm32l476g-eval_freeRTOS_threads_blinking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d978  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800db08  0800db08  0001db08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbc0  0800dbc0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbc0  0800dbc0  0001dbc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbc8  0800dbc8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbc8  0800dbc8  0001dbc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbcc  0800dbcc  0001dbcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800dbd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021f8  20000010  0800dbe0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002208  0800dbe0  00022208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035e35  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ed4  00000000  00000000  00055e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e28  00000000  00000000  0005bd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002be8  00000000  00000000  0005eb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007971  00000000  00000000  00061760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035b90  00000000  00000000  000690d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012d885  00000000  00000000  0009ec61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cc4e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c960  00000000  00000000  001cc538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800daf0 	.word	0x0800daf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800daf0 	.word	0x0800daf0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f001 fc13 	bl	8001d02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f842 	bl	8000564 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004e0:	f000 f890 	bl	8000604 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 fc94 	bl	8000e10 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004e8:	f000 f8ba 	bl	8000660 <MX_ADC1_Init>
  MX_CAN1_Init();
 80004ec:	f000 f92e 	bl	800074c <MX_CAN1_Init>
  MX_COMP2_Init();
 80004f0:	f000 f962 	bl	80007b8 <MX_COMP2_Init>
  MX_DAC1_Init();
 80004f4:	f000 f98e 	bl	8000814 <MX_DAC1_Init>
  MX_FMC_Init();
 80004f8:	f000 fbe2 	bl	8000cc0 <MX_FMC_Init>
  MX_I2C1_Init();
 80004fc:	f000 f9bc 	bl	8000878 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000500:	f000 f9fa 	bl	80008f8 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000504:	f000 fa26 	bl	8000954 <MX_USART1_UART_Init>
  MX_USART3_SMARTCARD_Init();
 8000508:	f000 fa54 	bl	80009b4 <MX_USART3_SMARTCARD_Init>
  MX_OPAMP1_Init();
 800050c:	f000 fa9c 	bl	8000a48 <MX_OPAMP1_Init>
  MX_SAI1_Init();
 8000510:	f000 fac0 	bl	8000a94 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8000514:	f000 fb44 	bl	8000ba0 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000518:	f000 fb72 	bl	8000c00 <MX_SPI2_Init>
  MX_USB_OTG_FS_HCD_Init();
 800051c:	f000 fbae 	bl	8000c7c <MX_USB_OTG_FS_HCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000520:	f00a fd58 	bl	800afd4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000524:	4a09      	ldr	r2, [pc, #36]	; (800054c <main+0x78>)
 8000526:	2100      	movs	r1, #0
 8000528:	4809      	ldr	r0, [pc, #36]	; (8000550 <main+0x7c>)
 800052a:	f00a fd9d 	bl	800b068 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a08      	ldr	r2, [pc, #32]	; (8000554 <main+0x80>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000534:	4a08      	ldr	r2, [pc, #32]	; (8000558 <main+0x84>)
 8000536:	2100      	movs	r1, #0
 8000538:	4808      	ldr	r0, [pc, #32]	; (800055c <main+0x88>)
 800053a:	f00a fd95 	bl	800b068 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a07      	ldr	r2, [pc, #28]	; (8000560 <main+0x8c>)
 8000542:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000544:	f00a fd6a 	bl	800b01c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x74>
 800054a:	bf00      	nop
 800054c:	0800db30 	.word	0x0800db30
 8000550:	0800100d 	.word	0x0800100d
 8000554:	2000089c 	.word	0x2000089c
 8000558:	0800db54 	.word	0x0800db54
 800055c:	0800102d 	.word	0x0800102d
 8000560:	200008a0 	.word	0x200008a0

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b096      	sub	sp, #88	; 0x58
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	2244      	movs	r2, #68	; 0x44
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f00d fab4 	bl	800dae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	463b      	mov	r3, r7
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000586:	f44f 7000 	mov.w	r0, #512	; 0x200
 800058a:	f004 fefb 	bl	8005384 <HAL_PWREx_ControlVoltageScaling>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000594:	f000 fd6c 	bl	8001070 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	2303      	movs	r3, #3
 80005a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005aa:	2301      	movs	r3, #1
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 80005ae:	2318      	movs	r3, #24
 80005b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005b2:	2307      	movs	r3, #7
 80005b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80005b6:	2304      	movs	r3, #4
 80005b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80005ba:	2304      	movs	r3, #4
 80005bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 ff54 	bl	8005470 <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005ce:	f000 fd4f 	bl	8001070 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2303      	movs	r3, #3
 80005d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e6:	463b      	mov	r3, r7
 80005e8:	2102      	movs	r1, #2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f005 fb1c 	bl	8005c28 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005f6:	f000 fd3b 	bl	8001070 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3758      	adds	r7, #88	; 0x58
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b0a2      	sub	sp, #136	; 0x88
 8000608:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800060a:	463b      	mov	r3, r7
 800060c:	2288      	movs	r2, #136	; 0x88
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f00d fa65 	bl	800dae0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 8000616:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800061a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800061c:	2300      	movs	r3, #0
 800061e:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000620:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000624:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000626:	2303      	movs	r3, #3
 8000628:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800062a:	2301      	movs	r3, #1
 800062c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800062e:	230c      	movs	r3, #12
 8000630:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000632:	2307      	movs	r3, #7
 8000634:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <PeriphCommonClock_Config+0x58>)
 8000640:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000642:	463b      	mov	r3, r7
 8000644:	4618      	mov	r0, r3
 8000646:	f005 fd45 	bl	80060d4 <HAL_RCCEx_PeriphCLKConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8000650:	f000 fd0e 	bl	8001070 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3788      	adds	r7, #136	; 0x88
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	01010000 	.word	0x01010000

08000660 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	; 0x28
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
 8000680:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000682:	4b2f      	ldr	r3, [pc, #188]	; (8000740 <MX_ADC1_Init+0xe0>)
 8000684:	4a2f      	ldr	r2, [pc, #188]	; (8000744 <MX_ADC1_Init+0xe4>)
 8000686:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000688:	4b2d      	ldr	r3, [pc, #180]	; (8000740 <MX_ADC1_Init+0xe0>)
 800068a:	2200      	movs	r2, #0
 800068c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800068e:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <MX_ADC1_Init+0xe0>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000694:	4b2a      	ldr	r3, [pc, #168]	; (8000740 <MX_ADC1_Init+0xe0>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800069a:	4b29      	ldr	r3, [pc, #164]	; (8000740 <MX_ADC1_Init+0xe0>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a0:	4b27      	ldr	r3, [pc, #156]	; (8000740 <MX_ADC1_Init+0xe0>)
 80006a2:	2204      	movs	r2, #4
 80006a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006a6:	4b26      	ldr	r3, [pc, #152]	; (8000740 <MX_ADC1_Init+0xe0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ac:	4b24      	ldr	r3, [pc, #144]	; (8000740 <MX_ADC1_Init+0xe0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006b2:	4b23      	ldr	r3, [pc, #140]	; (8000740 <MX_ADC1_Init+0xe0>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006b8:	4b21      	ldr	r3, [pc, #132]	; (8000740 <MX_ADC1_Init+0xe0>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <MX_ADC1_Init+0xe0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c6:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <MX_ADC1_Init+0xe0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <MX_ADC1_Init+0xe0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006d4:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <MX_ADC1_Init+0xe0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <MX_ADC1_Init+0xe0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e2:	4817      	ldr	r0, [pc, #92]	; (8000740 <MX_ADC1_Init+0xe0>)
 80006e4:	f001 fcf6 	bl	80020d4 <HAL_ADC_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006ee:	f000 fcbf 	bl	8001070 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	4619      	mov	r1, r3
 80006fc:	4810      	ldr	r0, [pc, #64]	; (8000740 <MX_ADC1_Init+0xe0>)
 80006fe:	f002 fa55 	bl	8002bac <HAL_ADCEx_MultiModeConfigChannel>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000708:	f000 fcb2 	bl	8001070 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_ADC1_Init+0xe8>)
 800070e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000710:	2306      	movs	r3, #6
 8000712:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000718:	237f      	movs	r3, #127	; 0x7f
 800071a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800071c:	2304      	movs	r3, #4
 800071e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	4619      	mov	r1, r3
 8000728:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_ADC1_Init+0xe0>)
 800072a:	f001 fe29 	bl	8002380 <HAL_ADC_ConfigChannel>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000734:	f000 fc9c 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	3728      	adds	r7, #40	; 0x28
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	2000002c 	.word	0x2000002c
 8000744:	50040000 	.word	0x50040000
 8000748:	2a000400 	.word	0x2a000400

0800074c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000750:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_CAN1_Init+0x64>)
 8000752:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <MX_CAN1_Init+0x68>)
 8000754:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_CAN1_Init+0x64>)
 8000758:	2210      	movs	r2, #16
 800075a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_CAN1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_CAN1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_CAN1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_CAN1_Init+0x64>)
 8000770:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000774:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_CAN1_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_CAN1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_CAN1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_CAN1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_CAN1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_CAN1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_CAN1_Init+0x64>)
 800079c:	f002 fab6 	bl	8002d0c <HAL_CAN_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80007a6:	f000 fc63 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000090 	.word	0x20000090
 80007b4:	40006400 	.word	0x40006400

080007b8 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_COMP2_Init+0x50>)
 80007be:	4a13      	ldr	r2, [pc, #76]	; (800080c <MX_COMP2_Init+0x54>)
 80007c0:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_COMP2_Init+0x50>)
 80007c4:	4a12      	ldr	r2, [pc, #72]	; (8000810 <MX_COMP2_Init+0x58>)
 80007c6:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_COMP2_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_COMP2_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_COMP2_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_COMP2_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_COMP2_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_COMP2_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_COMP2_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_COMP2_Init+0x50>)
 80007f4:	f002 fc2e 	bl	8003054 <HAL_COMP_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 80007fe:	f000 fc37 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000b8 	.word	0x200000b8
 800080c:	40010204 	.word	0x40010204
 8000810:	00800030 	.word	0x00800030

08000814 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2224      	movs	r2, #36	; 0x24
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f00d f95d 	bl	800dae0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_DAC1_Init+0x5c>)
 8000828:	4a12      	ldr	r2, [pc, #72]	; (8000874 <MX_DAC1_Init+0x60>)
 800082a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800082c:	4810      	ldr	r0, [pc, #64]	; (8000870 <MX_DAC1_Init+0x5c>)
 800082e:	f002 fde5 	bl	80033fc <HAL_DAC_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000838:	f000 fc1a 	bl	8001070 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2200      	movs	r2, #0
 8000854:	4619      	mov	r1, r3
 8000856:	4806      	ldr	r0, [pc, #24]	; (8000870 <MX_DAC1_Init+0x5c>)
 8000858:	f002 fe56 	bl	8003508 <HAL_DAC_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000862:	f000 fc05 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	3728      	adds	r7, #40	; 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200000e4 	.word	0x200000e4
 8000874:	40007400 	.word	0x40007400

08000878 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800087c:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <MX_I2C1_Init+0x74>)
 800087e:	4a1c      	ldr	r2, [pc, #112]	; (80008f0 <MX_I2C1_Init+0x78>)
 8000880:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000882:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_I2C1_Init+0x74>)
 8000884:	4a1b      	ldr	r2, [pc, #108]	; (80008f4 <MX_I2C1_Init+0x7c>)
 8000886:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_I2C1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_I2C1_Init+0x74>)
 8000890:	2201      	movs	r2, #1
 8000892:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_I2C1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_I2C1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_I2C1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_I2C1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008b2:	480e      	ldr	r0, [pc, #56]	; (80008ec <MX_I2C1_Init+0x74>)
 80008b4:	f004 fa4f 	bl	8004d56 <HAL_I2C_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008be:	f000 fbd7 	bl	8001070 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008c2:	2100      	movs	r1, #0
 80008c4:	4809      	ldr	r0, [pc, #36]	; (80008ec <MX_I2C1_Init+0x74>)
 80008c6:	f004 fad5 	bl	8004e74 <HAL_I2CEx_ConfigAnalogFilter>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008d0:	f000 fbce 	bl	8001070 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008d4:	2100      	movs	r1, #0
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_I2C1_Init+0x74>)
 80008d8:	f004 fb17 	bl	8004f0a <HAL_I2CEx_ConfigDigitalFilter>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008e2:	f000 fbc5 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200000f8 	.word	0x200000f8
 80008f0:	40005400 	.word	0x40005400
 80008f4:	20303e5d 	.word	0x20303e5d

080008f8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_LPUART1_UART_Init+0x50>)
 80008fe:	4a13      	ldr	r2, [pc, #76]	; (800094c <MX_LPUART1_UART_Init+0x54>)
 8000900:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_LPUART1_UART_Init+0x50>)
 8000904:	4a12      	ldr	r2, [pc, #72]	; (8000950 <MX_LPUART1_UART_Init+0x58>)
 8000906:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_LPUART1_UART_Init+0x50>)
 800090a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800090e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_LPUART1_UART_Init+0x50>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_LPUART1_UART_Init+0x50>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_LPUART1_UART_Init+0x50>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_LPUART1_UART_Init+0x50>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <MX_LPUART1_UART_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_LPUART1_UART_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_LPUART1_UART_Init+0x50>)
 8000936:	f008 fd39 	bl	80093ac <HAL_UART_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000940:	f000 fb96 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2000014c 	.word	0x2000014c
 800094c:	40008000 	.word	0x40008000
 8000950:	00033324 	.word	0x00033324

08000954 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_USART1_UART_Init+0x58>)
 800095a:	4a15      	ldr	r2, [pc, #84]	; (80009b0 <MX_USART1_UART_Init+0x5c>)
 800095c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <MX_USART1_UART_Init+0x58>)
 8000960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000964:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_USART1_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_USART1_UART_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_USART1_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_USART1_UART_Init+0x58>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <MX_USART1_UART_Init+0x58>)
 8000980:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000984:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_USART1_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <MX_USART1_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_USART1_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_USART1_UART_Init+0x58>)
 800099a:	f008 fd07 	bl	80093ac <HAL_UART_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 80009a4:	f000 fb64 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200001d0 	.word	0x200001d0
 80009b0:	40013800 	.word	0x40013800

080009b4 <MX_USART3_SMARTCARD_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_SMARTCARD_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  hsmartcard3.Instance = USART3;
 80009b8:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <MX_USART3_SMARTCARD_Init+0x8c>)
 80009ba:	4a22      	ldr	r2, [pc, #136]	; (8000a44 <MX_USART3_SMARTCARD_Init+0x90>)
 80009bc:	601a      	str	r2, [r3, #0]
  hsmartcard3.Init.BaudRate = 115200;
 80009be:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <MX_USART3_SMARTCARD_Init+0x8c>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  hsmartcard3.Init.WordLength = SMARTCARD_WORDLENGTH_9B;
 80009c6:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <MX_USART3_SMARTCARD_Init+0x8c>)
 80009c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009cc:	609a      	str	r2, [r3, #8]
  hsmartcard3.Init.StopBits = SMARTCARD_STOPBITS_1_5;
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <MX_USART3_SMARTCARD_Init+0x8c>)
 80009d0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80009d4:	60da      	str	r2, [r3, #12]
  hsmartcard3.Init.Parity = SMARTCARD_PARITY_EVEN;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <MX_USART3_SMARTCARD_Init+0x8c>)
 80009d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009dc:	821a      	strh	r2, [r3, #16]
  hsmartcard3.Init.Mode = SMARTCARD_MODE_TX_RX;
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <MX_USART3_SMARTCARD_Init+0x8c>)
 80009e0:	220c      	movs	r2, #12
 80009e2:	825a      	strh	r2, [r3, #18]
  hsmartcard3.Init.CLKPolarity = SMARTCARD_POLARITY_LOW;
 80009e4:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <MX_USART3_SMARTCARD_Init+0x8c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	829a      	strh	r2, [r3, #20]
  hsmartcard3.Init.CLKPhase = SMARTCARD_PHASE_1EDGE;
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <MX_USART3_SMARTCARD_Init+0x8c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	82da      	strh	r2, [r3, #22]
  hsmartcard3.Init.CLKLastBit = SMARTCARD_LASTBIT_DISABLE;
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <MX_USART3_SMARTCARD_Init+0x8c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	831a      	strh	r2, [r3, #24]
  hsmartcard3.Init.OneBitSampling = SMARTCARD_ONE_BIT_SAMPLE_DISABLE;
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <MX_USART3_SMARTCARD_Init+0x8c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	835a      	strh	r2, [r3, #26]
  hsmartcard3.Init.Prescaler = 10;
 80009fc:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_USART3_SMARTCARD_Init+0x8c>)
 80009fe:	220a      	movs	r2, #10
 8000a00:	771a      	strb	r2, [r3, #28]
  hsmartcard3.Init.GuardTime = 0;
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_USART3_SMARTCARD_Init+0x8c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	775a      	strb	r2, [r3, #29]
  hsmartcard3.Init.NACKEnable = SMARTCARD_NACK_DISABLE;
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <MX_USART3_SMARTCARD_Init+0x8c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	83da      	strh	r2, [r3, #30]
  hsmartcard3.Init.TimeOutEnable = SMARTCARD_TIMEOUT_DISABLE;
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_USART3_SMARTCARD_Init+0x8c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  hsmartcard3.Init.BlockLength = 0;
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <MX_USART3_SMARTCARD_Init+0x8c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hsmartcard3.Init.AutoRetryCount = 0;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_USART3_SMARTCARD_Init+0x8c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  hsmartcard3.AdvancedInit.AdvFeatureInit = SMARTCARD_ADVFEATURE_NO_INIT;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_USART3_SMARTCARD_Init+0x8c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SMARTCARD_Init(&hsmartcard3) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_USART3_SMARTCARD_Init+0x8c>)
 8000a2c:	f007 fe0a 	bl	8008644 <HAL_SMARTCARD_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART3_SMARTCARD_Init+0x86>
  {
    Error_Handler();
 8000a36:	f000 fb1b 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000254 	.word	0x20000254
 8000a44:	40004800 	.word	0x40004800

08000a48 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_OPAMP1_Init+0x44>)
 8000a4e:	4a10      	ldr	r2, [pc, #64]	; (8000a90 <MX_OPAMP1_Init+0x48>)
 8000a50:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_LOW;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_OPAMP1_Init+0x44>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_STANDALONE_MODE;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_OPAMP1_Init+0x44>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_OPAMP1_Init+0x44>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_OPAMP1_Init+0x44>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_OPAMP1_Init+0x44>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_OPAMP1_Init+0x44>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_OPAMP1_Init+0x44>)
 8000a78:	f004 fba0 	bl	80051bc <HAL_OPAMP_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 8000a82:	f000 faf5 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200002d4 	.word	0x200002d4
 8000a90:	40007800 	.word	0x40007800

08000a94 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000a98:	4b3c      	ldr	r3, [pc, #240]	; (8000b8c <MX_SAI1_Init+0xf8>)
 8000a9a:	4a3d      	ldr	r2, [pc, #244]	; (8000b90 <MX_SAI1_Init+0xfc>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8000a9e:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <MX_SAI1_Init+0xf8>)
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000aa4:	4b39      	ldr	r3, [pc, #228]	; (8000b8c <MX_SAI1_Init+0xf8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000aaa:	4b38      	ldr	r3, [pc, #224]	; (8000b8c <MX_SAI1_Init+0xf8>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ab0:	4b36      	ldr	r3, [pc, #216]	; (8000b8c <MX_SAI1_Init+0xf8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ab6:	4b35      	ldr	r3, [pc, #212]	; (8000b8c <MX_SAI1_Init+0xf8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000abc:	4b33      	ldr	r3, [pc, #204]	; (8000b8c <MX_SAI1_Init+0xf8>)
 8000abe:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000ac2:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ac4:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <MX_SAI1_Init+0xf8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000aca:	4b30      	ldr	r3, [pc, #192]	; (8000b8c <MX_SAI1_Init+0xf8>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ad0:	4b2e      	ldr	r3, [pc, #184]	; (8000b8c <MX_SAI1_Init+0xf8>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000ad6:	482d      	ldr	r0, [pc, #180]	; (8000b8c <MX_SAI1_Init+0xf8>)
 8000ad8:	f006 fe16 	bl	8007708 <HAL_SAI_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_SAI1_Init+0x52>
  {
    Error_Handler();
 8000ae2:	f000 fac5 	bl	8001070 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000ae6:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000ae8:	4a2b      	ldr	r2, [pc, #172]	; (8000b98 <MX_SAI1_Init+0x104>)
 8000aea:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000aec:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000af2:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000af8:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000afa:	2240      	movs	r2, #64	; 0x40
 8000afc:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000afe:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000b04:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b0a:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b10:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000b24:	4a1d      	ldr	r2, [pc, #116]	; (8000b9c <MX_SAI1_Init+0x108>)
 8000b26:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000b42:	2208      	movs	r2, #8
 8000b44:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000b64:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000b76:	4807      	ldr	r0, [pc, #28]	; (8000b94 <MX_SAI1_Init+0x100>)
 8000b78:	f006 fdc6 	bl	8007708 <HAL_SAI_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_SAI1_Init+0xf2>
  {
    Error_Handler();
 8000b82:	f000 fa75 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000308 	.word	0x20000308
 8000b90:	40015404 	.word	0x40015404
 8000b94:	2000038c 	.word	0x2000038c
 8000b98:	40015424 	.word	0x40015424
 8000b9c:	0002ee00 	.word	0x0002ee00

08000ba0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_SDMMC1_SD_Init+0x58>)
 8000ba6:	4a15      	ldr	r2, [pc, #84]	; (8000bfc <MX_SDMMC1_SD_Init+0x5c>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_SDMMC1_SD_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_SDMMC1_SD_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <MX_SDMMC1_SD_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_SDMMC1_SD_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <MX_SDMMC1_SD_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_SDMMC1_SD_Init+0x58>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000bce:	480a      	ldr	r0, [pc, #40]	; (8000bf8 <MX_SDMMC1_SD_Init+0x58>)
 8000bd0:	f006 ff46 	bl	8007a60 <HAL_SD_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8000bda:	f000 fa49 	bl	8001070 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000bde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_SDMMC1_SD_Init+0x58>)
 8000be4:	f007 f9b6 	bl	8007f54 <HAL_SD_ConfigWideBusOperation>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8000bee:	f000 fa3f 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000410 	.word	0x20000410
 8000bfc:	40012800 	.word	0x40012800

08000c00 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <MX_SPI2_Init+0x74>)
 8000c06:	4a1c      	ldr	r2, [pc, #112]	; (8000c78 <MX_SPI2_Init+0x78>)
 8000c08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_SPI2_Init+0x74>)
 8000c0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c10:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <MX_SPI2_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c18:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_SPI2_Init+0x74>)
 8000c1a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c1e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_SPI2_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_SPI2_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_SPI2_Init+0x74>)
 8000c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c32:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_SPI2_Init+0x74>)
 8000c36:	2218      	movs	r2, #24
 8000c38:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_SPI2_Init+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_SPI2_Init+0x74>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MX_SPI2_Init+0x74>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_SPI2_Init+0x74>)
 8000c4e:	2207      	movs	r2, #7
 8000c50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <MX_SPI2_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_SPI2_Init+0x74>)
 8000c5a:	2208      	movs	r2, #8
 8000c5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_SPI2_Init+0x74>)
 8000c60:	f007 ffe8 	bl	8008c34 <HAL_SPI_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000c6a:	f000 fa01 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000494 	.word	0x20000494
 8000c78:	40003800 	.word	0x40003800

08000c7c <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000c82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c86:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000c8a:	2208      	movs	r2, #8
 8000c8c:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000ca8:	f002 ff2e 	bl	8003b08 <HAL_HCD_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8000cb2:	f000 f9dd 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200004f8 	.word	0x200004f8

08000cc0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	2220      	movs	r2, #32
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f00c ff07 	bl	800dae0 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 8000cd2:	4b4c      	ldr	r3, [pc, #304]	; (8000e04 <MX_FMC_Init+0x144>)
 8000cd4:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000cd8:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000cda:	4b4a      	ldr	r3, [pc, #296]	; (8000e04 <MX_FMC_Init+0x144>)
 8000cdc:	4a4a      	ldr	r2, [pc, #296]	; (8000e08 <MX_FMC_Init+0x148>)
 8000cde:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FMC_NORSRAM_BANK2;
 8000ce0:	4b48      	ldr	r3, [pc, #288]	; (8000e04 <MX_FMC_Init+0x144>)
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000ce6:	4b47      	ldr	r3, [pc, #284]	; (8000e04 <MX_FMC_Init+0x144>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FMC_MEMORY_TYPE_NOR;
 8000cec:	4b45      	ldr	r3, [pc, #276]	; (8000e04 <MX_FMC_Init+0x144>)
 8000cee:	2208      	movs	r2, #8
 8000cf0:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000cf2:	4b44      	ldr	r3, [pc, #272]	; (8000e04 <MX_FMC_Init+0x144>)
 8000cf4:	2210      	movs	r2, #16
 8000cf6:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000cf8:	4b42      	ldr	r3, [pc, #264]	; (8000e04 <MX_FMC_Init+0x144>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000cfe:	4b41      	ldr	r3, [pc, #260]	; (8000e04 <MX_FMC_Init+0x144>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	61da      	str	r2, [r3, #28]
  hnor1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000d04:	4b3f      	ldr	r3, [pc, #252]	; (8000e04 <MX_FMC_Init+0x144>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	621a      	str	r2, [r3, #32]
  hnor1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000d0a:	4b3e      	ldr	r3, [pc, #248]	; (8000e04 <MX_FMC_Init+0x144>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000d10:	4b3c      	ldr	r3, [pc, #240]	; (8000e04 <MX_FMC_Init+0x144>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000d16:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <MX_FMC_Init+0x144>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d1c:	4b39      	ldr	r3, [pc, #228]	; (8000e04 <MX_FMC_Init+0x144>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000d22:	4b38      	ldr	r3, [pc, #224]	; (8000e04 <MX_FMC_Init+0x144>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000d28:	4b36      	ldr	r3, [pc, #216]	; (8000e04 <MX_FMC_Init+0x144>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000d2e:	4b35      	ldr	r3, [pc, #212]	; (8000e04 <MX_FMC_Init+0x144>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000d34:	230f      	movs	r3, #15
 8000d36:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000d38:	230f      	movs	r3, #15
 8000d3a:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000d3c:	23ff      	movs	r3, #255	; 0xff
 8000d3e:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8000d40:	230f      	movs	r3, #15
 8000d42:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000d44:	2310      	movs	r3, #16
 8000d46:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000d48:	2311      	movs	r3, #17
 8000d4a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8000d50:	463b      	mov	r3, r7
 8000d52:	2200      	movs	r2, #0
 8000d54:	4619      	mov	r1, r3
 8000d56:	482b      	ldr	r0, [pc, #172]	; (8000e04 <MX_FMC_Init+0x144>)
 8000d58:	f004 f924 	bl	8004fa4 <HAL_NOR_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_FMC_Init+0xa6>
  {
    Error_Handler( );
 8000d62:	f000 f985 	bl	8001070 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8000d66:	4b29      	ldr	r3, [pc, #164]	; (8000e0c <MX_FMC_Init+0x14c>)
 8000d68:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000d6c:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000d6e:	4b27      	ldr	r3, [pc, #156]	; (8000e0c <MX_FMC_Init+0x14c>)
 8000d70:	4a25      	ldr	r2, [pc, #148]	; (8000e08 <MX_FMC_Init+0x148>)
 8000d72:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 8000d74:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <MX_FMC_Init+0x14c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000d7a:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <MX_FMC_Init+0x14c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000d80:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <MX_FMC_Init+0x14c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000d86:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <MX_FMC_Init+0x14c>)
 8000d88:	2210      	movs	r2, #16
 8000d8a:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <MX_FMC_Init+0x14c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d92:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <MX_FMC_Init+0x14c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000d98:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <MX_FMC_Init+0x14c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <MX_FMC_Init+0x14c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000da4:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <MX_FMC_Init+0x14c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000daa:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <MX_FMC_Init+0x14c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <MX_FMC_Init+0x14c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <MX_FMC_Init+0x14c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <MX_FMC_Init+0x14c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <MX_FMC_Init+0x14c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000dc8:	230f      	movs	r3, #15
 8000dca:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000dcc:	230f      	movs	r3, #15
 8000dce:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000dd0:	23ff      	movs	r3, #255	; 0xff
 8000dd2:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000dd8:	2310      	movs	r3, #16
 8000dda:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000ddc:	2311      	movs	r3, #17
 8000dde:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000de4:	463b      	mov	r3, r7
 8000de6:	2200      	movs	r2, #0
 8000de8:	4619      	mov	r1, r3
 8000dea:	4808      	ldr	r0, [pc, #32]	; (8000e0c <MX_FMC_Init+0x14c>)
 8000dec:	f007 ffc5 	bl	8008d7a <HAL_SRAM_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_FMC_Init+0x13a>
  {
    Error_Handler( );
 8000df6:	f000 f93b 	bl	8001070 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000dfa:	bf00      	nop
 8000dfc:	3720      	adds	r7, #32
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200007fc 	.word	0x200007fc
 8000e08:	a0000104 	.word	0xa0000104
 8000e0c:	2000084c 	.word	0x2000084c

08000e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08e      	sub	sp, #56	; 0x38
 8000e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e26:	4b74      	ldr	r3, [pc, #464]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	4a73      	ldr	r2, [pc, #460]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000e2c:	f043 0310 	orr.w	r3, r3, #16
 8000e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e32:	4b71      	ldr	r3, [pc, #452]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	f003 0310 	and.w	r3, r3, #16
 8000e3a:	623b      	str	r3, [r7, #32]
 8000e3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	4b6e      	ldr	r3, [pc, #440]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	4a6d      	ldr	r2, [pc, #436]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4a:	4b6b      	ldr	r3, [pc, #428]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	61fb      	str	r3, [r7, #28]
 8000e54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e56:	4b68      	ldr	r3, [pc, #416]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	4a67      	ldr	r2, [pc, #412]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000e5c:	f043 0320 	orr.w	r3, r3, #32
 8000e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e62:	4b65      	ldr	r3, [pc, #404]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	f003 0320 	and.w	r3, r3, #32
 8000e6a:	61bb      	str	r3, [r7, #24]
 8000e6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6e:	4b62      	ldr	r3, [pc, #392]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4a61      	ldr	r2, [pc, #388]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4b5f      	ldr	r3, [pc, #380]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	4b5c      	ldr	r3, [pc, #368]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	4a5b      	ldr	r2, [pc, #364]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e92:	4b59      	ldr	r3, [pc, #356]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	4b56      	ldr	r3, [pc, #344]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	4a55      	ldr	r2, [pc, #340]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eaa:	4b53      	ldr	r3, [pc, #332]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eb6:	4b50      	ldr	r3, [pc, #320]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	4a4f      	ldr	r2, [pc, #316]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec2:	4b4d      	ldr	r3, [pc, #308]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ece:	4b4a      	ldr	r3, [pc, #296]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	4a49      	ldr	r2, [pc, #292]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000ed4:	f043 0308 	orr.w	r3, r3, #8
 8000ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eda:	4b47      	ldr	r3, [pc, #284]	; (8000ff8 <MX_GPIO_Init+0x1e8>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000ee6:	f004 fab3 	bl	8005450 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2104      	movs	r1, #4
 8000eee:	4843      	ldr	r0, [pc, #268]	; (8000ffc <MX_GPIO_Init+0x1ec>)
 8000ef0:	f002 fdd8 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_NSS_GPIO_Port, NFC_NSS_Pin, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000efa:	4841      	ldr	r0, [pc, #260]	; (8001000 <MX_GPIO_Init+0x1f0>)
 8000efc:	f002 fdd2 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USBOTG_PPWR_GPIO_Port, USBOTG_PPWR_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2140      	movs	r1, #64	; 0x40
 8000f04:	483f      	ldr	r0, [pc, #252]	; (8001004 <MX_GPIO_Init+0x1f4>)
 8000f06:	f002 fdcd 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VLCD_Pin */
  GPIO_InitStruct.Pin = VLCD_Pin;
 8000f0a:	2308      	movs	r3, #8
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f1a:	230b      	movs	r3, #11
 8000f1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(VLCD_GPIO_Port, &GPIO_InitStruct);
 8000f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f22:	4619      	mov	r1, r3
 8000f24:	4837      	ldr	r0, [pc, #220]	; (8001004 <MX_GPIO_Init+0x1f4>)
 8000f26:	f002 fc13 	bl	8003750 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3e:	4619      	mov	r1, r3
 8000f40:	482e      	ldr	r0, [pc, #184]	; (8000ffc <MX_GPIO_Init+0x1ec>)
 8000f42:	f002 fc05 	bl	8003750 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFC_NSS_Pin */
  GPIO_InitStruct.Pin = NFC_NSS_Pin;
 8000f46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(NFC_NSS_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4828      	ldr	r0, [pc, #160]	; (8001000 <MX_GPIO_Init+0x1f0>)
 8000f60:	f002 fbf6 	bl	8003750 <HAL_GPIO_Init>

  /*Configure GPIO pin : USBOTG_OVRCR_Pin */
  GPIO_InitStruct.Pin = USBOTG_OVRCR_Pin;
 8000f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USBOTG_OVRCR_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4820      	ldr	r0, [pc, #128]	; (8000ffc <MX_GPIO_Init+0x1ec>)
 8000f7c:	f002 fbe8 	bl	8003750 <HAL_GPIO_Init>

  /*Configure GPIO pins : CODEC_INT_Pin IOExpander_INT_Pin */
  GPIO_InitStruct.Pin = CODEC_INT_Pin|IOExpander_INT_Pin;
 8000f80:	f248 0340 	movw	r3, #32832	; 0x8040
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f86:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f94:	4619      	mov	r1, r3
 8000f96:	481c      	ldr	r0, [pc, #112]	; (8001008 <MX_GPIO_Init+0x1f8>)
 8000f98:	f002 fbda 	bl	8003750 <HAL_GPIO_Init>

  /*Configure GPIO pin : USBOTG_PPWR_Pin */
  GPIO_InitStruct.Pin = USBOTG_PPWR_Pin;
 8000f9c:	2340      	movs	r3, #64	; 0x40
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USBOTG_PPWR_GPIO_Port, &GPIO_InitStruct);
 8000fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4814      	ldr	r0, [pc, #80]	; (8001004 <MX_GPIO_Init+0x1f4>)
 8000fb4:	f002 fbcc 	bl	8003750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PT100_DATIN_Pin */
  GPIO_InitStruct.Pin = PT100_DATIN_Pin;
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fbc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PT100_DATIN_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <MX_GPIO_Init+0x1f4>)
 8000fce:	f002 fbbf 	bl	8003750 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_DETECT_Pin */
  GPIO_InitStruct.Pin = uSD_DETECT_Pin;
 8000fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fea:	f002 fbb1 	bl	8003750 <HAL_GPIO_Init>

}
 8000fee:	bf00      	nop
 8000ff0:	3738      	adds	r7, #56	; 0x38
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	48000400 	.word	0x48000400
 8001000:	48001400 	.word	0x48001400
 8001004:	48000800 	.word	0x48000800
 8001008:	48001800 	.word	0x48001800

0800100c <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001014:	2104      	movs	r1, #4
 8001016:	4804      	ldr	r0, [pc, #16]	; (8001028 <StartBlink01+0x1c>)
 8001018:	f002 fd5c 	bl	8003ad4 <HAL_GPIO_TogglePin>
	  osDelay(500);
 800101c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001020:	f00a f8b4 	bl	800b18c <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001024:	e7f6      	b.n	8001014 <StartBlink01+0x8>
 8001026:	bf00      	nop
 8001028:	48000400 	.word	0x48000400

0800102c <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001034:	2104      	movs	r1, #4
 8001036:	4804      	ldr	r0, [pc, #16]	; (8001048 <StartBlink02+0x1c>)
 8001038:	f002 fd4c 	bl	8003ad4 <HAL_GPIO_TogglePin>
	  osDelay(600);
 800103c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001040:	f00a f8a4 	bl	800b18c <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001044:	e7f6      	b.n	8001034 <StartBlink02+0x8>
 8001046:	bf00      	nop
 8001048:	48000400 	.word	0x48000400

0800104c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800105e:	f000 fe69 	bl	8001d34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40001400 	.word	0x40001400

08001070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001074:	b672      	cpsid	i
}
 8001076:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001078:	e7fe      	b.n	8001078 <Error_Handler+0x8>
	...

0800107c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_MspInit+0x4c>)
 8001084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001086:	4a10      	ldr	r2, [pc, #64]	; (80010c8 <HAL_MspInit+0x4c>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6613      	str	r3, [r2, #96]	; 0x60
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <HAL_MspInit+0x4c>)
 8001090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <HAL_MspInit+0x4c>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <HAL_MspInit+0x4c>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	6593      	str	r3, [r2, #88]	; 0x58
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <HAL_MspInit+0x4c>)
 80010a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	210f      	movs	r1, #15
 80010b6:	f06f 0001 	mvn.w	r0, #1
 80010ba:	f002 f975 	bl	80033a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000

080010cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a21      	ldr	r2, [pc, #132]	; (8001170 <HAL_ADC_MspInit+0xa4>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d13c      	bne.n	8001168 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <HAL_ADC_MspInit+0xa8>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4a20      	ldr	r2, [pc, #128]	; (8001174 <HAL_ADC_MspInit+0xa8>)
 80010f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <HAL_ADC_MspInit+0xa8>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <HAL_ADC_MspInit+0xa8>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4a1a      	ldr	r2, [pc, #104]	; (8001174 <HAL_ADC_MspInit+0xa8>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_ADC_MspInit+0xa8>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <HAL_ADC_MspInit+0xa8>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	4a14      	ldr	r2, [pc, #80]	; (8001174 <HAL_ADC_MspInit+0xa8>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_ADC_MspInit+0xa8>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = DMCI_DATAIN_Pin;
 8001136:	2301      	movs	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800113a:	230b      	movs	r3, #11
 800113c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DMCI_DATAIN_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	480b      	ldr	r0, [pc, #44]	; (8001178 <HAL_ADC_MspInit+0xac>)
 800114a:	f002 fb01 	bl	8003750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 800114e:	2320      	movs	r3, #32
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001152:	230b      	movs	r3, #11
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001164:	f002 faf4 	bl	8003750 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001168:	bf00      	nop
 800116a:	3728      	adds	r7, #40	; 0x28
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	50040000 	.word	0x50040000
 8001174:	40021000 	.word	0x40021000
 8001178:	48000800 	.word	0x48000800

0800117c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <HAL_CAN_MspInit+0x7c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d128      	bne.n	80011f0 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <HAL_CAN_MspInit+0x80>)
 80011a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a2:	4a16      	ldr	r2, [pc, #88]	; (80011fc <HAL_CAN_MspInit+0x80>)
 80011a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011a8:	6593      	str	r3, [r2, #88]	; 0x58
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HAL_CAN_MspInit+0x80>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <HAL_CAN_MspInit+0x80>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	4a10      	ldr	r2, [pc, #64]	; (80011fc <HAL_CAN_MspInit+0x80>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <HAL_CAN_MspInit+0x80>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 80011ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011e0:	2309      	movs	r3, #9
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <HAL_CAN_MspInit+0x84>)
 80011ec:	f002 fab0 	bl	8003750 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	; 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40006400 	.word	0x40006400
 80011fc:	40021000 	.word	0x40021000
 8001200:	48000400 	.word	0x48000400

08001204 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a17      	ldr	r2, [pc, #92]	; (8001280 <HAL_COMP_MspInit+0x7c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d127      	bne.n	8001276 <HAL_COMP_MspInit+0x72>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <HAL_COMP_MspInit+0x80>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	4a16      	ldr	r2, [pc, #88]	; (8001284 <HAL_COMP_MspInit+0x80>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001232:	4b14      	ldr	r3, [pc, #80]	; (8001284 <HAL_COMP_MspInit+0x80>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration
    PB4 (NJTRST)     ------> COMP2_INP
    PB5     ------> COMP2_OUT
    */
    GPIO_InitStruct.Pin = comp2_INP_Pin;
 800123e:	2310      	movs	r3, #16
 8001240:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001242:	2303      	movs	r3, #3
 8001244:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(comp2_INP_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	4619      	mov	r1, r3
 8001250:	480d      	ldr	r0, [pc, #52]	; (8001288 <HAL_COMP_MspInit+0x84>)
 8001252:	f002 fa7d 	bl	8003750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Comp2_OUT_Pin;
 8001256:	2320      	movs	r3, #32
 8001258:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_COMP2;
 8001266:	230c      	movs	r3, #12
 8001268:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Comp2_OUT_GPIO_Port, &GPIO_InitStruct);
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <HAL_COMP_MspInit+0x84>)
 8001272:	f002 fa6d 	bl	8003750 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8001276:	bf00      	nop
 8001278:	3720      	adds	r7, #32
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40010204 	.word	0x40010204
 8001284:	40021000 	.word	0x40021000
 8001288:	48000400 	.word	0x48000400

0800128c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a19      	ldr	r2, [pc, #100]	; (8001310 <HAL_DAC_MspInit+0x84>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d12c      	bne.n	8001308 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <HAL_DAC_MspInit+0x88>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	4a18      	ldr	r2, [pc, #96]	; (8001314 <HAL_DAC_MspInit+0x88>)
 80012b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012b8:	6593      	str	r3, [r2, #88]	; 0x58
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <HAL_DAC_MspInit+0x88>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <HAL_DAC_MspInit+0x88>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <HAL_DAC_MspInit+0x88>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <HAL_DAC_MspInit+0x88>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = ADC_DAC_Pin;
 80012de:	2310      	movs	r3, #16
 80012e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e2:	2303      	movs	r3, #3
 80012e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_DAC_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f4:	f002 fa2c 	bl	8003750 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	210f      	movs	r1, #15
 80012fc:	2036      	movs	r0, #54	; 0x36
 80012fe:	f002 f853 	bl	80033a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001302:	2036      	movs	r0, #54	; 0x36
 8001304:	f002 f86c 	bl	80033e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001308:	bf00      	nop
 800130a:	3728      	adds	r7, #40	; 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40007400 	.word	0x40007400
 8001314:	40021000 	.word	0x40021000

08001318 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b0ac      	sub	sp, #176	; 0xb0
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2288      	movs	r2, #136	; 0x88
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f00c fbd1 	bl	800dae0 <memset>
  if(hi2c->Instance==I2C1)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a22      	ldr	r2, [pc, #136]	; (80013cc <HAL_I2C_MspInit+0xb4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d13d      	bne.n	80013c4 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001348:	2340      	movs	r3, #64	; 0x40
 800134a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800134c:	2300      	movs	r3, #0
 800134e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4618      	mov	r0, r3
 8001356:	f004 febd 	bl	80060d4 <HAL_RCCEx_PeriphCLKConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001360:	f7ff fe86 	bl	8001070 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <HAL_I2C_MspInit+0xb8>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	4a19      	ldr	r2, [pc, #100]	; (80013d0 <HAL_I2C_MspInit+0xb8>)
 800136a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800136e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001370:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <HAL_I2C_MspInit+0xb8>)
 8001372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 800137c:	f004 f868 	bl	8005450 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8001380:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001384:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001388:	2312      	movs	r3, #18
 800138a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800138e:	2301      	movs	r3, #1
 8001390:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800139a:	2304      	movs	r3, #4
 800139c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013a4:	4619      	mov	r1, r3
 80013a6:	480b      	ldr	r0, [pc, #44]	; (80013d4 <HAL_I2C_MspInit+0xbc>)
 80013a8:	f002 f9d2 	bl	8003750 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HAL_I2C_MspInit+0xb8>)
 80013ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b0:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <HAL_I2C_MspInit+0xb8>)
 80013b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b6:	6593      	str	r3, [r2, #88]	; 0x58
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_I2C_MspInit+0xb8>)
 80013ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013c4:	bf00      	nop
 80013c6:	37b0      	adds	r7, #176	; 0xb0
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40005400 	.word	0x40005400
 80013d0:	40021000 	.word	0x40021000
 80013d4:	48001800 	.word	0x48001800

080013d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b0ae      	sub	sp, #184	; 0xb8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	2288      	movs	r2, #136	; 0x88
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f00c fb71 	bl	800dae0 <memset>
  if(huart->Instance==LPUART1)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a55      	ldr	r2, [pc, #340]	; (8001558 <HAL_UART_MspInit+0x180>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d13e      	bne.n	8001486 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001408:	2320      	movs	r3, #32
 800140a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800140c:	2300      	movs	r3, #0
 800140e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4618      	mov	r0, r3
 8001416:	f004 fe5d 	bl	80060d4 <HAL_RCCEx_PeriphCLKConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001420:	f7ff fe26 	bl	8001070 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001424:	4b4d      	ldr	r3, [pc, #308]	; (800155c <HAL_UART_MspInit+0x184>)
 8001426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001428:	4a4c      	ldr	r2, [pc, #304]	; (800155c <HAL_UART_MspInit+0x184>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001430:	4b4a      	ldr	r3, [pc, #296]	; (800155c <HAL_UART_MspInit+0x184>)
 8001432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800143c:	4b47      	ldr	r3, [pc, #284]	; (800155c <HAL_UART_MspInit+0x184>)
 800143e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001440:	4a46      	ldr	r2, [pc, #280]	; (800155c <HAL_UART_MspInit+0x184>)
 8001442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001446:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001448:	4b44      	ldr	r3, [pc, #272]	; (800155c <HAL_UART_MspInit+0x184>)
 800144a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8001454:	f003 fffc 	bl	8005450 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART_TX_Pin|LPUART_RX_3V3_Pin;
 8001458:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800145c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001466:	2301      	movs	r3, #1
 8001468:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001472:	2308      	movs	r3, #8
 8001474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001478:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800147c:	4619      	mov	r1, r3
 800147e:	4838      	ldr	r0, [pc, #224]	; (8001560 <HAL_UART_MspInit+0x188>)
 8001480:	f002 f966 	bl	8003750 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001484:	e063      	b.n	800154e <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART1)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a36      	ldr	r2, [pc, #216]	; (8001564 <HAL_UART_MspInit+0x18c>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d15e      	bne.n	800154e <HAL_UART_MspInit+0x176>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001490:	2301      	movs	r3, #1
 8001492:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001494:	2300      	movs	r3, #0
 8001496:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4618      	mov	r0, r3
 800149e:	f004 fe19 	bl	80060d4 <HAL_RCCEx_PeriphCLKConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80014a8:	f7ff fde2 	bl	8001070 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ac:	4b2b      	ldr	r3, [pc, #172]	; (800155c <HAL_UART_MspInit+0x184>)
 80014ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b0:	4a2a      	ldr	r2, [pc, #168]	; (800155c <HAL_UART_MspInit+0x184>)
 80014b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b6:	6613      	str	r3, [r2, #96]	; 0x60
 80014b8:	4b28      	ldr	r3, [pc, #160]	; (800155c <HAL_UART_MspInit+0x184>)
 80014ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014c4:	4b25      	ldr	r3, [pc, #148]	; (800155c <HAL_UART_MspInit+0x184>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c8:	4a24      	ldr	r2, [pc, #144]	; (800155c <HAL_UART_MspInit+0x184>)
 80014ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <HAL_UART_MspInit+0x184>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80014dc:	f003 ffb8 	bl	8005450 <HAL_PWREx_EnableVddIO2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <HAL_UART_MspInit+0x184>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e4:	4a1d      	ldr	r2, [pc, #116]	; (800155c <HAL_UART_MspInit+0x184>)
 80014e6:	f043 0302 	orr.w	r3, r3, #2
 80014ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_UART_MspInit+0x184>)
 80014ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_CTS_3V3_Pin|USART1_RTS_Pin;
 80014f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001512:	2307      	movs	r3, #7
 8001514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001518:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800151c:	4619      	mov	r1, r3
 800151e:	4810      	ldr	r0, [pc, #64]	; (8001560 <HAL_UART_MspInit+0x188>)
 8001520:	f002 f916 	bl	8003750 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_IrDA_RX_3V3_Pin;
 8001524:	23c0      	movs	r3, #192	; 0xc0
 8001526:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001530:	2301      	movs	r3, #1
 8001532:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800153c:	2307      	movs	r3, #7
 800153e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001542:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001546:	4619      	mov	r1, r3
 8001548:	4807      	ldr	r0, [pc, #28]	; (8001568 <HAL_UART_MspInit+0x190>)
 800154a:	f002 f901 	bl	8003750 <HAL_GPIO_Init>
}
 800154e:	bf00      	nop
 8001550:	37b8      	adds	r7, #184	; 0xb8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40008000 	.word	0x40008000
 800155c:	40021000 	.word	0x40021000
 8001560:	48001800 	.word	0x48001800
 8001564:	40013800 	.word	0x40013800
 8001568:	48000400 	.word	0x48000400

0800156c <HAL_SMARTCARD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmartcard: SMARTCARD handle pointer
* @retval None
*/
void HAL_SMARTCARD_MspInit(SMARTCARD_HandleTypeDef* hsmartcard)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b0ac      	sub	sp, #176	; 0xb0
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2288      	movs	r2, #136	; 0x88
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f00c faa7 	bl	800dae0 <memset>
  if(hsmartcard->Instance==USART3)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a31      	ldr	r2, [pc, #196]	; (800165c <HAL_SMARTCARD_MspInit+0xf0>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d15b      	bne.n	8001654 <HAL_SMARTCARD_MspInit+0xe8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800159c:	2304      	movs	r3, #4
 800159e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4618      	mov	r0, r3
 80015aa:	f004 fd93 	bl	80060d4 <HAL_RCCEx_PeriphCLKConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_SMARTCARD_MspInit+0x4c>
    {
      Error_Handler();
 80015b4:	f7ff fd5c 	bl	8001070 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015b8:	4b29      	ldr	r3, [pc, #164]	; (8001660 <HAL_SMARTCARD_MspInit+0xf4>)
 80015ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015bc:	4a28      	ldr	r2, [pc, #160]	; (8001660 <HAL_SMARTCARD_MspInit+0xf4>)
 80015be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c2:	6593      	str	r3, [r2, #88]	; 0x58
 80015c4:	4b26      	ldr	r3, [pc, #152]	; (8001660 <HAL_SMARTCARD_MspInit+0xf4>)
 80015c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d0:	4b23      	ldr	r3, [pc, #140]	; (8001660 <HAL_SMARTCARD_MspInit+0xf4>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	4a22      	ldr	r2, [pc, #136]	; (8001660 <HAL_SMARTCARD_MspInit+0xf4>)
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015dc:	4b20      	ldr	r3, [pc, #128]	; (8001660 <HAL_SMARTCARD_MspInit+0xf4>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <HAL_SMARTCARD_MspInit+0xf4>)
 80015ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ec:	4a1c      	ldr	r2, [pc, #112]	; (8001660 <HAL_SMARTCARD_MspInit+0xf4>)
 80015ee:	f043 0302 	orr.w	r3, r3, #2
 80015f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f4:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <HAL_SMARTCARD_MspInit+0xf4>)
 80015f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PB0     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = SmartCard_IO_Pin;
 8001600:	2310      	movs	r3, #16
 8001602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001606:	2312      	movs	r3, #18
 8001608:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160c:	2301      	movs	r3, #1
 800160e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001612:	2303      	movs	r3, #3
 8001614:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001618:	2307      	movs	r3, #7
 800161a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(SmartCard_IO_GPIO_Port, &GPIO_InitStruct);
 800161e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001622:	4619      	mov	r1, r3
 8001624:	480f      	ldr	r0, [pc, #60]	; (8001664 <HAL_SMARTCARD_MspInit+0xf8>)
 8001626:	f002 f893 	bl	8003750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SmartCard_CLK_Pin;
 800162a:	2301      	movs	r3, #1
 800162c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001642:	2307      	movs	r3, #7
 8001644:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(SmartCard_CLK_GPIO_Port, &GPIO_InitStruct);
 8001648:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800164c:	4619      	mov	r1, r3
 800164e:	4806      	ldr	r0, [pc, #24]	; (8001668 <HAL_SMARTCARD_MspInit+0xfc>)
 8001650:	f002 f87e 	bl	8003750 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001654:	bf00      	nop
 8001656:	37b0      	adds	r7, #176	; 0xb0
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40004800 	.word	0x40004800
 8001660:	40021000 	.word	0x40021000
 8001664:	48000800 	.word	0x48000800
 8001668:	48000400 	.word	0x48000400

0800166c <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a15      	ldr	r2, [pc, #84]	; (80016e0 <HAL_OPAMP_MspInit+0x74>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d124      	bne.n	80016d8 <HAL_OPAMP_MspInit+0x6c>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_OPAMP_MspInit+0x78>)
 8001690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001692:	4a14      	ldr	r2, [pc, #80]	; (80016e4 <HAL_OPAMP_MspInit+0x78>)
 8001694:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001698:	6593      	str	r3, [r2, #88]	; 0x58
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_OPAMP_MspInit+0x78>)
 800169c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <HAL_OPAMP_MspInit+0x78>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016aa:	4a0e      	ldr	r2, [pc, #56]	; (80016e4 <HAL_OPAMP_MspInit+0x78>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <HAL_OPAMP_MspInit+0x78>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP1 GPIO Configuration
    PA0     ------> OPAMP1_VINP
    PA1     ------> OPAMP1_VINM
    PA3     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = OpAmp1_INP_Pin|OpAmp1_INM_Pin|OpAmp1_OUT_Pin;
 80016be:	230b      	movs	r3, #11
 80016c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c2:	2303      	movs	r3, #3
 80016c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d4:	f002 f83c 	bl	8003750 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 80016d8:	bf00      	nop
 80016da:	3728      	adds	r7, #40	; 0x28
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40007800 	.word	0x40007800
 80016e4:	40021000 	.word	0x40021000

080016e8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b0ac      	sub	sp, #176	; 0xb0
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2288      	movs	r2, #136	; 0x88
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f00c f9e9 	bl	800dae0 <memset>
  if(hsd->Instance==SDMMC1)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a33      	ldr	r2, [pc, #204]	; (80017e0 <HAL_SD_MspInit+0xf8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d15f      	bne.n	80017d8 <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001718:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800171c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLL;
 800171e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001722:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4618      	mov	r0, r3
 800172c:	f004 fcd2 	bl	80060d4 <HAL_RCCEx_PeriphCLKConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8001736:	f7ff fc9b 	bl	8001070 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800173a:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <HAL_SD_MspInit+0xfc>)
 800173c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173e:	4a29      	ldr	r2, [pc, #164]	; (80017e4 <HAL_SD_MspInit+0xfc>)
 8001740:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001744:	6613      	str	r3, [r2, #96]	; 0x60
 8001746:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <HAL_SD_MspInit+0xfc>)
 8001748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001752:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <HAL_SD_MspInit+0xfc>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001756:	4a23      	ldr	r2, [pc, #140]	; (80017e4 <HAL_SD_MspInit+0xfc>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175e:	4b21      	ldr	r3, [pc, #132]	; (80017e4 <HAL_SD_MspInit+0xfc>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800176a:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <HAL_SD_MspInit+0xfc>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	4a1d      	ldr	r2, [pc, #116]	; (80017e4 <HAL_SD_MspInit+0xfc>)
 8001770:	f043 0308 	orr.w	r3, r3, #8
 8001774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001776:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_SD_MspInit+0xfc>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = uSD_D0_Pin|uSD_D1_Pin|uSD_D2_Pin|uSD_D3_Pin
 8001782:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001786:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |uSD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800179c:	230c      	movs	r3, #12
 800179e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017a6:	4619      	mov	r1, r3
 80017a8:	480f      	ldr	r0, [pc, #60]	; (80017e8 <HAL_SD_MspInit+0x100>)
 80017aa:	f001 ffd1 	bl	8003750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80017ae:	2304      	movs	r3, #4
 80017b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80017c6:	230c      	movs	r3, #12
 80017c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017d0:	4619      	mov	r1, r3
 80017d2:	4806      	ldr	r0, [pc, #24]	; (80017ec <HAL_SD_MspInit+0x104>)
 80017d4:	f001 ffbc 	bl	8003750 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80017d8:	bf00      	nop
 80017da:	37b0      	adds	r7, #176	; 0xb0
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40012800 	.word	0x40012800
 80017e4:	40021000 	.word	0x40021000
 80017e8:	48000800 	.word	0x48000800
 80017ec:	48000c00 	.word	0x48000c00

080017f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <HAL_SPI_MspInit+0x7c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d128      	bne.n	8001864 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_SPI_MspInit+0x80>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	4a16      	ldr	r2, [pc, #88]	; (8001870 <HAL_SPI_MspInit+0x80>)
 8001818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800181c:	6593      	str	r3, [r2, #88]	; 0x58
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_SPI_MspInit+0x80>)
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_SPI_MspInit+0x80>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	4a10      	ldr	r2, [pc, #64]	; (8001870 <HAL_SPI_MspInit+0x80>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_SPI_MspInit+0x80>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = NFC_SCK_Pin|NFC_MISO_Pin|NFC_MOSI_Pin;
 8001842:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001854:	2305      	movs	r3, #5
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <HAL_SPI_MspInit+0x84>)
 8001860:	f001 ff76 	bl	8003750 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001864:	bf00      	nop
 8001866:	3728      	adds	r7, #40	; 0x28
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40003800 	.word	0x40003800
 8001870:	40021000 	.word	0x40021000
 8001874:	48000400 	.word	0x48000400

08001878 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b0ac      	sub	sp, #176	; 0xb0
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2288      	movs	r2, #136	; 0x88
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f00c f921 	bl	800dae0 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018a6:	d175      	bne.n	8001994 <HAL_HCD_MspInit+0x11c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80018a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ac:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80018ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80018b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4618      	mov	r0, r3
 80018bc:	f004 fc0a 	bl	80060d4 <HAL_RCCEx_PeriphCLKConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 80018c6:	f7ff fbd3 	bl	8001070 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	4b34      	ldr	r3, [pc, #208]	; (800199c <HAL_HCD_MspInit+0x124>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	4a33      	ldr	r2, [pc, #204]	; (800199c <HAL_HCD_MspInit+0x124>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d6:	4b31      	ldr	r3, [pc, #196]	; (800199c <HAL_HCD_MspInit+0x124>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USBOTG_VBUS_Pin;
 80018e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USBOTG_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018fa:	4619      	mov	r1, r3
 80018fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001900:	f001 ff26 	bl	8003750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USBOTG_ID_Pin|USBOTG_DM_Pin|USBOTG_DP_Pin;
 8001904:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001908:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800191e:	230a      	movs	r3, #10
 8001920:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001928:	4619      	mov	r1, r3
 800192a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192e:	f001 ff0f 	bl	8003750 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001932:	4b1a      	ldr	r3, [pc, #104]	; (800199c <HAL_HCD_MspInit+0x124>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	4a19      	ldr	r2, [pc, #100]	; (800199c <HAL_HCD_MspInit+0x124>)
 8001938:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800193c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193e:	4b17      	ldr	r3, [pc, #92]	; (800199c <HAL_HCD_MspInit+0x124>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194a:	4b14      	ldr	r3, [pc, #80]	; (800199c <HAL_HCD_MspInit+0x124>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d114      	bne.n	8001980 <HAL_HCD_MspInit+0x108>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_HCD_MspInit+0x124>)
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	4a10      	ldr	r2, [pc, #64]	; (800199c <HAL_HCD_MspInit+0x124>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001960:	6593      	str	r3, [r2, #88]	; 0x58
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_HCD_MspInit+0x124>)
 8001964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800196e:	f003 fd5f 	bl	8005430 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_HCD_MspInit+0x124>)
 8001974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001976:	4a09      	ldr	r2, [pc, #36]	; (800199c <HAL_HCD_MspInit+0x124>)
 8001978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800197c:	6593      	str	r3, [r2, #88]	; 0x58
 800197e:	e001      	b.n	8001984 <HAL_HCD_MspInit+0x10c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001980:	f003 fd56 	bl	8005430 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8001984:	2200      	movs	r2, #0
 8001986:	2105      	movs	r1, #5
 8001988:	2043      	movs	r0, #67	; 0x43
 800198a:	f001 fd0d 	bl	80033a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800198e:	2043      	movs	r0, #67	; 0x43
 8001990:	f001 fd26 	bl	80033e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001994:	bf00      	nop
 8001996:	37b0      	adds	r7, #176	; 0xb0
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000

080019a0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80019b4:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <HAL_FMC_MspInit+0xc4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d14f      	bne.n	8001a5c <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 80019bc:	4b29      	ldr	r3, [pc, #164]	; (8001a64 <HAL_FMC_MspInit+0xc4>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80019c2:	4b29      	ldr	r3, [pc, #164]	; (8001a68 <HAL_FMC_MspInit+0xc8>)
 80019c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019c6:	4a28      	ldr	r2, [pc, #160]	; (8001a68 <HAL_FMC_MspInit+0xc8>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6513      	str	r3, [r2, #80]	; 0x50
 80019ce:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <HAL_FMC_MspInit+0xc8>)
 80019d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
  PG9   ------> FMC_NE2
  PG10   ------> FMC_NE3
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A23_Pin|A19_Pin|A20_Pin|A21_Pin
 80019da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019de:	607b      	str	r3, [r7, #4]
                          |A22_Pin|D4_Pin|D5_Pin|D6_Pin
                          |D7_Pin|D8_Pin|D9_Pin|D10_Pin
                          |D11_Pin|D12_Pin|FMC_NBL0_Pin|FMC_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019ec:	230c      	movs	r3, #12
 80019ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	4619      	mov	r1, r3
 80019f4:	481d      	ldr	r0, [pc, #116]	; (8001a6c <HAL_FMC_MspInit+0xcc>)
 80019f6:	f001 feab 	bl	8003750 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80019fa:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80019fe:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A7_Pin
                          |A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a0c:	230c      	movs	r3, #12
 8001a0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	4619      	mov	r1, r3
 8001a14:	4816      	ldr	r0, [pc, #88]	; (8001a70 <HAL_FMC_MspInit+0xd0>)
 8001a16:	f001 fe9b 	bl	8003750 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|A12_Pin|A13_Pin
 8001a1a:	f240 633f 	movw	r3, #1599	; 0x63f
 8001a1e:	607b      	str	r3, [r7, #4]
                          |A14_Pin|A15_Pin|FMC_NE2_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a2c:	230c      	movs	r3, #12
 8001a2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	4619      	mov	r1, r3
 8001a34:	480f      	ldr	r0, [pc, #60]	; (8001a74 <HAL_FMC_MspInit+0xd4>)
 8001a36:	f001 fe8b 	bl	8003750 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|A16_Pin
 8001a3a:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8001a3e:	607b      	str	r3, [r7, #4]
                          |A17_Pin|A18_Pin|D0_Pin|D1_Pin
                          |D2_Pin|D3_Pin|FMC_NOE_Pin|FMC_NWE_Pin
                          |FMC_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a4c:	230c      	movs	r3, #12
 8001a4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	4619      	mov	r1, r3
 8001a54:	4808      	ldr	r0, [pc, #32]	; (8001a78 <HAL_FMC_MspInit+0xd8>)
 8001a56:	f001 fe7b 	bl	8003750 <HAL_GPIO_Init>
 8001a5a:	e000      	b.n	8001a5e <HAL_FMC_MspInit+0xbe>
    return;
 8001a5c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	200008a4 	.word	0x200008a4
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	48001000 	.word	0x48001000
 8001a70:	48001400 	.word	0x48001400
 8001a74:	48001800 	.word	0x48001800
 8001a78:	48000c00 	.word	0x48000c00

08001a7c <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FMC_MspInit();
 8001a84:	f7ff ff8c 	bl	80019a0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001a98:	f7ff ff82 	bl	80019a0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a2b      	ldr	r2, [pc, #172]	; (8001b60 <HAL_SAI_MspInit+0xbc>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d124      	bne.n	8001b00 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001ab6:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_SAI_MspInit+0xc0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10b      	bne.n	8001ad6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001abe:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <HAL_SAI_MspInit+0xc4>)
 8001ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac2:	4a29      	ldr	r2, [pc, #164]	; (8001b68 <HAL_SAI_MspInit+0xc4>)
 8001ac4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ac8:	6613      	str	r3, [r2, #96]	; 0x60
 8001aca:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <HAL_SAI_MspInit+0xc4>)
 8001acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001ad6:	4b23      	ldr	r3, [pc, #140]	; (8001b64 <HAL_SAI_MspInit+0xc0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	4a21      	ldr	r2, [pc, #132]	; (8001b64 <HAL_SAI_MspInit+0xc0>)
 8001ade:	6013      	str	r3, [r2, #0]

    /**SAI1_A_Block_A GPIO Configuration
    PD6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = SAI1_SDA_Pin;
 8001ae0:	2340      	movs	r3, #64	; 0x40
 8001ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001af0:	230d      	movs	r3, #13
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDA_GPIO_Port, &GPIO_InitStruct);
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	4619      	mov	r1, r3
 8001afa:	481c      	ldr	r0, [pc, #112]	; (8001b6c <HAL_SAI_MspInit+0xc8>)
 8001afc:	f001 fe28 	bl	8003750 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a1a      	ldr	r2, [pc, #104]	; (8001b70 <HAL_SAI_MspInit+0xcc>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d125      	bne.n	8001b56 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8001b0a:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <HAL_SAI_MspInit+0xc0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10b      	bne.n	8001b2a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_SAI_MspInit+0xc4>)
 8001b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b16:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <HAL_SAI_MspInit+0xc4>)
 8001b18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_SAI_MspInit+0xc4>)
 8001b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_SAI_MspInit+0xc0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	4a0c      	ldr	r2, [pc, #48]	; (8001b64 <HAL_SAI_MspInit+0xc0>)
 8001b32:	6013      	str	r3, [r2, #0]
    PF6     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_MCKB_Pin|SAI1_SCKB_Pin|SAI1_FSB_Pin;
 8001b34:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001b46:	230d      	movs	r3, #13
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4808      	ldr	r0, [pc, #32]	; (8001b74 <HAL_SAI_MspInit+0xd0>)
 8001b52:	f001 fdfd 	bl	8003750 <HAL_GPIO_Init>

    }
}
 8001b56:	bf00      	nop
 8001b58:	3728      	adds	r7, #40	; 0x28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40015404 	.word	0x40015404
 8001b64:	200008a8 	.word	0x200008a8
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	48000c00 	.word	0x48000c00
 8001b70:	40015424 	.word	0x40015424
 8001b74:	48001400 	.word	0x48001400

08001b78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08c      	sub	sp, #48	; 0x30
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	2037      	movs	r0, #55	; 0x37
 8001b8e:	f001 fc0b 	bl	80033a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b92:	2037      	movs	r0, #55	; 0x37
 8001b94:	f001 fc24 	bl	80033e0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001b98:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <HAL_InitTick+0x9c>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9c:	4a1d      	ldr	r2, [pc, #116]	; (8001c14 <HAL_InitTick+0x9c>)
 8001b9e:	f043 0320 	orr.w	r3, r3, #32
 8001ba2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <HAL_InitTick+0x9c>)
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bb0:	f107 0210 	add.w	r2, r7, #16
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4611      	mov	r1, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f004 f9f8 	bl	8005fb0 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001bc0:	f004 f9ca 	bl	8005f58 <HAL_RCC_GetPCLK1Freq>
 8001bc4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc8:	4a13      	ldr	r2, [pc, #76]	; (8001c18 <HAL_InitTick+0xa0>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	0c9b      	lsrs	r3, r3, #18
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <HAL_InitTick+0xa4>)
 8001bd6:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <HAL_InitTick+0xa8>)
 8001bd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <HAL_InitTick+0xa4>)
 8001bdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001be0:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001be2:	4a0e      	ldr	r2, [pc, #56]	; (8001c1c <HAL_InitTick+0xa4>)
 8001be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be6:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <HAL_InitTick+0xa4>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_InitTick+0xa4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001bf4:	4809      	ldr	r0, [pc, #36]	; (8001c1c <HAL_InitTick+0xa4>)
 8001bf6:	f007 f908 	bl	8008e0a <HAL_TIM_Base_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d104      	bne.n	8001c0a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001c00:	4806      	ldr	r0, [pc, #24]	; (8001c1c <HAL_InitTick+0xa4>)
 8001c02:	f007 f963 	bl	8008ecc <HAL_TIM_Base_Start_IT>
 8001c06:	4603      	mov	r3, r0
 8001c08:	e000      	b.n	8001c0c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3730      	adds	r7, #48	; 0x30
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40021000 	.word	0x40021000
 8001c18:	431bde83 	.word	0x431bde83
 8001c1c:	200008ac 	.word	0x200008ac
 8001c20:	40001400 	.word	0x40001400

08001c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <NMI_Handler+0x4>

08001c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2e:	e7fe      	b.n	8001c2e <HardFault_Handler+0x4>

08001c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <MemManage_Handler+0x4>

08001c36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c3a:	e7fe      	b.n	8001c3a <BusFault_Handler+0x4>

08001c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <UsageFault_Handler+0x4>

08001c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <TIM6_DAC_IRQHandler+0x10>)
 8001c56:	f001 fbf3 	bl	8003440 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200000e4 	.word	0x200000e4

08001c64 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <TIM7_IRQHandler+0x10>)
 8001c6a:	f007 f99f 	bl	8008fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200008ac 	.word	0x200008ac

08001c78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001c7c:	4802      	ldr	r0, [pc, #8]	; (8001c88 <OTG_FS_IRQHandler+0x10>)
 8001c7e:	f001 ffa5 	bl	8003bcc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200004f8 	.word	0x200004f8

08001c8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <SystemInit+0x20>)
 8001c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c96:	4a05      	ldr	r2, [pc, #20]	; (8001cac <SystemInit+0x20>)
 8001c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cb4:	f7ff ffea 	bl	8001c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb8:	480c      	ldr	r0, [pc, #48]	; (8001cec <LoopForever+0x6>)
  ldr r1, =_edata
 8001cba:	490d      	ldr	r1, [pc, #52]	; (8001cf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	; (8001cf4 <LoopForever+0xe>)
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc0:	e002      	b.n	8001cc8 <LoopCopyDataInit>

08001cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc6:	3304      	adds	r3, #4

08001cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ccc:	d3f9      	bcc.n	8001cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cce:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cd0:	4c0a      	ldr	r4, [pc, #40]	; (8001cfc <LoopForever+0x16>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd4:	e001      	b.n	8001cda <LoopFillZerobss>

08001cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd8:	3204      	adds	r2, #4

08001cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cdc:	d3fb      	bcc.n	8001cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cde:	f00b fecd 	bl	800da7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ce2:	f7fe fbf7 	bl	80004d4 <main>

08001ce6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ce6:	e7fe      	b.n	8001ce6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ce8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001cf4:	0800dbd0 	.word	0x0800dbd0
  ldr r2, =_sbss
 8001cf8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001cfc:	20002208 	.word	0x20002208

08001d00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d00:	e7fe      	b.n	8001d00 <ADC1_2_IRQHandler>

08001d02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d0c:	2003      	movs	r0, #3
 8001d0e:	f001 fb40 	bl	8003392 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d12:	200f      	movs	r0, #15
 8001d14:	f7ff ff30 	bl	8001b78 <HAL_InitTick>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	71fb      	strb	r3, [r7, #7]
 8001d22:	e001      	b.n	8001d28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d24:	f7ff f9aa 	bl	800107c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d28:	79fb      	ldrb	r3, [r7, #7]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_IncTick+0x20>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_IncTick+0x24>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4413      	add	r3, r2
 8001d44:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <HAL_IncTick+0x24>)
 8001d46:	6013      	str	r3, [r2, #0]
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	20000008 	.word	0x20000008
 8001d58:	200008f8 	.word	0x200008f8

08001d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <HAL_GetTick+0x14>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	200008f8 	.word	0x200008f8

08001d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d7c:	f7ff ffee 	bl	8001d5c <HAL_GetTick>
 8001d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d8c:	d005      	beq.n	8001d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <HAL_Delay+0x44>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4413      	add	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d9a:	bf00      	nop
 8001d9c:	f7ff ffde 	bl	8001d5c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d8f7      	bhi.n	8001d9c <HAL_Delay+0x28>
  {
  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000008 	.word	0x20000008

08001dbc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	3360      	adds	r3, #96	; 0x60
 8001e36:	461a      	mov	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <LL_ADC_SetOffset+0x44>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	4313      	orrs	r3, r2
 8001e54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e5c:	bf00      	nop
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	03fff000 	.word	0x03fff000

08001e6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3360      	adds	r3, #96	; 0x60
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	3360      	adds	r3, #96	; 0x60
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ec2:	bf00      	nop
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b087      	sub	sp, #28
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	3330      	adds	r3, #48	; 0x30
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	0a1b      	lsrs	r3, r3, #8
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	4413      	add	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	211f      	movs	r1, #31
 8001efa:	fa01 f303 	lsl.w	r3, r1, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	401a      	ands	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	0e9b      	lsrs	r3, r3, #26
 8001f06:	f003 011f 	and.w	r1, r3, #31
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	431a      	orrs	r2, r3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f1a:	bf00      	nop
 8001f1c:	371c      	adds	r7, #28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b087      	sub	sp, #28
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3314      	adds	r3, #20
 8001f36:	461a      	mov	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	0e5b      	lsrs	r3, r3, #25
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	4413      	add	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	0d1b      	lsrs	r3, r3, #20
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	2107      	movs	r1, #7
 8001f54:	fa01 f303 	lsl.w	r3, r1, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	0d1b      	lsrs	r3, r3, #20
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f70:	bf00      	nop
 8001f72:	371c      	adds	r7, #28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f94:	43db      	mvns	r3, r3
 8001f96:	401a      	ands	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0318 	and.w	r3, r3, #24
 8001f9e:	4908      	ldr	r1, [pc, #32]	; (8001fc0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fa0:	40d9      	lsrs	r1, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	400b      	ands	r3, r1
 8001fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001faa:	431a      	orrs	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	0007ffff 	.word	0x0007ffff

08001fc4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001fd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6093      	str	r3, [r2, #8]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ffc:	d101      	bne.n	8002002 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002020:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002024:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002048:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800204c:	d101      	bne.n	8002052 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <LL_ADC_IsEnabled+0x18>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <LL_ADC_IsEnabled+0x1a>
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b04      	cmp	r3, #4
 8002098:	d101      	bne.n	800209e <LL_ADC_REG_IsConversionOngoing+0x18>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d101      	bne.n	80020c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b089      	sub	sp, #36	; 0x24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e136      	b.n	800235c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d109      	bne.n	8002110 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7fe ffe5 	bl	80010cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff67 	bl	8001fe8 <LL_ADC_IsDeepPowerDownEnabled>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d004      	beq.n	800212a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff4d 	bl	8001fc4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff ff82 	bl	8002038 <LL_ADC_IsInternalRegulatorEnabled>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d115      	bne.n	8002166 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff ff66 	bl	8002010 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002144:	4b87      	ldr	r3, [pc, #540]	; (8002364 <HAL_ADC_Init+0x290>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	099b      	lsrs	r3, r3, #6
 800214a:	4a87      	ldr	r2, [pc, #540]	; (8002368 <HAL_ADC_Init+0x294>)
 800214c:	fba2 2303 	umull	r2, r3, r2, r3
 8002150:	099b      	lsrs	r3, r3, #6
 8002152:	3301      	adds	r3, #1
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002158:	e002      	b.n	8002160 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	3b01      	subs	r3, #1
 800215e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f9      	bne.n	800215a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff ff64 	bl	8002038 <LL_ADC_IsInternalRegulatorEnabled>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10d      	bne.n	8002192 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217a:	f043 0210 	orr.w	r2, r3, #16
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002186:	f043 0201 	orr.w	r2, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff ff75 	bl	8002086 <LL_ADC_REG_IsConversionOngoing>
 800219c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f040 80cf 	bne.w	800234a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f040 80cb 	bne.w	800234a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021bc:	f043 0202 	orr.w	r2, r3, #2
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff49 	bl	8002060 <LL_ADC_IsEnabled>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d115      	bne.n	8002200 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021d4:	4865      	ldr	r0, [pc, #404]	; (800236c <HAL_ADC_Init+0x298>)
 80021d6:	f7ff ff43 	bl	8002060 <LL_ADC_IsEnabled>
 80021da:	4604      	mov	r4, r0
 80021dc:	4864      	ldr	r0, [pc, #400]	; (8002370 <HAL_ADC_Init+0x29c>)
 80021de:	f7ff ff3f 	bl	8002060 <LL_ADC_IsEnabled>
 80021e2:	4603      	mov	r3, r0
 80021e4:	431c      	orrs	r4, r3
 80021e6:	4863      	ldr	r0, [pc, #396]	; (8002374 <HAL_ADC_Init+0x2a0>)
 80021e8:	f7ff ff3a 	bl	8002060 <LL_ADC_IsEnabled>
 80021ec:	4603      	mov	r3, r0
 80021ee:	4323      	orrs	r3, r4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d105      	bne.n	8002200 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4619      	mov	r1, r3
 80021fa:	485f      	ldr	r0, [pc, #380]	; (8002378 <HAL_ADC_Init+0x2a4>)
 80021fc:	f7ff fdde 	bl	8001dbc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	7e5b      	ldrb	r3, [r3, #25]
 8002204:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800220a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002210:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002216:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800221e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3020 	ldrb.w	r3, [r3, #32]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d106      	bne.n	800223c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	3b01      	subs	r3, #1
 8002234:	045b      	lsls	r3, r3, #17
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	2b00      	cmp	r3, #0
 8002242:	d009      	beq.n	8002258 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	4b47      	ldr	r3, [pc, #284]	; (800237c <HAL_ADC_Init+0x2a8>)
 8002260:	4013      	ands	r3, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	69b9      	ldr	r1, [r7, #24]
 8002268:	430b      	orrs	r3, r1
 800226a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff08 	bl	8002086 <LL_ADC_REG_IsConversionOngoing>
 8002276:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff15 	bl	80020ac <LL_ADC_INJ_IsConversionOngoing>
 8002282:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d13d      	bne.n	8002306 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d13a      	bne.n	8002306 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002294:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800229c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022ac:	f023 0302 	bic.w	r3, r3, #2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	69b9      	ldr	r1, [r7, #24]
 80022b6:	430b      	orrs	r3, r1
 80022b8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d118      	bne.n	80022f6 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022ce:	f023 0304 	bic.w	r3, r3, #4
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022da:	4311      	orrs	r1, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022e0:	4311      	orrs	r1, r2
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022e6:	430a      	orrs	r2, r1
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	611a      	str	r2, [r3, #16]
 80022f4:	e007      	b.n	8002306 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0201 	bic.w	r2, r2, #1
 8002304:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d10c      	bne.n	8002328 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	f023 010f 	bic.w	r1, r3, #15
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	1e5a      	subs	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	631a      	str	r2, [r3, #48]	; 0x30
 8002326:	e007      	b.n	8002338 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 020f 	bic.w	r2, r2, #15
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233c:	f023 0303 	bic.w	r3, r3, #3
 8002340:	f043 0201 	orr.w	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	655a      	str	r2, [r3, #84]	; 0x54
 8002348:	e007      	b.n	800235a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234e:	f043 0210 	orr.w	r2, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800235a:	7ffb      	ldrb	r3, [r7, #31]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3724      	adds	r7, #36	; 0x24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd90      	pop	{r4, r7, pc}
 8002364:	20000000 	.word	0x20000000
 8002368:	053e2d63 	.word	0x053e2d63
 800236c:	50040000 	.word	0x50040000
 8002370:	50040100 	.word	0x50040100
 8002374:	50040200 	.word	0x50040200
 8002378:	50040300 	.word	0x50040300
 800237c:	fff0c007 	.word	0xfff0c007

08002380 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b0b6      	sub	sp, #216	; 0xd8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x22>
 800239e:	2302      	movs	r3, #2
 80023a0:	e3c7      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x7b2>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fe69 	bl	8002086 <LL_ADC_REG_IsConversionOngoing>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f040 83a8 	bne.w	8002b0c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b05      	cmp	r3, #5
 80023c2:	d824      	bhi.n	800240e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	3b02      	subs	r3, #2
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d81b      	bhi.n	8002406 <HAL_ADC_ConfigChannel+0x86>
 80023ce:	a201      	add	r2, pc, #4	; (adr r2, 80023d4 <HAL_ADC_ConfigChannel+0x54>)
 80023d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d4:	080023e5 	.word	0x080023e5
 80023d8:	080023ed 	.word	0x080023ed
 80023dc:	080023f5 	.word	0x080023f5
 80023e0:	080023fd 	.word	0x080023fd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	220c      	movs	r2, #12
 80023e8:	605a      	str	r2, [r3, #4]
          break;
 80023ea:	e011      	b.n	8002410 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2212      	movs	r2, #18
 80023f0:	605a      	str	r2, [r3, #4]
          break;
 80023f2:	e00d      	b.n	8002410 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2218      	movs	r2, #24
 80023f8:	605a      	str	r2, [r3, #4]
          break;
 80023fa:	e009      	b.n	8002410 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002402:	605a      	str	r2, [r3, #4]
          break;
 8002404:	e004      	b.n	8002410 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2206      	movs	r2, #6
 800240a:	605a      	str	r2, [r3, #4]
          break;
 800240c:	e000      	b.n	8002410 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800240e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	6859      	ldr	r1, [r3, #4]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	f7ff fd56 	bl	8001ece <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fe2d 	bl	8002086 <LL_ADC_REG_IsConversionOngoing>
 800242c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fe39 	bl	80020ac <LL_ADC_INJ_IsConversionOngoing>
 800243a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800243e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002442:	2b00      	cmp	r3, #0
 8002444:	f040 81a6 	bne.w	8002794 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002448:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800244c:	2b00      	cmp	r3, #0
 800244e:	f040 81a1 	bne.w	8002794 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6819      	ldr	r1, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	461a      	mov	r2, r3
 8002460:	f7ff fd61 	bl	8001f26 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	695a      	ldr	r2, [r3, #20]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	08db      	lsrs	r3, r3, #3
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b04      	cmp	r3, #4
 8002484:	d00a      	beq.n	800249c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6919      	ldr	r1, [r3, #16]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002496:	f7ff fcc5 	bl	8001e24 <LL_ADC_SetOffset>
 800249a:	e17b      	b.n	8002794 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2100      	movs	r1, #0
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fce2 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 80024a8:	4603      	mov	r3, r0
 80024aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10a      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x148>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2100      	movs	r1, #0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fcd7 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 80024be:	4603      	mov	r3, r0
 80024c0:	0e9b      	lsrs	r3, r3, #26
 80024c2:	f003 021f 	and.w	r2, r3, #31
 80024c6:	e01e      	b.n	8002506 <HAL_ADC_ConfigChannel+0x186>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2100      	movs	r1, #0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fccc 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024de:	fa93 f3a3 	rbit	r3, r3
 80024e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80024ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80024f6:	2320      	movs	r3, #32
 80024f8:	e004      	b.n	8002504 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80024fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250e:	2b00      	cmp	r3, #0
 8002510:	d105      	bne.n	800251e <HAL_ADC_ConfigChannel+0x19e>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	0e9b      	lsrs	r3, r3, #26
 8002518:	f003 031f 	and.w	r3, r3, #31
 800251c:	e018      	b.n	8002550 <HAL_ADC_ConfigChannel+0x1d0>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800252a:	fa93 f3a3 	rbit	r3, r3
 800252e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002536:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800253a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002542:	2320      	movs	r3, #32
 8002544:	e004      	b.n	8002550 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002546:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002550:	429a      	cmp	r2, r3
 8002552:	d106      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2200      	movs	r2, #0
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff fc9b 	bl	8001e98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2101      	movs	r1, #1
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fc7f 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 800256e:	4603      	mov	r3, r0
 8002570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <HAL_ADC_ConfigChannel+0x20e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2101      	movs	r1, #1
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff fc74 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 8002584:	4603      	mov	r3, r0
 8002586:	0e9b      	lsrs	r3, r3, #26
 8002588:	f003 021f 	and.w	r2, r3, #31
 800258c:	e01e      	b.n	80025cc <HAL_ADC_ConfigChannel+0x24c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2101      	movs	r1, #1
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fc69 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 800259a:	4603      	mov	r3, r0
 800259c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80025ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80025b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80025bc:	2320      	movs	r3, #32
 80025be:	e004      	b.n	80025ca <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80025c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d105      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x264>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	0e9b      	lsrs	r3, r3, #26
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	e018      	b.n	8002616 <HAL_ADC_ConfigChannel+0x296>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80025f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002600:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002608:	2320      	movs	r3, #32
 800260a:	e004      	b.n	8002616 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800260c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002610:	fab3 f383 	clz	r3, r3
 8002614:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002616:	429a      	cmp	r2, r3
 8002618:	d106      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2200      	movs	r2, #0
 8002620:	2101      	movs	r1, #1
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fc38 	bl	8001e98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2102      	movs	r1, #2
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fc1c 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 8002634:	4603      	mov	r3, r0
 8002636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10a      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x2d4>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2102      	movs	r1, #2
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fc11 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 800264a:	4603      	mov	r3, r0
 800264c:	0e9b      	lsrs	r3, r3, #26
 800264e:	f003 021f 	and.w	r2, r3, #31
 8002652:	e01e      	b.n	8002692 <HAL_ADC_ConfigChannel+0x312>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2102      	movs	r1, #2
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fc06 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002672:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800267a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002682:	2320      	movs	r3, #32
 8002684:	e004      	b.n	8002690 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002686:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269a:	2b00      	cmp	r3, #0
 800269c:	d105      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x32a>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	0e9b      	lsrs	r3, r3, #26
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	e016      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x358>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80026bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80026c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80026ca:	2320      	movs	r3, #32
 80026cc:	e004      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80026ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026d8:	429a      	cmp	r2, r3
 80026da:	d106      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2200      	movs	r2, #0
 80026e2:	2102      	movs	r1, #2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fbd7 	bl	8001e98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2103      	movs	r1, #3
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fbbb 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10a      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x396>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2103      	movs	r1, #3
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fbb0 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 800270c:	4603      	mov	r3, r0
 800270e:	0e9b      	lsrs	r3, r3, #26
 8002710:	f003 021f 	and.w	r2, r3, #31
 8002714:	e017      	b.n	8002746 <HAL_ADC_ConfigChannel+0x3c6>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2103      	movs	r1, #3
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fba5 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 8002722:	4603      	mov	r3, r0
 8002724:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800272e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002730:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002732:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002738:	2320      	movs	r3, #32
 800273a:	e003      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800273c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800274e:	2b00      	cmp	r3, #0
 8002750:	d105      	bne.n	800275e <HAL_ADC_ConfigChannel+0x3de>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	0e9b      	lsrs	r3, r3, #26
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	e011      	b.n	8002782 <HAL_ADC_ConfigChannel+0x402>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002766:	fa93 f3a3 	rbit	r3, r3
 800276a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800276c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800276e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002776:	2320      	movs	r3, #32
 8002778:	e003      	b.n	8002782 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800277a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800277c:	fab3 f383 	clz	r3, r3
 8002780:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002782:	429a      	cmp	r2, r3
 8002784:	d106      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2200      	movs	r2, #0
 800278c:	2103      	movs	r1, #3
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fb82 	bl	8001e98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fc61 	bl	8002060 <LL_ADC_IsEnabled>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f040 813f 	bne.w	8002a24 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	6819      	ldr	r1, [r3, #0]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	461a      	mov	r2, r3
 80027b4:	f7ff fbe2 	bl	8001f7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4a8e      	ldr	r2, [pc, #568]	; (80029f8 <HAL_ADC_ConfigChannel+0x678>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	f040 8130 	bne.w	8002a24 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10b      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x46c>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	0e9b      	lsrs	r3, r3, #26
 80027da:	3301      	adds	r3, #1
 80027dc:	f003 031f 	and.w	r3, r3, #31
 80027e0:	2b09      	cmp	r3, #9
 80027e2:	bf94      	ite	ls
 80027e4:	2301      	movls	r3, #1
 80027e6:	2300      	movhi	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	e019      	b.n	8002820 <HAL_ADC_ConfigChannel+0x4a0>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f4:	fa93 f3a3 	rbit	r3, r3
 80027f8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80027fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027fc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80027fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002804:	2320      	movs	r3, #32
 8002806:	e003      	b.n	8002810 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	3301      	adds	r3, #1
 8002812:	f003 031f 	and.w	r3, r3, #31
 8002816:	2b09      	cmp	r3, #9
 8002818:	bf94      	ite	ls
 800281a:	2301      	movls	r3, #1
 800281c:	2300      	movhi	r3, #0
 800281e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002820:	2b00      	cmp	r3, #0
 8002822:	d079      	beq.n	8002918 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282c:	2b00      	cmp	r3, #0
 800282e:	d107      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x4c0>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	0e9b      	lsrs	r3, r3, #26
 8002836:	3301      	adds	r3, #1
 8002838:	069b      	lsls	r3, r3, #26
 800283a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800283e:	e015      	b.n	800286c <HAL_ADC_ConfigChannel+0x4ec>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800284e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002850:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002858:	2320      	movs	r3, #32
 800285a:	e003      	b.n	8002864 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800285c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	3301      	adds	r3, #1
 8002866:	069b      	lsls	r3, r3, #26
 8002868:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002874:	2b00      	cmp	r3, #0
 8002876:	d109      	bne.n	800288c <HAL_ADC_ConfigChannel+0x50c>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	0e9b      	lsrs	r3, r3, #26
 800287e:	3301      	adds	r3, #1
 8002880:	f003 031f 	and.w	r3, r3, #31
 8002884:	2101      	movs	r1, #1
 8002886:	fa01 f303 	lsl.w	r3, r1, r3
 800288a:	e017      	b.n	80028bc <HAL_ADC_ConfigChannel+0x53c>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002894:	fa93 f3a3 	rbit	r3, r3
 8002898:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800289a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800289c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800289e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80028a4:	2320      	movs	r3, #32
 80028a6:	e003      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80028a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	3301      	adds	r3, #1
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	2101      	movs	r1, #1
 80028b8:	fa01 f303 	lsl.w	r3, r1, r3
 80028bc:	ea42 0103 	orr.w	r1, r2, r3
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10a      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x562>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	0e9b      	lsrs	r3, r3, #26
 80028d2:	3301      	adds	r3, #1
 80028d4:	f003 021f 	and.w	r2, r3, #31
 80028d8:	4613      	mov	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4413      	add	r3, r2
 80028de:	051b      	lsls	r3, r3, #20
 80028e0:	e018      	b.n	8002914 <HAL_ADC_ConfigChannel+0x594>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ea:	fa93 f3a3 	rbit	r3, r3
 80028ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80028f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80028fa:	2320      	movs	r3, #32
 80028fc:	e003      	b.n	8002906 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80028fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002900:	fab3 f383 	clz	r3, r3
 8002904:	b2db      	uxtb	r3, r3
 8002906:	3301      	adds	r3, #1
 8002908:	f003 021f 	and.w	r2, r3, #31
 800290c:	4613      	mov	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4413      	add	r3, r2
 8002912:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002914:	430b      	orrs	r3, r1
 8002916:	e080      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002920:	2b00      	cmp	r3, #0
 8002922:	d107      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x5b4>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	0e9b      	lsrs	r3, r3, #26
 800292a:	3301      	adds	r3, #1
 800292c:	069b      	lsls	r3, r3, #26
 800292e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002932:	e015      	b.n	8002960 <HAL_ADC_ConfigChannel+0x5e0>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002944:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800294c:	2320      	movs	r3, #32
 800294e:	e003      	b.n	8002958 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	3301      	adds	r3, #1
 800295a:	069b      	lsls	r3, r3, #26
 800295c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002968:	2b00      	cmp	r3, #0
 800296a:	d109      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x600>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	0e9b      	lsrs	r3, r3, #26
 8002972:	3301      	adds	r3, #1
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	2101      	movs	r1, #1
 800297a:	fa01 f303 	lsl.w	r3, r1, r3
 800297e:	e017      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x630>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	61fb      	str	r3, [r7, #28]
  return result;
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002998:	2320      	movs	r3, #32
 800299a:	e003      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	3301      	adds	r3, #1
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	2101      	movs	r1, #1
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	ea42 0103 	orr.w	r1, r2, r3
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10d      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x65c>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	0e9b      	lsrs	r3, r3, #26
 80029c6:	3301      	adds	r3, #1
 80029c8:	f003 021f 	and.w	r2, r3, #31
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	3b1e      	subs	r3, #30
 80029d4:	051b      	lsls	r3, r3, #20
 80029d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029da:	e01d      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x698>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	613b      	str	r3, [r7, #16]
  return result;
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d103      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80029f4:	2320      	movs	r3, #32
 80029f6:	e005      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x684>
 80029f8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	3301      	adds	r3, #1
 8002a06:	f003 021f 	and.w	r2, r3, #31
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4413      	add	r3, r2
 8002a10:	3b1e      	subs	r3, #30
 8002a12:	051b      	lsls	r3, r3, #20
 8002a14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	6892      	ldr	r2, [r2, #8]
 8002a1e:	4619      	mov	r1, r3
 8002a20:	f7ff fa81 	bl	8001f26 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b44      	ldr	r3, [pc, #272]	; (8002b3c <HAL_ADC_ConfigChannel+0x7bc>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d07a      	beq.n	8002b26 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a30:	4843      	ldr	r0, [pc, #268]	; (8002b40 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a32:	f7ff f9e9 	bl	8001e08 <LL_ADC_GetCommonPathInternalCh>
 8002a36:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a41      	ldr	r2, [pc, #260]	; (8002b44 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d12c      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d126      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a3c      	ldr	r2, [pc, #240]	; (8002b48 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d004      	beq.n	8002a64 <HAL_ADC_ConfigChannel+0x6e4>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a3b      	ldr	r2, [pc, #236]	; (8002b4c <HAL_ADC_ConfigChannel+0x7cc>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d15d      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4834      	ldr	r0, [pc, #208]	; (8002b40 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a70:	f7ff f9b7 	bl	8001de2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a74:	4b36      	ldr	r3, [pc, #216]	; (8002b50 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	099b      	lsrs	r3, r3, #6
 8002a7a:	4a36      	ldr	r2, [pc, #216]	; (8002b54 <HAL_ADC_ConfigChannel+0x7d4>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	099b      	lsrs	r3, r3, #6
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	4613      	mov	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a8e:	e002      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f9      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a9c:	e040      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a2d      	ldr	r2, [pc, #180]	; (8002b58 <HAL_ADC_ConfigChannel+0x7d8>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d118      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x75a>
 8002aa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d112      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a23      	ldr	r2, [pc, #140]	; (8002b48 <HAL_ADC_ConfigChannel+0x7c8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d004      	beq.n	8002ac8 <HAL_ADC_ConfigChannel+0x748>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a22      	ldr	r2, [pc, #136]	; (8002b4c <HAL_ADC_ConfigChannel+0x7cc>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d12d      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ac8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002acc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	481b      	ldr	r0, [pc, #108]	; (8002b40 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ad4:	f7ff f985 	bl	8001de2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ad8:	e024      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1f      	ldr	r2, [pc, #124]	; (8002b5c <HAL_ADC_ConfigChannel+0x7dc>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d120      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ae4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ae8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d11a      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a14      	ldr	r2, [pc, #80]	; (8002b48 <HAL_ADC_ConfigChannel+0x7c8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d115      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002afa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002afe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b02:	4619      	mov	r1, r3
 8002b04:	480e      	ldr	r0, [pc, #56]	; (8002b40 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b06:	f7ff f96c 	bl	8001de2 <LL_ADC_SetCommonPathInternalCh>
 8002b0a:	e00c      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	f043 0220 	orr.w	r2, r3, #32
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002b1e:	e002      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b20:	bf00      	nop
 8002b22:	e000      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b24:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b2e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	37d8      	adds	r7, #216	; 0xd8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	80080000 	.word	0x80080000
 8002b40:	50040300 	.word	0x50040300
 8002b44:	c7520000 	.word	0xc7520000
 8002b48:	50040000 	.word	0x50040000
 8002b4c:	50040200 	.word	0x50040200
 8002b50:	20000000 	.word	0x20000000
 8002b54:	053e2d63 	.word	0x053e2d63
 8002b58:	cb840000 	.word	0xcb840000
 8002b5c:	80000001 	.word	0x80000001

08002b60 <LL_ADC_IsEnabled>:
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <LL_ADC_IsEnabled+0x18>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <LL_ADC_IsEnabled+0x1a>
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d101      	bne.n	8002b9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b09f      	sub	sp, #124	; 0x7c
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e093      	b.n	8002cf2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a47      	ldr	r2, [pc, #284]	; (8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d102      	bne.n	8002bea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002be4:	4b46      	ldr	r3, [pc, #280]	; (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	e001      	b.n	8002bee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10b      	bne.n	8002c0c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf8:	f043 0220 	orr.w	r2, r3, #32
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e072      	b.n	8002cf2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff ffb9 	bl	8002b86 <LL_ADC_REG_IsConversionOngoing>
 8002c14:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff ffb3 	bl	8002b86 <LL_ADC_REG_IsConversionOngoing>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d154      	bne.n	8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d151      	bne.n	8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c2c:	4b35      	ldr	r3, [pc, #212]	; (8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002c2e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d02c      	beq.n	8002c92 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	6859      	ldr	r1, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c4a:	035b      	lsls	r3, r3, #13
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c52:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c54:	4829      	ldr	r0, [pc, #164]	; (8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c56:	f7ff ff83 	bl	8002b60 <LL_ADC_IsEnabled>
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	4828      	ldr	r0, [pc, #160]	; (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c5e:	f7ff ff7f 	bl	8002b60 <LL_ADC_IsEnabled>
 8002c62:	4603      	mov	r3, r0
 8002c64:	431c      	orrs	r4, r3
 8002c66:	4828      	ldr	r0, [pc, #160]	; (8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002c68:	f7ff ff7a 	bl	8002b60 <LL_ADC_IsEnabled>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4323      	orrs	r3, r4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d137      	bne.n	8002ce4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c7c:	f023 030f 	bic.w	r3, r3, #15
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	6811      	ldr	r1, [r2, #0]
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	6892      	ldr	r2, [r2, #8]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c90:	e028      	b.n	8002ce4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c9e:	4817      	ldr	r0, [pc, #92]	; (8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ca0:	f7ff ff5e 	bl	8002b60 <LL_ADC_IsEnabled>
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	4816      	ldr	r0, [pc, #88]	; (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ca8:	f7ff ff5a 	bl	8002b60 <LL_ADC_IsEnabled>
 8002cac:	4603      	mov	r3, r0
 8002cae:	431c      	orrs	r4, r3
 8002cb0:	4815      	ldr	r0, [pc, #84]	; (8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002cb2:	f7ff ff55 	bl	8002b60 <LL_ADC_IsEnabled>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	4323      	orrs	r3, r4
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d112      	bne.n	8002ce4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cc6:	f023 030f 	bic.w	r3, r3, #15
 8002cca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ccc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cce:	e009      	b.n	8002ce4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd4:	f043 0220 	orr.w	r2, r3, #32
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ce2:	e000      	b.n	8002ce6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ce4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	377c      	adds	r7, #124	; 0x7c
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd90      	pop	{r4, r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	50040000 	.word	0x50040000
 8002d00:	50040100 	.word	0x50040100
 8002d04:	50040300 	.word	0x50040300
 8002d08:	50040200 	.word	0x50040200

08002d0c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e0ed      	b.n	8002efa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d102      	bne.n	8002d30 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7fe fa26 	bl	800117c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d40:	f7ff f80c 	bl	8001d5c <HAL_GetTick>
 8002d44:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d46:	e012      	b.n	8002d6e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d48:	f7ff f808 	bl	8001d5c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b0a      	cmp	r3, #10
 8002d54:	d90b      	bls.n	8002d6e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2205      	movs	r2, #5
 8002d66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e0c5      	b.n	8002efa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0e5      	beq.n	8002d48 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0202 	bic.w	r2, r2, #2
 8002d8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d8c:	f7fe ffe6 	bl	8001d5c <HAL_GetTick>
 8002d90:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d92:	e012      	b.n	8002dba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d94:	f7fe ffe2 	bl	8001d5c <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b0a      	cmp	r3, #10
 8002da0:	d90b      	bls.n	8002dba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2205      	movs	r2, #5
 8002db2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e09f      	b.n	8002efa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1e5      	bne.n	8002d94 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	7e1b      	ldrb	r3, [r3, #24]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d108      	bne.n	8002de2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	e007      	b.n	8002df2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002df0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	7e5b      	ldrb	r3, [r3, #25]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d108      	bne.n	8002e0c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	e007      	b.n	8002e1c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	7e9b      	ldrb	r3, [r3, #26]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d108      	bne.n	8002e36 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0220 	orr.w	r2, r2, #32
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	e007      	b.n	8002e46 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0220 	bic.w	r2, r2, #32
 8002e44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	7edb      	ldrb	r3, [r3, #27]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d108      	bne.n	8002e60 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0210 	bic.w	r2, r2, #16
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	e007      	b.n	8002e70 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0210 	orr.w	r2, r2, #16
 8002e6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	7f1b      	ldrb	r3, [r3, #28]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d108      	bne.n	8002e8a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0208 	orr.w	r2, r2, #8
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	e007      	b.n	8002e9a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0208 	bic.w	r2, r2, #8
 8002e98:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	7f5b      	ldrb	r3, [r3, #29]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d108      	bne.n	8002eb4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 0204 	orr.w	r2, r2, #4
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	e007      	b.n	8002ec4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0204 	bic.w	r2, r2, #4
 8002ec2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	ea42 0103 	orr.w	r1, r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	1e5a      	subs	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <LL_EXTI_EnableIT_0_31+0x20>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	4904      	ldr	r1, [pc, #16]	; (8002f24 <LL_EXTI_EnableIT_0_31+0x20>)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	40010400 	.word	0x40010400

08002f28 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <LL_EXTI_DisableIT_0_31+0x24>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	43db      	mvns	r3, r3
 8002f38:	4904      	ldr	r1, [pc, #16]	; (8002f4c <LL_EXTI_DisableIT_0_31+0x24>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40010400 	.word	0x40010400

08002f50 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	4904      	ldr	r1, [pc, #16]	; (8002f70 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]

}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	40010400 	.word	0x40010400

08002f74 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	4904      	ldr	r1, [pc, #16]	; (8002f98 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	604b      	str	r3, [r1, #4]
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40010400 	.word	0x40010400

08002f9c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002fa4:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	4904      	ldr	r1, [pc, #16]	; (8002fbc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	608b      	str	r3, [r1, #8]

}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	40010400 	.word	0x40010400

08002fc0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	4904      	ldr	r1, [pc, #16]	; (8002fe4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]

}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40010400 	.word	0x40010400

08002fe8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	4904      	ldr	r1, [pc, #16]	; (8003008 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60cb      	str	r3, [r1, #12]
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	40010400 	.word	0x40010400

0800300c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003014:	4b06      	ldr	r3, [pc, #24]	; (8003030 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	43db      	mvns	r3, r3
 800301c:	4904      	ldr	r1, [pc, #16]	; (8003030 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800301e:	4013      	ands	r3, r2
 8003020:	60cb      	str	r3, [r1, #12]
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40010400 	.word	0x40010400

08003034 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800303c:	4a04      	ldr	r2, [pc, #16]	; (8003050 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6153      	str	r3, [r2, #20]
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40010400 	.word	0x40010400

08003054 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d102      	bne.n	8003070 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	77fb      	strb	r3, [r7, #31]
 800306e:	e0d1      	b.n	8003214 <HAL_COMP_Init+0x1c0>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800307a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800307e:	d102      	bne.n	8003086 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	77fb      	strb	r3, [r7, #31]
 8003084:	e0c6      	b.n	8003214 <HAL_COMP_Init+0x1c0>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d115      	bne.n	80030be <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a0:	4b5f      	ldr	r3, [pc, #380]	; (8003220 <HAL_COMP_Init+0x1cc>)
 80030a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a4:	4a5e      	ldr	r2, [pc, #376]	; (8003220 <HAL_COMP_Init+0x1cc>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6613      	str	r3, [r2, #96]	; 0x60
 80030ac:	4b5c      	ldr	r3, [pc, #368]	; (8003220 <HAL_COMP_Init+0x1cc>)
 80030ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7fe f8a3 	bl	8001204 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030c8:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b4b      	ldr	r3, [pc, #300]	; (8003224 <HAL_COMP_Init+0x1d0>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	6979      	ldr	r1, [r7, #20]
 80030fe:	430b      	orrs	r3, r1
 8003100:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800310a:	d106      	bne.n	800311a <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800310c:	4b46      	ldr	r3, [pc, #280]	; (8003228 <HAL_COMP_Init+0x1d4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a45      	ldr	r2, [pc, #276]	; (8003228 <HAL_COMP_Init+0x1d4>)
 8003112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003116:	6013      	str	r3, [r2, #0]
 8003118:	e005      	b.n	8003126 <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800311a:	4b43      	ldr	r3, [pc, #268]	; (8003228 <HAL_COMP_Init+0x1d4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a42      	ldr	r2, [pc, #264]	; (8003228 <HAL_COMP_Init+0x1d4>)
 8003120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003124:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d016      	beq.n	8003162 <HAL_COMP_Init+0x10e>
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d113      	bne.n	8003162 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800313a:	4b3c      	ldr	r3, [pc, #240]	; (800322c <HAL_COMP_Init+0x1d8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	099b      	lsrs	r3, r3, #6
 8003140:	4a3b      	ldr	r2, [pc, #236]	; (8003230 <HAL_COMP_Init+0x1dc>)
 8003142:	fba2 2303 	umull	r2, r3, r2, r3
 8003146:	099b      	lsrs	r3, r3, #6
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003154:	e002      	b.n	800315c <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	3b01      	subs	r3, #1
 800315a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f9      	bne.n	8003156 <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a33      	ldr	r2, [pc, #204]	; (8003234 <HAL_COMP_Init+0x1e0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d102      	bne.n	8003172 <HAL_COMP_Init+0x11e>
 800316c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003170:	e001      	b.n	8003176 <HAL_COMP_Init+0x122>
 8003172:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003176:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d037      	beq.n	80031f4 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003190:	6938      	ldr	r0, [r7, #16]
 8003192:	f7ff ff03 	bl	8002f9c <LL_EXTI_EnableRisingTrig_0_31>
 8003196:	e002      	b.n	800319e <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003198:	6938      	ldr	r0, [r7, #16]
 800319a:	f7ff ff11 	bl	8002fc0 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80031aa:	6938      	ldr	r0, [r7, #16]
 80031ac:	f7ff ff1c 	bl	8002fe8 <LL_EXTI_EnableFallingTrig_0_31>
 80031b0:	e002      	b.n	80031b8 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80031b2:	6938      	ldr	r0, [r7, #16]
 80031b4:	f7ff ff2a 	bl	800300c <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80031b8:	6938      	ldr	r0, [r7, #16]
 80031ba:	f7ff ff3b 	bl	8003034 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80031ca:	6938      	ldr	r0, [r7, #16]
 80031cc:	f7ff fec0 	bl	8002f50 <LL_EXTI_EnableEvent_0_31>
 80031d0:	e002      	b.n	80031d8 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80031d2:	6938      	ldr	r0, [r7, #16]
 80031d4:	f7ff fece 	bl	8002f74 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80031e4:	6938      	ldr	r0, [r7, #16]
 80031e6:	f7ff fe8d 	bl	8002f04 <LL_EXTI_EnableIT_0_31>
 80031ea:	e009      	b.n	8003200 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80031ec:	6938      	ldr	r0, [r7, #16]
 80031ee:	f7ff fe9b 	bl	8002f28 <LL_EXTI_DisableIT_0_31>
 80031f2:	e005      	b.n	8003200 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80031f4:	6938      	ldr	r0, [r7, #16]
 80031f6:	f7ff febd 	bl	8002f74 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80031fa:	6938      	ldr	r0, [r7, #16]
 80031fc:	f7ff fe94 	bl	8002f28 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d103      	bne.n	8003214 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8003214:	7ffb      	ldrb	r3, [r7, #31]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3720      	adds	r7, #32
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000
 8003224:	ff207d03 	.word	0xff207d03
 8003228:	40010204 	.word	0x40010204
 800322c:	20000000 	.word	0x20000000
 8003230:	053e2d63 	.word	0x053e2d63
 8003234:	40010200 	.word	0x40010200

08003238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <__NVIC_SetPriorityGrouping+0x44>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003254:	4013      	ands	r3, r2
 8003256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800326a:	4a04      	ldr	r2, [pc, #16]	; (800327c <__NVIC_SetPriorityGrouping+0x44>)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	60d3      	str	r3, [r2, #12]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003284:	4b04      	ldr	r3, [pc, #16]	; (8003298 <__NVIC_GetPriorityGrouping+0x18>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	0a1b      	lsrs	r3, r3, #8
 800328a:	f003 0307 	and.w	r3, r3, #7
}
 800328e:	4618      	mov	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	e000ed00 	.word	0xe000ed00

0800329c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	db0b      	blt.n	80032c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	f003 021f 	and.w	r2, r3, #31
 80032b4:	4907      	ldr	r1, [pc, #28]	; (80032d4 <__NVIC_EnableIRQ+0x38>)
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	2001      	movs	r0, #1
 80032be:	fa00 f202 	lsl.w	r2, r0, r2
 80032c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	e000e100 	.word	0xe000e100

080032d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	6039      	str	r1, [r7, #0]
 80032e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	db0a      	blt.n	8003302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	490c      	ldr	r1, [pc, #48]	; (8003324 <__NVIC_SetPriority+0x4c>)
 80032f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f6:	0112      	lsls	r2, r2, #4
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	440b      	add	r3, r1
 80032fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003300:	e00a      	b.n	8003318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	b2da      	uxtb	r2, r3
 8003306:	4908      	ldr	r1, [pc, #32]	; (8003328 <__NVIC_SetPriority+0x50>)
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	3b04      	subs	r3, #4
 8003310:	0112      	lsls	r2, r2, #4
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	440b      	add	r3, r1
 8003316:	761a      	strb	r2, [r3, #24]
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	e000e100 	.word	0xe000e100
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800332c:	b480      	push	{r7}
 800332e:	b089      	sub	sp, #36	; 0x24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f1c3 0307 	rsb	r3, r3, #7
 8003346:	2b04      	cmp	r3, #4
 8003348:	bf28      	it	cs
 800334a:	2304      	movcs	r3, #4
 800334c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	3304      	adds	r3, #4
 8003352:	2b06      	cmp	r3, #6
 8003354:	d902      	bls.n	800335c <NVIC_EncodePriority+0x30>
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	3b03      	subs	r3, #3
 800335a:	e000      	b.n	800335e <NVIC_EncodePriority+0x32>
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003360:	f04f 32ff 	mov.w	r2, #4294967295
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43da      	mvns	r2, r3
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	401a      	ands	r2, r3
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003374:	f04f 31ff 	mov.w	r1, #4294967295
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	fa01 f303 	lsl.w	r3, r1, r3
 800337e:	43d9      	mvns	r1, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003384:	4313      	orrs	r3, r2
         );
}
 8003386:	4618      	mov	r0, r3
 8003388:	3724      	adds	r7, #36	; 0x24
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff ff4c 	bl	8003238 <__NVIC_SetPriorityGrouping>
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033ba:	f7ff ff61 	bl	8003280 <__NVIC_GetPriorityGrouping>
 80033be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	68b9      	ldr	r1, [r7, #8]
 80033c4:	6978      	ldr	r0, [r7, #20]
 80033c6:	f7ff ffb1 	bl	800332c <NVIC_EncodePriority>
 80033ca:	4602      	mov	r2, r0
 80033cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033d0:	4611      	mov	r1, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff ff80 	bl	80032d8 <__NVIC_SetPriority>
}
 80033d8:	bf00      	nop
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff ff54 	bl	800329c <__NVIC_EnableIRQ>
}
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e014      	b.n	8003438 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	791b      	ldrb	r3, [r3, #4]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d105      	bne.n	8003424 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fd ff34 	bl	800128c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003456:	d120      	bne.n	800349a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003466:	d118      	bne.n	800349a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2204      	movs	r2, #4
 800346c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f043 0201 	orr.w	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003482:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003492:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f82d 	bl	80034f4 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034a8:	d120      	bne.n	80034ec <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034b8:	d118      	bne.n	80034ec <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2204      	movs	r2, #4
 80034be:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	f043 0202 	orr.w	r2, r3, #2
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80034d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80034e4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f928 	bl	800373c <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80034ec:	bf00      	nop
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	795b      	ldrb	r3, [r3, #5]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_DAC_ConfigChannel+0x1c>
 8003520:	2302      	movs	r3, #2
 8003522:	e107      	b.n	8003734 <HAL_DAC_ConfigChannel+0x22c>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2201      	movs	r2, #1
 8003528:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2202      	movs	r2, #2
 800352e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b04      	cmp	r3, #4
 8003536:	d174      	bne.n	8003622 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003538:	f7fe fc10 	bl	8001d5c <HAL_GetTick>
 800353c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d134      	bne.n	80035ae <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003544:	e011      	b.n	800356a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003546:	f7fe fc09 	bl	8001d5c <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b01      	cmp	r3, #1
 8003552:	d90a      	bls.n	800356a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f043 0208 	orr.w	r2, r3, #8
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2203      	movs	r2, #3
 8003564:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e0e4      	b.n	8003734 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1e6      	bne.n	8003546 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003578:	2001      	movs	r0, #1
 800357a:	f7fe fbfb 	bl	8001d74 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	6992      	ldr	r2, [r2, #24]
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
 8003588:	e01e      	b.n	80035c8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800358a:	f7fe fbe7 	bl	8001d5c <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	d90a      	bls.n	80035ae <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f043 0208 	orr.w	r2, r3, #8
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2203      	movs	r2, #3
 80035a8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e0c2      	b.n	8003734 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	dbe8      	blt.n	800358a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80035b8:	2001      	movs	r0, #1
 80035ba:	f7fe fbdb 	bl	8001d74 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	6992      	ldr	r2, [r2, #24]
 80035c6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80035d8:	fa01 f303 	lsl.w	r3, r1, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	ea02 0103 	and.w	r1, r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	409a      	lsls	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f003 0310 	and.w	r3, r3, #16
 8003602:	21ff      	movs	r1, #255	; 0xff
 8003604:	fa01 f303 	lsl.w	r3, r1, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	ea02 0103 	and.w	r1, r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	6a1a      	ldr	r2, [r3, #32]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	409a      	lsls	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d11d      	bne.n	8003666 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003630:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f003 0310 	and.w	r3, r3, #16
 8003638:	221f      	movs	r2, #31
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4013      	ands	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2207      	movs	r2, #7
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4013      	ands	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	431a      	orrs	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6819      	ldr	r1, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43da      	mvns	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	400a      	ands	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	f640 72fc 	movw	r2, #4092	; 0xffc
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43db      	mvns	r3, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4013      	ands	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f003 0310 	and.w	r3, r3, #16
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4313      	orrs	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6819      	ldr	r1, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	22c0      	movs	r2, #192	; 0xc0
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43da      	mvns	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	400a      	ands	r2, r1
 8003724:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3720      	adds	r7, #32
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800375e:	e17f      	b.n	8003a60 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	2101      	movs	r1, #1
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	fa01 f303 	lsl.w	r3, r1, r3
 800376c:	4013      	ands	r3, r2
 800376e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 8171 	beq.w	8003a5a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	2b01      	cmp	r3, #1
 8003782:	d005      	beq.n	8003790 <HAL_GPIO_Init+0x40>
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d130      	bne.n	80037f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	2203      	movs	r2, #3
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4013      	ands	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037c6:	2201      	movs	r2, #1
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	43db      	mvns	r3, r3
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4013      	ands	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	091b      	lsrs	r3, r3, #4
 80037dc:	f003 0201 	and.w	r2, r3, #1
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d118      	bne.n	8003830 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003804:	2201      	movs	r2, #1
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	43db      	mvns	r3, r3
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4013      	ands	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	08db      	lsrs	r3, r3, #3
 800381a:	f003 0201 	and.w	r2, r3, #1
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 0303 	and.w	r3, r3, #3
 8003838:	2b03      	cmp	r3, #3
 800383a:	d017      	beq.n	800386c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	2203      	movs	r2, #3
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4013      	ands	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d123      	bne.n	80038c0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	08da      	lsrs	r2, r3, #3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3208      	adds	r2, #8
 8003880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003884:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	220f      	movs	r2, #15
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4013      	ands	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	08da      	lsrs	r2, r3, #3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3208      	adds	r2, #8
 80038ba:	6939      	ldr	r1, [r7, #16]
 80038bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	2203      	movs	r2, #3
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4013      	ands	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 0203 	and.w	r2, r3, #3
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 80ac 	beq.w	8003a5a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003902:	4b5f      	ldr	r3, [pc, #380]	; (8003a80 <HAL_GPIO_Init+0x330>)
 8003904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003906:	4a5e      	ldr	r2, [pc, #376]	; (8003a80 <HAL_GPIO_Init+0x330>)
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	6613      	str	r3, [r2, #96]	; 0x60
 800390e:	4b5c      	ldr	r3, [pc, #368]	; (8003a80 <HAL_GPIO_Init+0x330>)
 8003910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	60bb      	str	r3, [r7, #8]
 8003918:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800391a:	4a5a      	ldr	r2, [pc, #360]	; (8003a84 <HAL_GPIO_Init+0x334>)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	089b      	lsrs	r3, r3, #2
 8003920:	3302      	adds	r3, #2
 8003922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003926:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	220f      	movs	r2, #15
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4013      	ands	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003944:	d025      	beq.n	8003992 <HAL_GPIO_Init+0x242>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a4f      	ldr	r2, [pc, #316]	; (8003a88 <HAL_GPIO_Init+0x338>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d01f      	beq.n	800398e <HAL_GPIO_Init+0x23e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a4e      	ldr	r2, [pc, #312]	; (8003a8c <HAL_GPIO_Init+0x33c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d019      	beq.n	800398a <HAL_GPIO_Init+0x23a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a4d      	ldr	r2, [pc, #308]	; (8003a90 <HAL_GPIO_Init+0x340>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d013      	beq.n	8003986 <HAL_GPIO_Init+0x236>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a4c      	ldr	r2, [pc, #304]	; (8003a94 <HAL_GPIO_Init+0x344>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00d      	beq.n	8003982 <HAL_GPIO_Init+0x232>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a4b      	ldr	r2, [pc, #300]	; (8003a98 <HAL_GPIO_Init+0x348>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d007      	beq.n	800397e <HAL_GPIO_Init+0x22e>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a4a      	ldr	r2, [pc, #296]	; (8003a9c <HAL_GPIO_Init+0x34c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d101      	bne.n	800397a <HAL_GPIO_Init+0x22a>
 8003976:	2306      	movs	r3, #6
 8003978:	e00c      	b.n	8003994 <HAL_GPIO_Init+0x244>
 800397a:	2307      	movs	r3, #7
 800397c:	e00a      	b.n	8003994 <HAL_GPIO_Init+0x244>
 800397e:	2305      	movs	r3, #5
 8003980:	e008      	b.n	8003994 <HAL_GPIO_Init+0x244>
 8003982:	2304      	movs	r3, #4
 8003984:	e006      	b.n	8003994 <HAL_GPIO_Init+0x244>
 8003986:	2303      	movs	r3, #3
 8003988:	e004      	b.n	8003994 <HAL_GPIO_Init+0x244>
 800398a:	2302      	movs	r3, #2
 800398c:	e002      	b.n	8003994 <HAL_GPIO_Init+0x244>
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <HAL_GPIO_Init+0x244>
 8003992:	2300      	movs	r3, #0
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	f002 0203 	and.w	r2, r2, #3
 800399a:	0092      	lsls	r2, r2, #2
 800399c:	4093      	lsls	r3, r2
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039a4:	4937      	ldr	r1, [pc, #220]	; (8003a84 <HAL_GPIO_Init+0x334>)
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	089b      	lsrs	r3, r3, #2
 80039aa:	3302      	adds	r3, #2
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039b2:	4b3b      	ldr	r3, [pc, #236]	; (8003aa0 <HAL_GPIO_Init+0x350>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	43db      	mvns	r3, r3
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4013      	ands	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039d6:	4a32      	ldr	r2, [pc, #200]	; (8003aa0 <HAL_GPIO_Init+0x350>)
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039dc:	4b30      	ldr	r3, [pc, #192]	; (8003aa0 <HAL_GPIO_Init+0x350>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	43db      	mvns	r3, r3
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4013      	ands	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a00:	4a27      	ldr	r2, [pc, #156]	; (8003aa0 <HAL_GPIO_Init+0x350>)
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a06:	4b26      	ldr	r3, [pc, #152]	; (8003aa0 <HAL_GPIO_Init+0x350>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4013      	ands	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a2a:	4a1d      	ldr	r2, [pc, #116]	; (8003aa0 <HAL_GPIO_Init+0x350>)
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a30:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <HAL_GPIO_Init+0x350>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a54:	4a12      	ldr	r2, [pc, #72]	; (8003aa0 <HAL_GPIO_Init+0x350>)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f47f ae78 	bne.w	8003760 <HAL_GPIO_Init+0x10>
  }
}
 8003a70:	bf00      	nop
 8003a72:	bf00      	nop
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40010000 	.word	0x40010000
 8003a88:	48000400 	.word	0x48000400
 8003a8c:	48000800 	.word	0x48000800
 8003a90:	48000c00 	.word	0x48000c00
 8003a94:	48001000 	.word	0x48001000
 8003a98:	48001400 	.word	0x48001400
 8003a9c:	48001800 	.word	0x48001800
 8003aa0:	40010400 	.word	0x40010400

08003aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	807b      	strh	r3, [r7, #2]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ab4:	787b      	ldrb	r3, [r7, #1]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003aba:	887a      	ldrh	r2, [r7, #2]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ac0:	e002      	b.n	8003ac8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ac2:	887a      	ldrh	r2, [r7, #2]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ae6:	887a      	ldrh	r2, [r7, #2]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4013      	ands	r3, r2
 8003aec:	041a      	lsls	r2, r3, #16
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	43d9      	mvns	r1, r3
 8003af2:	887b      	ldrh	r3, [r7, #2]
 8003af4:	400b      	ands	r3, r1
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	619a      	str	r2, [r3, #24]
}
 8003afc:	bf00      	nop
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b0a:	b08f      	sub	sp, #60	; 0x3c
 8003b0c:	af0a      	add	r7, sp, #40	; 0x28
 8003b0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e054      	b.n	8003bc4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d106      	bne.n	8003b3a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7fd fe9f 	bl	8001878 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d102      	bne.n	8003b54 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f006 febd 	bl	800a8d8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	687e      	ldr	r6, [r7, #4]
 8003b66:	466d      	mov	r5, sp
 8003b68:	f106 0410 	add.w	r4, r6, #16
 8003b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b78:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b7c:	1d33      	adds	r3, r6, #4
 8003b7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b80:	6838      	ldr	r0, [r7, #0]
 8003b82:	f006 fe7d 	bl	800a880 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f006 feb4 	bl	800a8fa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	687e      	ldr	r6, [r7, #4]
 8003b9a:	466d      	mov	r5, sp
 8003b9c:	f106 0410 	add.w	r4, r6, #16
 8003ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ba8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bac:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bb0:	1d33      	adds	r3, r6, #4
 8003bb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bb4:	6838      	ldr	r0, [r7, #0]
 8003bb6:	f006 ffff 	bl	800abb8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bcc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f006 ffa5 	bl	800ab32 <USB_GetMode>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	f040 80f6 	bne.w	8003ddc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f006 ff89 	bl	800ab0c <USB_ReadInterrupts>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 80ec 	beq.w	8003dda <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f006 ff80 	bl	800ab0c <USB_ReadInterrupts>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c16:	d104      	bne.n	8003c22 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003c20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f006 ff70 	bl	800ab0c <USB_ReadInterrupts>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c36:	d104      	bne.n	8003c42 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f006 ff60 	bl	800ab0c <USB_ReadInterrupts>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c56:	d104      	bne.n	8003c62 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003c60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f006 ff50 	bl	800ab0c <USB_ReadInterrupts>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d103      	bne.n	8003c7e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f006 ff42 	bl	800ab0c <USB_ReadInterrupts>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c92:	d11c      	bne.n	8003cce <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003c9c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10f      	bne.n	8003cce <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003cae:	2110      	movs	r1, #16
 8003cb0:	6938      	ldr	r0, [r7, #16]
 8003cb2:	f006 fe6f 	bl	800a994 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003cb6:	6938      	ldr	r0, [r7, #16]
 8003cb8:	f006 fea0 	bl	800a9fc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f006 fffa 	bl	800acbc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f89e 	bl	8003e0a <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f006 ff1a 	bl	800ab0c <USB_ReadInterrupts>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ce2:	d102      	bne.n	8003cea <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 ffc3 	bl	8004c70 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f006 ff0c 	bl	800ab0c <USB_ReadInterrupts>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d106      	bne.n	8003d0c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f86f 	bl	8003de2 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2208      	movs	r2, #8
 8003d0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f006 fefb 	bl	800ab0c <USB_ReadInterrupts>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b10      	cmp	r3, #16
 8003d1e:	d101      	bne.n	8003d24 <HAL_HCD_IRQHandler+0x158>
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <HAL_HCD_IRQHandler+0x15a>
 8003d24:	2300      	movs	r3, #0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d012      	beq.n	8003d50 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699a      	ldr	r2, [r3, #24]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0210 	bic.w	r2, r2, #16
 8003d38:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fec6 	bl	8004acc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0210 	orr.w	r2, r2, #16
 8003d4e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f006 fed9 	bl	800ab0c <USB_ReadInterrupts>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d64:	d13a      	bne.n	8003ddc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f006 ffe0 	bl	800ad30 <USB_HC_ReadInterrupt>
 8003d70:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	e025      	b.n	8003dc4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	fa22 f303 	lsr.w	r3, r2, r3
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d018      	beq.n	8003dbe <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da2:	d106      	bne.n	8003db2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	4619      	mov	r1, r3
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f859 	bl	8003e62 <HCD_HC_IN_IRQHandler>
 8003db0:	e005      	b.n	8003dbe <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	4619      	mov	r1, r3
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fb85 	bl	80044c8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d3d4      	bcc.n	8003d78 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dd6:	615a      	str	r2, [r3, #20]
 8003dd8:	e000      	b.n	8003ddc <HAL_HCD_IRQHandler+0x210>
      return;
 8003dda:	bf00      	nop
    }
  }
}
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	70fb      	strb	r3, [r7, #3]
 8003e52:	4613      	mov	r3, r2
 8003e54:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b086      	sub	sp, #24
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d11a      	bne.n	8003ec8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	212c      	movs	r1, #44	; 0x2c
 8003eaa:	fb01 f303 	mul.w	r3, r1, r3
 8003eae:	4413      	add	r3, r2
 8003eb0:	3361      	adds	r3, #97	; 0x61
 8003eb2:	2206      	movs	r2, #6
 8003eb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f006 ff46 	bl	800ad52 <USB_HC_Halt>
 8003ec6:	e0af      	b.n	8004028 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ede:	d11b      	bne.n	8003f18 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eec:	461a      	mov	r2, r3
 8003eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ef2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	212c      	movs	r1, #44	; 0x2c
 8003efa:	fb01 f303 	mul.w	r3, r1, r3
 8003efe:	4413      	add	r3, r2
 8003f00:	3361      	adds	r3, #97	; 0x61
 8003f02:	2207      	movs	r2, #7
 8003f04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	4611      	mov	r1, r2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f006 ff1e 	bl	800ad52 <USB_HC_Halt>
 8003f16:	e087      	b.n	8004028 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	d109      	bne.n	8003f42 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2320      	movs	r3, #32
 8003f3e:	6093      	str	r3, [r2, #8]
 8003f40:	e072      	b.n	8004028 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d11a      	bne.n	8003f8e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f64:	461a      	mov	r2, r3
 8003f66:	2308      	movs	r3, #8
 8003f68:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	212c      	movs	r1, #44	; 0x2c
 8003f70:	fb01 f303 	mul.w	r3, r1, r3
 8003f74:	4413      	add	r3, r2
 8003f76:	3361      	adds	r3, #97	; 0x61
 8003f78:	2205      	movs	r2, #5
 8003f7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	4611      	mov	r1, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f006 fee3 	bl	800ad52 <USB_HC_Halt>
 8003f8c:	e04c      	b.n	8004028 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa4:	d11b      	bne.n	8003fde <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fb8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	212c      	movs	r1, #44	; 0x2c
 8003fc0:	fb01 f303 	mul.w	r3, r1, r3
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3361      	adds	r3, #97	; 0x61
 8003fc8:	2208      	movs	r2, #8
 8003fca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f006 febb 	bl	800ad52 <USB_HC_Halt>
 8003fdc:	e024      	b.n	8004028 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff0:	2b80      	cmp	r3, #128	; 0x80
 8003ff2:	d119      	bne.n	8004028 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004000:	461a      	mov	r2, r3
 8004002:	2380      	movs	r3, #128	; 0x80
 8004004:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	212c      	movs	r1, #44	; 0x2c
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	4413      	add	r3, r2
 8004012:	3361      	adds	r3, #97	; 0x61
 8004014:	2206      	movs	r2, #6
 8004016:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	4611      	mov	r1, r2
 8004022:	4618      	mov	r0, r3
 8004024:	f006 fe95 	bl	800ad52 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4413      	add	r3, r2
 8004030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800403a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800403e:	d112      	bne.n	8004066 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	4611      	mov	r1, r2
 800404a:	4618      	mov	r0, r3
 800404c:	f006 fe81 	bl	800ad52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	4413      	add	r3, r2
 8004058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405c:	461a      	mov	r2, r3
 800405e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004062:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004064:	e22c      	b.n	80044c0 <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4413      	add	r3, r2
 800406e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b01      	cmp	r3, #1
 800407a:	f040 80c1 	bne.w	8004200 <HCD_HC_IN_IRQHandler+0x39e>
    hhcd->hc[ch_num].state = HC_XFRC;
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	212c      	movs	r1, #44	; 0x2c
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	4413      	add	r3, r2
 800408a:	3361      	adds	r3, #97	; 0x61
 800408c:	2201      	movs	r2, #1
 800408e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	212c      	movs	r1, #44	; 0x2c
 8004096:	fb01 f303 	mul.w	r3, r1, r3
 800409a:	4413      	add	r3, r2
 800409c:	335c      	adds	r3, #92	; 0x5c
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ae:	461a      	mov	r2, r3
 80040b0:	2301      	movs	r3, #1
 80040b2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	212c      	movs	r1, #44	; 0x2c
 80040ba:	fb01 f303 	mul.w	r3, r1, r3
 80040be:	4413      	add	r3, r2
 80040c0:	333f      	adds	r3, #63	; 0x3f
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d009      	beq.n	80040dc <HCD_HC_IN_IRQHandler+0x27a>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	212c      	movs	r1, #44	; 0x2c
 80040ce:	fb01 f303 	mul.w	r3, r1, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	333f      	adds	r3, #63	; 0x3f
 80040d6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d111      	bne.n	8004100 <HCD_HC_IN_IRQHandler+0x29e>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	4611      	mov	r1, r2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f006 fe33 	bl	800ad52 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f8:	461a      	mov	r2, r3
 80040fa:	2310      	movs	r3, #16
 80040fc:	6093      	str	r3, [r2, #8]
 80040fe:	e03a      	b.n	8004176 <HCD_HC_IN_IRQHandler+0x314>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	212c      	movs	r1, #44	; 0x2c
 8004106:	fb01 f303 	mul.w	r3, r1, r3
 800410a:	4413      	add	r3, r2
 800410c:	333f      	adds	r3, #63	; 0x3f
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b03      	cmp	r3, #3
 8004112:	d009      	beq.n	8004128 <HCD_HC_IN_IRQHandler+0x2c6>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	212c      	movs	r1, #44	; 0x2c
 800411a:	fb01 f303 	mul.w	r3, r1, r3
 800411e:	4413      	add	r3, r2
 8004120:	333f      	adds	r3, #63	; 0x3f
 8004122:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004124:	2b01      	cmp	r3, #1
 8004126:	d126      	bne.n	8004176 <HCD_HC_IN_IRQHandler+0x314>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4413      	add	r3, r2
 8004130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	0151      	lsls	r1, r2, #5
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	440a      	add	r2, r1
 800413e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004142:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004146:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	212c      	movs	r1, #44	; 0x2c
 800414e:	fb01 f303 	mul.w	r3, r1, r3
 8004152:	4413      	add	r3, r2
 8004154:	3360      	adds	r3, #96	; 0x60
 8004156:	2201      	movs	r2, #1
 8004158:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	b2d9      	uxtb	r1, r3
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	202c      	movs	r0, #44	; 0x2c
 8004164:	fb00 f303 	mul.w	r3, r0, r3
 8004168:	4413      	add	r3, r2
 800416a:	3360      	adds	r3, #96	; 0x60
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff fe68 	bl	8003e46 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d12b      	bne.n	80041d6 <HCD_HC_IN_IRQHandler+0x374>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	212c      	movs	r1, #44	; 0x2c
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	4413      	add	r3, r2
 800418a:	3348      	adds	r3, #72	; 0x48
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	202c      	movs	r0, #44	; 0x2c
 8004194:	fb00 f202 	mul.w	r2, r0, r2
 8004198:	440a      	add	r2, r1
 800419a:	3240      	adds	r2, #64	; 0x40
 800419c:	8812      	ldrh	r2, [r2, #0]
 800419e:	fbb3 f3f2 	udiv	r3, r3, r2
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 818a 	beq.w	80044c0 <HCD_HC_IN_IRQHandler+0x65e>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	212c      	movs	r1, #44	; 0x2c
 80041b2:	fb01 f303 	mul.w	r3, r1, r3
 80041b6:	4413      	add	r3, r2
 80041b8:	3354      	adds	r3, #84	; 0x54
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	f083 0301 	eor.w	r3, r3, #1
 80041c0:	b2d8      	uxtb	r0, r3
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	212c      	movs	r1, #44	; 0x2c
 80041c8:	fb01 f303 	mul.w	r3, r1, r3
 80041cc:	4413      	add	r3, r2
 80041ce:	3354      	adds	r3, #84	; 0x54
 80041d0:	4602      	mov	r2, r0
 80041d2:	701a      	strb	r2, [r3, #0]
}
 80041d4:	e174      	b.n	80044c0 <HCD_HC_IN_IRQHandler+0x65e>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	212c      	movs	r1, #44	; 0x2c
 80041dc:	fb01 f303 	mul.w	r3, r1, r3
 80041e0:	4413      	add	r3, r2
 80041e2:	3354      	adds	r3, #84	; 0x54
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	f083 0301 	eor.w	r3, r3, #1
 80041ea:	b2d8      	uxtb	r0, r3
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	212c      	movs	r1, #44	; 0x2c
 80041f2:	fb01 f303 	mul.w	r3, r1, r3
 80041f6:	4413      	add	r3, r2
 80041f8:	3354      	adds	r3, #84	; 0x54
 80041fa:	4602      	mov	r2, r0
 80041fc:	701a      	strb	r2, [r3, #0]
}
 80041fe:	e15f      	b.n	80044c0 <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4413      	add	r3, r2
 8004208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b02      	cmp	r3, #2
 8004214:	f040 80f6 	bne.w	8004404 <HCD_HC_IN_IRQHandler+0x5a2>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	212c      	movs	r1, #44	; 0x2c
 800421e:	fb01 f303 	mul.w	r3, r1, r3
 8004222:	4413      	add	r3, r2
 8004224:	3361      	adds	r3, #97	; 0x61
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d109      	bne.n	8004240 <HCD_HC_IN_IRQHandler+0x3de>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	212c      	movs	r1, #44	; 0x2c
 8004232:	fb01 f303 	mul.w	r3, r1, r3
 8004236:	4413      	add	r3, r2
 8004238:	3360      	adds	r3, #96	; 0x60
 800423a:	2201      	movs	r2, #1
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	e0c9      	b.n	80043d4 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	212c      	movs	r1, #44	; 0x2c
 8004246:	fb01 f303 	mul.w	r3, r1, r3
 800424a:	4413      	add	r3, r2
 800424c:	3361      	adds	r3, #97	; 0x61
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b05      	cmp	r3, #5
 8004252:	d109      	bne.n	8004268 <HCD_HC_IN_IRQHandler+0x406>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	212c      	movs	r1, #44	; 0x2c
 800425a:	fb01 f303 	mul.w	r3, r1, r3
 800425e:	4413      	add	r3, r2
 8004260:	3360      	adds	r3, #96	; 0x60
 8004262:	2205      	movs	r2, #5
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	e0b5      	b.n	80043d4 <HCD_HC_IN_IRQHandler+0x572>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	212c      	movs	r1, #44	; 0x2c
 800426e:	fb01 f303 	mul.w	r3, r1, r3
 8004272:	4413      	add	r3, r2
 8004274:	3361      	adds	r3, #97	; 0x61
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b06      	cmp	r3, #6
 800427a:	d009      	beq.n	8004290 <HCD_HC_IN_IRQHandler+0x42e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	212c      	movs	r1, #44	; 0x2c
 8004282:	fb01 f303 	mul.w	r3, r1, r3
 8004286:	4413      	add	r3, r2
 8004288:	3361      	adds	r3, #97	; 0x61
 800428a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800428c:	2b08      	cmp	r3, #8
 800428e:	d150      	bne.n	8004332 <HCD_HC_IN_IRQHandler+0x4d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	212c      	movs	r1, #44	; 0x2c
 8004296:	fb01 f303 	mul.w	r3, r1, r3
 800429a:	4413      	add	r3, r2
 800429c:	335c      	adds	r3, #92	; 0x5c
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	202c      	movs	r0, #44	; 0x2c
 80042a8:	fb00 f303 	mul.w	r3, r0, r3
 80042ac:	440b      	add	r3, r1
 80042ae:	335c      	adds	r3, #92	; 0x5c
 80042b0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	212c      	movs	r1, #44	; 0x2c
 80042b8:	fb01 f303 	mul.w	r3, r1, r3
 80042bc:	4413      	add	r3, r2
 80042be:	335c      	adds	r3, #92	; 0x5c
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d912      	bls.n	80042ec <HCD_HC_IN_IRQHandler+0x48a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	212c      	movs	r1, #44	; 0x2c
 80042cc:	fb01 f303 	mul.w	r3, r1, r3
 80042d0:	4413      	add	r3, r2
 80042d2:	335c      	adds	r3, #92	; 0x5c
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	212c      	movs	r1, #44	; 0x2c
 80042de:	fb01 f303 	mul.w	r3, r1, r3
 80042e2:	4413      	add	r3, r2
 80042e4:	3360      	adds	r3, #96	; 0x60
 80042e6:	2204      	movs	r2, #4
 80042e8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80042ea:	e073      	b.n	80043d4 <HCD_HC_IN_IRQHandler+0x572>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	212c      	movs	r1, #44	; 0x2c
 80042f2:	fb01 f303 	mul.w	r3, r1, r3
 80042f6:	4413      	add	r3, r2
 80042f8:	3360      	adds	r3, #96	; 0x60
 80042fa:	2202      	movs	r2, #2
 80042fc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	4413      	add	r3, r2
 8004306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004314:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800431c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	4413      	add	r3, r2
 8004326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432a:	461a      	mov	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004330:	e050      	b.n	80043d4 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	212c      	movs	r1, #44	; 0x2c
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	4413      	add	r3, r2
 800433e:	3361      	adds	r3, #97	; 0x61
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b03      	cmp	r3, #3
 8004344:	d122      	bne.n	800438c <HCD_HC_IN_IRQHandler+0x52a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	212c      	movs	r1, #44	; 0x2c
 800434c:	fb01 f303 	mul.w	r3, r1, r3
 8004350:	4413      	add	r3, r2
 8004352:	3360      	adds	r3, #96	; 0x60
 8004354:	2202      	movs	r2, #2
 8004356:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	4413      	add	r3, r2
 8004360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800436e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004376:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4413      	add	r3, r2
 8004380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004384:	461a      	mov	r2, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	e023      	b.n	80043d4 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	212c      	movs	r1, #44	; 0x2c
 8004392:	fb01 f303 	mul.w	r3, r1, r3
 8004396:	4413      	add	r3, r2
 8004398:	3361      	adds	r3, #97	; 0x61
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b07      	cmp	r3, #7
 800439e:	d119      	bne.n	80043d4 <HCD_HC_IN_IRQHandler+0x572>
      hhcd->hc[ch_num].ErrCnt++;
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	212c      	movs	r1, #44	; 0x2c
 80043a6:	fb01 f303 	mul.w	r3, r1, r3
 80043aa:	4413      	add	r3, r2
 80043ac:	335c      	adds	r3, #92	; 0x5c
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	202c      	movs	r0, #44	; 0x2c
 80043b8:	fb00 f303 	mul.w	r3, r0, r3
 80043bc:	440b      	add	r3, r1
 80043be:	335c      	adds	r3, #92	; 0x5c
 80043c0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	212c      	movs	r1, #44	; 0x2c
 80043c8:	fb01 f303 	mul.w	r3, r1, r3
 80043cc:	4413      	add	r3, r2
 80043ce:	3360      	adds	r3, #96	; 0x60
 80043d0:	2204      	movs	r2, #4
 80043d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e0:	461a      	mov	r2, r3
 80043e2:	2302      	movs	r3, #2
 80043e4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	b2d9      	uxtb	r1, r3
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	202c      	movs	r0, #44	; 0x2c
 80043f0:	fb00 f303 	mul.w	r3, r0, r3
 80043f4:	4413      	add	r3, r2
 80043f6:	3360      	adds	r3, #96	; 0x60
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff fd22 	bl	8003e46 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004402:	e05d      	b.n	80044c0 <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4413      	add	r3, r2
 800440c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b10      	cmp	r3, #16
 8004418:	d152      	bne.n	80044c0 <HCD_HC_IN_IRQHandler+0x65e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	212c      	movs	r1, #44	; 0x2c
 8004420:	fb01 f303 	mul.w	r3, r1, r3
 8004424:	4413      	add	r3, r2
 8004426:	333f      	adds	r3, #63	; 0x3f
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b03      	cmp	r3, #3
 800442c:	d111      	bne.n	8004452 <HCD_HC_IN_IRQHandler+0x5f0>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	212c      	movs	r1, #44	; 0x2c
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	4413      	add	r3, r2
 800443a:	335c      	adds	r3, #92	; 0x5c
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	4611      	mov	r1, r2
 800444a:	4618      	mov	r0, r3
 800444c:	f006 fc81 	bl	800ad52 <USB_HC_Halt>
 8004450:	e02d      	b.n	80044ae <HCD_HC_IN_IRQHandler+0x64c>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	212c      	movs	r1, #44	; 0x2c
 8004458:	fb01 f303 	mul.w	r3, r1, r3
 800445c:	4413      	add	r3, r2
 800445e:	333f      	adds	r3, #63	; 0x3f
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <HCD_HC_IN_IRQHandler+0x618>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	212c      	movs	r1, #44	; 0x2c
 800446c:	fb01 f303 	mul.w	r3, r1, r3
 8004470:	4413      	add	r3, r2
 8004472:	333f      	adds	r3, #63	; 0x3f
 8004474:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004476:	2b02      	cmp	r3, #2
 8004478:	d119      	bne.n	80044ae <HCD_HC_IN_IRQHandler+0x64c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	212c      	movs	r1, #44	; 0x2c
 8004480:	fb01 f303 	mul.w	r3, r1, r3
 8004484:	4413      	add	r3, r2
 8004486:	335c      	adds	r3, #92	; 0x5c
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	212c      	movs	r1, #44	; 0x2c
 8004492:	fb01 f303 	mul.w	r3, r1, r3
 8004496:	4413      	add	r3, r2
 8004498:	3361      	adds	r3, #97	; 0x61
 800449a:	2203      	movs	r2, #3
 800449c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	4611      	mov	r1, r2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f006 fc52 	bl	800ad52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ba:	461a      	mov	r2, r3
 80044bc:	2310      	movs	r3, #16
 80044be:	6093      	str	r3, [r2, #8]
}
 80044c0:	bf00      	nop
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80044de:	78fb      	ldrb	r3, [r7, #3]
 80044e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d11a      	bne.n	800452e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004504:	461a      	mov	r2, r3
 8004506:	2304      	movs	r3, #4
 8004508:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	212c      	movs	r1, #44	; 0x2c
 8004510:	fb01 f303 	mul.w	r3, r1, r3
 8004514:	4413      	add	r3, r2
 8004516:	3361      	adds	r3, #97	; 0x61
 8004518:	2206      	movs	r2, #6
 800451a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	4611      	mov	r1, r2
 8004526:	4618      	mov	r0, r3
 8004528:	f006 fc13 	bl	800ad52 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800452c:	e2ca      	b.n	8004ac4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	4413      	add	r3, r2
 8004536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b20      	cmp	r3, #32
 8004542:	d12e      	bne.n	80045a2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	4413      	add	r3, r2
 800454c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004550:	461a      	mov	r2, r3
 8004552:	2320      	movs	r3, #32
 8004554:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	212c      	movs	r1, #44	; 0x2c
 800455c:	fb01 f303 	mul.w	r3, r1, r3
 8004560:	4413      	add	r3, r2
 8004562:	333d      	adds	r3, #61	; 0x3d
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	2b01      	cmp	r3, #1
 8004568:	f040 82ac 	bne.w	8004ac4 <HCD_HC_OUT_IRQHandler+0x5fc>
      hhcd->hc[ch_num].do_ping = 0U;
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	212c      	movs	r1, #44	; 0x2c
 8004572:	fb01 f303 	mul.w	r3, r1, r3
 8004576:	4413      	add	r3, r2
 8004578:	333d      	adds	r3, #61	; 0x3d
 800457a:	2200      	movs	r2, #0
 800457c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	212c      	movs	r1, #44	; 0x2c
 8004584:	fb01 f303 	mul.w	r3, r1, r3
 8004588:	4413      	add	r3, r2
 800458a:	3360      	adds	r3, #96	; 0x60
 800458c:	2202      	movs	r2, #2
 800458e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	4611      	mov	r1, r2
 800459a:	4618      	mov	r0, r3
 800459c:	f006 fbd9 	bl	800ad52 <USB_HC_Halt>
}
 80045a0:	e290      	b.n	8004ac4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045b8:	d112      	bne.n	80045e0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c6:	461a      	mov	r2, r3
 80045c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045cc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	4611      	mov	r1, r2
 80045d8:	4618      	mov	r0, r3
 80045da:	f006 fbba 	bl	800ad52 <USB_HC_Halt>
}
 80045de:	e271      	b.n	8004ac4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d140      	bne.n	8004678 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	212c      	movs	r1, #44	; 0x2c
 80045fc:	fb01 f303 	mul.w	r3, r1, r3
 8004600:	4413      	add	r3, r2
 8004602:	335c      	adds	r3, #92	; 0x5c
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	4413      	add	r3, r2
 8004610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461a:	2b40      	cmp	r3, #64	; 0x40
 800461c:	d111      	bne.n	8004642 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	212c      	movs	r1, #44	; 0x2c
 8004624:	fb01 f303 	mul.w	r3, r1, r3
 8004628:	4413      	add	r3, r2
 800462a:	333d      	adds	r3, #61	; 0x3d
 800462c:	2201      	movs	r2, #1
 800462e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	4413      	add	r3, r2
 8004638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463c:	461a      	mov	r2, r3
 800463e:	2340      	movs	r3, #64	; 0x40
 8004640:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	4413      	add	r3, r2
 800464a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464e:	461a      	mov	r2, r3
 8004650:	2301      	movs	r3, #1
 8004652:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	212c      	movs	r1, #44	; 0x2c
 800465a:	fb01 f303 	mul.w	r3, r1, r3
 800465e:	4413      	add	r3, r2
 8004660:	3361      	adds	r3, #97	; 0x61
 8004662:	2201      	movs	r2, #1
 8004664:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	4611      	mov	r1, r2
 8004670:	4618      	mov	r0, r3
 8004672:	f006 fb6e 	bl	800ad52 <USB_HC_Halt>
}
 8004676:	e225      	b.n	8004ac4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	4413      	add	r3, r2
 8004680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b40      	cmp	r3, #64	; 0x40
 800468c:	d12c      	bne.n	80046e8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	212c      	movs	r1, #44	; 0x2c
 8004694:	fb01 f303 	mul.w	r3, r1, r3
 8004698:	4413      	add	r3, r2
 800469a:	3361      	adds	r3, #97	; 0x61
 800469c:	2204      	movs	r2, #4
 800469e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	212c      	movs	r1, #44	; 0x2c
 80046a6:	fb01 f303 	mul.w	r3, r1, r3
 80046aa:	4413      	add	r3, r2
 80046ac:	333d      	adds	r3, #61	; 0x3d
 80046ae:	2201      	movs	r2, #1
 80046b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	212c      	movs	r1, #44	; 0x2c
 80046b8:	fb01 f303 	mul.w	r3, r1, r3
 80046bc:	4413      	add	r3, r2
 80046be:	335c      	adds	r3, #92	; 0x5c
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	4611      	mov	r1, r2
 80046ce:	4618      	mov	r0, r3
 80046d0:	f006 fb3f 	bl	800ad52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e0:	461a      	mov	r2, r3
 80046e2:	2340      	movs	r3, #64	; 0x40
 80046e4:	6093      	str	r3, [r2, #8]
}
 80046e6:	e1ed      	b.n	8004ac4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d11a      	bne.n	8004734 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	4413      	add	r3, r2
 8004706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800470a:	461a      	mov	r2, r3
 800470c:	2308      	movs	r3, #8
 800470e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	212c      	movs	r1, #44	; 0x2c
 8004716:	fb01 f303 	mul.w	r3, r1, r3
 800471a:	4413      	add	r3, r2
 800471c:	3361      	adds	r3, #97	; 0x61
 800471e:	2205      	movs	r2, #5
 8004720:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	4611      	mov	r1, r2
 800472c:	4618      	mov	r0, r3
 800472e:	f006 fb10 	bl	800ad52 <USB_HC_Halt>
}
 8004732:	e1c7      	b.n	8004ac4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	4413      	add	r3, r2
 800473c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 0310 	and.w	r3, r3, #16
 8004746:	2b10      	cmp	r3, #16
 8004748:	d123      	bne.n	8004792 <HCD_HC_OUT_IRQHandler+0x2ca>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	212c      	movs	r1, #44	; 0x2c
 8004750:	fb01 f303 	mul.w	r3, r1, r3
 8004754:	4413      	add	r3, r2
 8004756:	335c      	adds	r3, #92	; 0x5c
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	212c      	movs	r1, #44	; 0x2c
 8004762:	fb01 f303 	mul.w	r3, r1, r3
 8004766:	4413      	add	r3, r2
 8004768:	3361      	adds	r3, #97	; 0x61
 800476a:	2203      	movs	r2, #3
 800476c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	b2d2      	uxtb	r2, r2
 8004776:	4611      	mov	r1, r2
 8004778:	4618      	mov	r0, r3
 800477a:	f006 faea 	bl	800ad52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	4413      	add	r3, r2
 8004786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800478a:	461a      	mov	r2, r3
 800478c:	2310      	movs	r3, #16
 800478e:	6093      	str	r3, [r2, #8]
}
 8004790:	e198      	b.n	8004ac4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	4413      	add	r3, r2
 800479a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a4:	2b80      	cmp	r3, #128	; 0x80
 80047a6:	d11a      	bne.n	80047de <HCD_HC_OUT_IRQHandler+0x316>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	212c      	movs	r1, #44	; 0x2c
 80047ae:	fb01 f303 	mul.w	r3, r1, r3
 80047b2:	4413      	add	r3, r2
 80047b4:	3361      	adds	r3, #97	; 0x61
 80047b6:	2206      	movs	r2, #6
 80047b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	4611      	mov	r1, r2
 80047c4:	4618      	mov	r0, r3
 80047c6:	f006 fac4 	bl	800ad52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d6:	461a      	mov	r2, r3
 80047d8:	2380      	movs	r3, #128	; 0x80
 80047da:	6093      	str	r3, [r2, #8]
}
 80047dc:	e172      	b.n	8004ac4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f4:	d11b      	bne.n	800482e <HCD_HC_OUT_IRQHandler+0x366>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	212c      	movs	r1, #44	; 0x2c
 80047fc:	fb01 f303 	mul.w	r3, r1, r3
 8004800:	4413      	add	r3, r2
 8004802:	3361      	adds	r3, #97	; 0x61
 8004804:	2208      	movs	r2, #8
 8004806:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	b2d2      	uxtb	r2, r2
 8004810:	4611      	mov	r1, r2
 8004812:	4618      	mov	r0, r3
 8004814:	f006 fa9d 	bl	800ad52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	4413      	add	r3, r2
 8004820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004824:	461a      	mov	r2, r3
 8004826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800482a:	6093      	str	r3, [r2, #8]
}
 800482c:	e14a      	b.n	8004ac4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	4413      	add	r3, r2
 8004836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b02      	cmp	r3, #2
 8004842:	f040 813f 	bne.w	8004ac4 <HCD_HC_OUT_IRQHandler+0x5fc>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	212c      	movs	r1, #44	; 0x2c
 800484c:	fb01 f303 	mul.w	r3, r1, r3
 8004850:	4413      	add	r3, r2
 8004852:	3361      	adds	r3, #97	; 0x61
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d17d      	bne.n	8004956 <HCD_HC_OUT_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	212c      	movs	r1, #44	; 0x2c
 8004860:	fb01 f303 	mul.w	r3, r1, r3
 8004864:	4413      	add	r3, r2
 8004866:	3360      	adds	r3, #96	; 0x60
 8004868:	2201      	movs	r2, #1
 800486a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	212c      	movs	r1, #44	; 0x2c
 8004872:	fb01 f303 	mul.w	r3, r1, r3
 8004876:	4413      	add	r3, r2
 8004878:	333f      	adds	r3, #63	; 0x3f
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b02      	cmp	r3, #2
 800487e:	d00a      	beq.n	8004896 <HCD_HC_OUT_IRQHandler+0x3ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	212c      	movs	r1, #44	; 0x2c
 8004886:	fb01 f303 	mul.w	r3, r1, r3
 800488a:	4413      	add	r3, r2
 800488c:	333f      	adds	r3, #63	; 0x3f
 800488e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004890:	2b03      	cmp	r3, #3
 8004892:	f040 8100 	bne.w	8004a96 <HCD_HC_OUT_IRQHandler+0x5ce>
        if (hhcd->Init.dma_enable == 0U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d113      	bne.n	80048c6 <HCD_HC_OUT_IRQHandler+0x3fe>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	212c      	movs	r1, #44	; 0x2c
 80048a4:	fb01 f303 	mul.w	r3, r1, r3
 80048a8:	4413      	add	r3, r2
 80048aa:	3355      	adds	r3, #85	; 0x55
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	f083 0301 	eor.w	r3, r3, #1
 80048b2:	b2d8      	uxtb	r0, r3
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	212c      	movs	r1, #44	; 0x2c
 80048ba:	fb01 f303 	mul.w	r3, r1, r3
 80048be:	4413      	add	r3, r2
 80048c0:	3355      	adds	r3, #85	; 0x55
 80048c2:	4602      	mov	r2, r0
 80048c4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	f040 80e3 	bne.w	8004a96 <HCD_HC_OUT_IRQHandler+0x5ce>
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	212c      	movs	r1, #44	; 0x2c
 80048d6:	fb01 f303 	mul.w	r3, r1, r3
 80048da:	4413      	add	r3, r2
 80048dc:	334c      	adds	r3, #76	; 0x4c
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 80d8 	beq.w	8004a96 <HCD_HC_OUT_IRQHandler+0x5ce>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	212c      	movs	r1, #44	; 0x2c
 80048ec:	fb01 f303 	mul.w	r3, r1, r3
 80048f0:	4413      	add	r3, r2
 80048f2:	334c      	adds	r3, #76	; 0x4c
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	202c      	movs	r0, #44	; 0x2c
 80048fc:	fb00 f202 	mul.w	r2, r0, r2
 8004900:	440a      	add	r2, r1
 8004902:	3240      	adds	r2, #64	; 0x40
 8004904:	8812      	ldrh	r2, [r2, #0]
 8004906:	4413      	add	r3, r2
 8004908:	3b01      	subs	r3, #1
 800490a:	6879      	ldr	r1, [r7, #4]
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	202c      	movs	r0, #44	; 0x2c
 8004910:	fb00 f202 	mul.w	r2, r0, r2
 8004914:	440a      	add	r2, r1
 8004916:	3240      	adds	r2, #64	; 0x40
 8004918:	8812      	ldrh	r2, [r2, #0]
 800491a:	fbb3 f3f2 	udiv	r3, r3, r2
 800491e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 80b5 	beq.w	8004a96 <HCD_HC_OUT_IRQHandler+0x5ce>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	212c      	movs	r1, #44	; 0x2c
 8004932:	fb01 f303 	mul.w	r3, r1, r3
 8004936:	4413      	add	r3, r2
 8004938:	3355      	adds	r3, #85	; 0x55
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	f083 0301 	eor.w	r3, r3, #1
 8004940:	b2d8      	uxtb	r0, r3
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	212c      	movs	r1, #44	; 0x2c
 8004948:	fb01 f303 	mul.w	r3, r1, r3
 800494c:	4413      	add	r3, r2
 800494e:	3355      	adds	r3, #85	; 0x55
 8004950:	4602      	mov	r2, r0
 8004952:	701a      	strb	r2, [r3, #0]
 8004954:	e09f      	b.n	8004a96 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	212c      	movs	r1, #44	; 0x2c
 800495c:	fb01 f303 	mul.w	r3, r1, r3
 8004960:	4413      	add	r3, r2
 8004962:	3361      	adds	r3, #97	; 0x61
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b03      	cmp	r3, #3
 8004968:	d109      	bne.n	800497e <HCD_HC_OUT_IRQHandler+0x4b6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	212c      	movs	r1, #44	; 0x2c
 8004970:	fb01 f303 	mul.w	r3, r1, r3
 8004974:	4413      	add	r3, r2
 8004976:	3360      	adds	r3, #96	; 0x60
 8004978:	2202      	movs	r2, #2
 800497a:	701a      	strb	r2, [r3, #0]
 800497c:	e08b      	b.n	8004a96 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	212c      	movs	r1, #44	; 0x2c
 8004984:	fb01 f303 	mul.w	r3, r1, r3
 8004988:	4413      	add	r3, r2
 800498a:	3361      	adds	r3, #97	; 0x61
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b04      	cmp	r3, #4
 8004990:	d109      	bne.n	80049a6 <HCD_HC_OUT_IRQHandler+0x4de>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	212c      	movs	r1, #44	; 0x2c
 8004998:	fb01 f303 	mul.w	r3, r1, r3
 800499c:	4413      	add	r3, r2
 800499e:	3360      	adds	r3, #96	; 0x60
 80049a0:	2202      	movs	r2, #2
 80049a2:	701a      	strb	r2, [r3, #0]
 80049a4:	e077      	b.n	8004a96 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	212c      	movs	r1, #44	; 0x2c
 80049ac:	fb01 f303 	mul.w	r3, r1, r3
 80049b0:	4413      	add	r3, r2
 80049b2:	3361      	adds	r3, #97	; 0x61
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b05      	cmp	r3, #5
 80049b8:	d109      	bne.n	80049ce <HCD_HC_OUT_IRQHandler+0x506>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	212c      	movs	r1, #44	; 0x2c
 80049c0:	fb01 f303 	mul.w	r3, r1, r3
 80049c4:	4413      	add	r3, r2
 80049c6:	3360      	adds	r3, #96	; 0x60
 80049c8:	2205      	movs	r2, #5
 80049ca:	701a      	strb	r2, [r3, #0]
 80049cc:	e063      	b.n	8004a96 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	212c      	movs	r1, #44	; 0x2c
 80049d4:	fb01 f303 	mul.w	r3, r1, r3
 80049d8:	4413      	add	r3, r2
 80049da:	3361      	adds	r3, #97	; 0x61
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b06      	cmp	r3, #6
 80049e0:	d009      	beq.n	80049f6 <HCD_HC_OUT_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	212c      	movs	r1, #44	; 0x2c
 80049e8:	fb01 f303 	mul.w	r3, r1, r3
 80049ec:	4413      	add	r3, r2
 80049ee:	3361      	adds	r3, #97	; 0x61
 80049f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d14f      	bne.n	8004a96 <HCD_HC_OUT_IRQHandler+0x5ce>
      hhcd->hc[ch_num].ErrCnt++;
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	212c      	movs	r1, #44	; 0x2c
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	4413      	add	r3, r2
 8004a02:	335c      	adds	r3, #92	; 0x5c
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	202c      	movs	r0, #44	; 0x2c
 8004a0e:	fb00 f303 	mul.w	r3, r0, r3
 8004a12:	440b      	add	r3, r1
 8004a14:	335c      	adds	r3, #92	; 0x5c
 8004a16:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	212c      	movs	r1, #44	; 0x2c
 8004a1e:	fb01 f303 	mul.w	r3, r1, r3
 8004a22:	4413      	add	r3, r2
 8004a24:	335c      	adds	r3, #92	; 0x5c
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d912      	bls.n	8004a52 <HCD_HC_OUT_IRQHandler+0x58a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	212c      	movs	r1, #44	; 0x2c
 8004a32:	fb01 f303 	mul.w	r3, r1, r3
 8004a36:	4413      	add	r3, r2
 8004a38:	335c      	adds	r3, #92	; 0x5c
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	212c      	movs	r1, #44	; 0x2c
 8004a44:	fb01 f303 	mul.w	r3, r1, r3
 8004a48:	4413      	add	r3, r2
 8004a4a:	3360      	adds	r3, #96	; 0x60
 8004a4c:	2204      	movs	r2, #4
 8004a4e:	701a      	strb	r2, [r3, #0]
 8004a50:	e021      	b.n	8004a96 <HCD_HC_OUT_IRQHandler+0x5ce>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	212c      	movs	r1, #44	; 0x2c
 8004a58:	fb01 f303 	mul.w	r3, r1, r3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	3360      	adds	r3, #96	; 0x60
 8004a60:	2202      	movs	r2, #2
 8004a62:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a7a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a82:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a90:	461a      	mov	r2, r3
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	b2d9      	uxtb	r1, r3
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	202c      	movs	r0, #44	; 0x2c
 8004ab2:	fb00 f303 	mul.w	r3, r0, r3
 8004ab6:	4413      	add	r3, r2
 8004ab8:	3360      	adds	r3, #96	; 0x60
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff f9c1 	bl	8003e46 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004ac4:	bf00      	nop
 8004ac6:	3720      	adds	r7, #32
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08a      	sub	sp, #40	; 0x28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	0c5b      	lsrs	r3, r3, #17
 8004af2:	f003 030f 	and.w	r3, r3, #15
 8004af6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	091b      	lsrs	r3, r3, #4
 8004afc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b00:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d004      	beq.n	8004b12 <HCD_RXQLVL_IRQHandler+0x46>
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2b05      	cmp	r3, #5
 8004b0c:	f000 80a9 	beq.w	8004c62 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004b10:	e0aa      	b.n	8004c68 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80a6 	beq.w	8004c66 <HCD_RXQLVL_IRQHandler+0x19a>
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	212c      	movs	r1, #44	; 0x2c
 8004b20:	fb01 f303 	mul.w	r3, r1, r3
 8004b24:	4413      	add	r3, r2
 8004b26:	3344      	adds	r3, #68	; 0x44
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 809b 	beq.w	8004c66 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	212c      	movs	r1, #44	; 0x2c
 8004b36:	fb01 f303 	mul.w	r3, r1, r3
 8004b3a:	4413      	add	r3, r2
 8004b3c:	3350      	adds	r3, #80	; 0x50
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	441a      	add	r2, r3
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	202c      	movs	r0, #44	; 0x2c
 8004b4a:	fb00 f303 	mul.w	r3, r0, r3
 8004b4e:	440b      	add	r3, r1
 8004b50:	334c      	adds	r3, #76	; 0x4c
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d87a      	bhi.n	8004c4e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6818      	ldr	r0, [r3, #0]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	212c      	movs	r1, #44	; 0x2c
 8004b62:	fb01 f303 	mul.w	r3, r1, r3
 8004b66:	4413      	add	r3, r2
 8004b68:	3344      	adds	r3, #68	; 0x44
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	b292      	uxth	r2, r2
 8004b70:	4619      	mov	r1, r3
 8004b72:	f005 ff73 	bl	800aa5c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	212c      	movs	r1, #44	; 0x2c
 8004b7c:	fb01 f303 	mul.w	r3, r1, r3
 8004b80:	4413      	add	r3, r2
 8004b82:	3344      	adds	r3, #68	; 0x44
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	441a      	add	r2, r3
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	202c      	movs	r0, #44	; 0x2c
 8004b90:	fb00 f303 	mul.w	r3, r0, r3
 8004b94:	440b      	add	r3, r1
 8004b96:	3344      	adds	r3, #68	; 0x44
 8004b98:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	212c      	movs	r1, #44	; 0x2c
 8004ba0:	fb01 f303 	mul.w	r3, r1, r3
 8004ba4:	4413      	add	r3, r2
 8004ba6:	3350      	adds	r3, #80	; 0x50
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	441a      	add	r2, r3
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	202c      	movs	r0, #44	; 0x2c
 8004bb4:	fb00 f303 	mul.w	r3, r0, r3
 8004bb8:	440b      	add	r3, r1
 8004bba:	3350      	adds	r3, #80	; 0x50
 8004bbc:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	0cdb      	lsrs	r3, r3, #19
 8004bce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bd2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	212c      	movs	r1, #44	; 0x2c
 8004bda:	fb01 f303 	mul.w	r3, r1, r3
 8004bde:	4413      	add	r3, r2
 8004be0:	3340      	adds	r3, #64	; 0x40
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	461a      	mov	r2, r3
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d13c      	bne.n	8004c66 <HCD_RXQLVL_IRQHandler+0x19a>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d039      	beq.n	8004c66 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c08:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c10:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c1e:	461a      	mov	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	212c      	movs	r1, #44	; 0x2c
 8004c2a:	fb01 f303 	mul.w	r3, r1, r3
 8004c2e:	4413      	add	r3, r2
 8004c30:	3354      	adds	r3, #84	; 0x54
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	f083 0301 	eor.w	r3, r3, #1
 8004c38:	b2d8      	uxtb	r0, r3
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	212c      	movs	r1, #44	; 0x2c
 8004c40:	fb01 f303 	mul.w	r3, r1, r3
 8004c44:	4413      	add	r3, r2
 8004c46:	3354      	adds	r3, #84	; 0x54
 8004c48:	4602      	mov	r2, r0
 8004c4a:	701a      	strb	r2, [r3, #0]
      break;
 8004c4c:	e00b      	b.n	8004c66 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	212c      	movs	r1, #44	; 0x2c
 8004c54:	fb01 f303 	mul.w	r3, r1, r3
 8004c58:	4413      	add	r3, r2
 8004c5a:	3360      	adds	r3, #96	; 0x60
 8004c5c:	2204      	movs	r2, #4
 8004c5e:	701a      	strb	r2, [r3, #0]
      break;
 8004c60:	e001      	b.n	8004c66 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004c62:	bf00      	nop
 8004c64:	e000      	b.n	8004c68 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004c66:	bf00      	nop
  }
}
 8004c68:	bf00      	nop
 8004c6a:	3728      	adds	r7, #40	; 0x28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c9c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d10b      	bne.n	8004cc0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d102      	bne.n	8004cb8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7ff f89f 	bl	8003df6 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f043 0302 	orr.w	r3, r3, #2
 8004cbe:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d132      	bne.n	8004d30 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f043 0308 	orr.w	r3, r3, #8
 8004cd0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d126      	bne.n	8004d2a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d113      	bne.n	8004d0c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004cea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cee:	d106      	bne.n	8004cfe <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2102      	movs	r1, #2
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f005 ffe0 	bl	800acbc <USB_InitFSLSPClkSel>
 8004cfc:	e011      	b.n	8004d22 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2101      	movs	r1, #1
 8004d04:	4618      	mov	r0, r3
 8004d06:	f005 ffd9 	bl	800acbc <USB_InitFSLSPClkSel>
 8004d0a:	e00a      	b.n	8004d22 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d106      	bne.n	8004d22 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004d20:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7ff f87b 	bl	8003e1e <HAL_HCD_PortEnabled_Callback>
 8004d28:	e002      	b.n	8004d30 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff f881 	bl	8003e32 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	d103      	bne.n	8004d42 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f043 0320 	orr.w	r3, r3, #32
 8004d40:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d48:	461a      	mov	r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	6013      	str	r3, [r2, #0]
}
 8004d4e:	bf00      	nop
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e081      	b.n	8004e6c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d106      	bne.n	8004d82 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7fc facb 	bl	8001318 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2224      	movs	r2, #36	; 0x24
 8004d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0201 	bic.w	r2, r2, #1
 8004d98:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004da6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689a      	ldr	r2, [r3, #8]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004db6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d107      	bne.n	8004dd0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dcc:	609a      	str	r2, [r3, #8]
 8004dce:	e006      	b.n	8004dde <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004ddc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d104      	bne.n	8004df0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e02:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e12:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69d9      	ldr	r1, [r3, #28]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1a      	ldr	r2, [r3, #32]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 0201 	orr.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b20      	cmp	r3, #32
 8004e88:	d138      	bne.n	8004efc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d101      	bne.n	8004e98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e94:	2302      	movs	r3, #2
 8004e96:	e032      	b.n	8004efe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2224      	movs	r2, #36	; 0x24
 8004ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0201 	bic.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ec6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6819      	ldr	r1, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0201 	orr.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	e000      	b.n	8004efe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004efc:	2302      	movs	r3, #2
  }
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b20      	cmp	r3, #32
 8004f1e:	d139      	bne.n	8004f94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d101      	bne.n	8004f2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e033      	b.n	8004f96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2224      	movs	r2, #36	; 0x24
 8004f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0201 	bic.w	r2, r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	021b      	lsls	r3, r3, #8
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0201 	orr.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	e000      	b.n	8004f96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f94:	2302      	movs	r3, #2
  }
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
	...

08004fa4 <HAL_NOR_Init>:
  * @param  ExtTiming pointer to NOR extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing,
                               FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  uint32_t deviceaddress;
  HAL_StatusTypeDef status = HAL_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	74fb      	strb	r3, [r7, #19]

  /* Check the NOR handle parameter */
  if (hnor == NULL)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_NOR_Init+0x1a>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e090      	b.n	80050e0 <HAL_NOR_Init+0x13c>
  }

  if (hnor->State == HAL_NOR_STATE_RESET)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <HAL_NOR_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f7fc fd52 	bl	8001a7c <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }

  /* Initialize NOR control Interface */
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3308      	adds	r3, #8
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	f004 fe98 	bl	8009d18 <FMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	f004 ff0c 	bl	8009e10 <FMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6858      	ldr	r0, [r3, #4]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	f004 ff53 	bl	8009eb0 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	6892      	ldr	r2, [r2, #8]
 8005012:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	6892      	ldr	r2, [r2, #8]
 800501e:	f041 0101 	orr.w	r1, r1, #1
 8005022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d103      	bne.n	8005036 <HAL_NOR_Init+0x92>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800502e:	4b2e      	ldr	r3, [pc, #184]	; (80050e8 <HAL_NOR_Init+0x144>)
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	e002      	b.n	800503c <HAL_NOR_Init+0x98>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 8005036:	4b2c      	ldr	r3, [pc, #176]	; (80050e8 <HAL_NOR_Init+0x144>)
 8005038:	2201      	movs	r2, #1
 800503a:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Select the NOR device address */
  if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d103      	bne.n	8005054 <HAL_NOR_Init+0xb0>
  {
    deviceaddress = NOR_MEMORY_ADRESS1;
 800504c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	e012      	b.n	800507a <HAL_NOR_Init+0xd6>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	2b02      	cmp	r3, #2
 800505a:	d103      	bne.n	8005064 <HAL_NOR_Init+0xc0>
  {
    deviceaddress = NOR_MEMORY_ADRESS2;
 800505c:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	e00a      	b.n	800507a <HAL_NOR_Init+0xd6>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b04      	cmp	r3, #4
 800506a:	d103      	bne.n	8005074 <HAL_NOR_Init+0xd0>
  {
    deviceaddress = NOR_MEMORY_ADRESS3;
 800506c:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8005070:	617b      	str	r3, [r7, #20]
 8005072:	e002      	b.n	800507a <HAL_NOR_Init+0xd6>
  }
  else /* FMC_NORSRAM_BANK4 */
  {
    deviceaddress = NOR_MEMORY_ADRESS4;
 8005074:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8005078:	617b      	str	r3, [r7, #20]
  }

  if (hnor->Init.WriteOperation == FMC_WRITE_OPERATION_DISABLE)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10c      	bne.n	800509c <HAL_NOR_Init+0xf8>
  {
    (void)FMC_NORSRAM_WriteOperation_Disable(hnor->Instance, hnor->Init.NSBank);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	4619      	mov	r1, r3
 800508c:	4610      	mov	r0, r2
 800508e:	f004 ff47 	bl	8009f20 <FMC_NORSRAM_WriteOperation_Disable>

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_PROTECTED;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2204      	movs	r2, #4
 8005096:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800509a:	e020      	b.n	80050de <HAL_NOR_Init+0x13a>
  }
  else
  {
    /* Get the value of the command set */
    NOR_WRITE(NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_CMD_ADDRESS_FIRST_CFI), NOR_CMD_DATA_CFI);
 800509c:	4b12      	ldr	r3, [pc, #72]	; (80050e8 <HAL_NOR_Init+0x144>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d102      	bne.n	80050aa <HAL_NOR_Init+0x106>
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	33aa      	adds	r3, #170	; 0xaa
 80050a8:	e001      	b.n	80050ae <HAL_NOR_Init+0x10a>
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	3355      	adds	r3, #85	; 0x55
 80050ae:	2298      	movs	r2, #152	; 0x98
 80050b0:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80050b2:	f3bf 8f4f 	dsb	sy
}
 80050b6:	bf00      	nop
    hnor->CommandSet = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_ADDRESS_COMMAND_SET);
 80050b8:	4b0b      	ldr	r3, [pc, #44]	; (80050e8 <HAL_NOR_Init+0x144>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d102      	bne.n	80050c6 <HAL_NOR_Init+0x122>
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	3326      	adds	r3, #38	; 0x26
 80050c4:	e001      	b.n	80050ca <HAL_NOR_Init+0x126>
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	3313      	adds	r3, #19
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	461a      	mov	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	64da      	str	r2, [r3, #76]	; 0x4c

    status = HAL_NOR_ReturnToReadMode(hnor);
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 f809 	bl	80050ec <HAL_NOR_ReturnToReadMode>
 80050da:	4603      	mov	r3, r0
 80050dc:	74fb      	strb	r3, [r7, #19]
  }

  return status;
 80050de:	7cfb      	ldrb	r3, [r7, #19]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3718      	adds	r7, #24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	200008fc 	.word	0x200008fc

080050ec <HAL_NOR_ReturnToReadMode>:
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_ReturnToReadMode(NOR_HandleTypeDef *hnor)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;
  HAL_NOR_StateTypeDef state;
  HAL_StatusTypeDef status = HAL_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	72fb      	strb	r3, [r7, #11]

  /* Check the NOR controller state */
  state = hnor->State;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80050fe:	72bb      	strb	r3, [r7, #10]
  if (state == HAL_NOR_STATE_BUSY)
 8005100:	7abb      	ldrb	r3, [r7, #10]
 8005102:	2b02      	cmp	r3, #2
 8005104:	d101      	bne.n	800510a <HAL_NOR_ReturnToReadMode+0x1e>
  {
    return HAL_BUSY;
 8005106:	2302      	movs	r3, #2
 8005108:	e052      	b.n	80051b0 <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_PROTECTED)
 800510a:	7abb      	ldrb	r3, [r7, #10]
 800510c:	2b04      	cmp	r3, #4
 800510e:	d101      	bne.n	8005114 <HAL_NOR_ReturnToReadMode+0x28>
  {
    return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e04d      	b.n	80051b0 <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_READY)
 8005114:	7abb      	ldrb	r3, [r7, #10]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d149      	bne.n	80051ae <HAL_NOR_ReturnToReadMode+0xc2>
  {
    /* Process Locked */
    __HAL_LOCK(hnor);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <HAL_NOR_ReturnToReadMode+0x3c>
 8005124:	2302      	movs	r3, #2
 8005126:	e043      	b.n	80051b0 <HAL_NOR_ReturnToReadMode+0xc4>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Select the NOR device address */
    if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d103      	bne.n	8005148 <HAL_NOR_ReturnToReadMode+0x5c>
    {
      deviceaddress = NOR_MEMORY_ADRESS1;
 8005140:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	e012      	b.n	800516e <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d103      	bne.n	8005158 <HAL_NOR_ReturnToReadMode+0x6c>
    {
      deviceaddress = NOR_MEMORY_ADRESS2;
 8005150:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	e00a      	b.n	800516e <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	2b04      	cmp	r3, #4
 800515e:	d103      	bne.n	8005168 <HAL_NOR_ReturnToReadMode+0x7c>
    {
      deviceaddress = NOR_MEMORY_ADRESS3;
 8005160:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	e002      	b.n	800516e <HAL_NOR_ReturnToReadMode+0x82>
    }
    else /* FMC_NORSRAM_BANK4 */
    {
      deviceaddress = NOR_MEMORY_ADRESS4;
 8005168:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 800516c:	60fb      	str	r3, [r7, #12]
    }

    if (hnor->CommandSet == NOR_AMD_FUJITSU_COMMAND_SET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005172:	2b02      	cmp	r3, #2
 8005174:	d105      	bne.n	8005182 <HAL_NOR_ReturnToReadMode+0x96>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_DATA_READ_RESET);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	22f0      	movs	r2, #240	; 0xf0
 800517a:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800517c:	f3bf 8f4f 	dsb	sy
}
 8005180:	e00b      	b.n	800519a <HAL_NOR_ReturnToReadMode+0xae>
    }
    else if (hnor->CommandSet == NOR_INTEL_SHARP_EXT_COMMAND_SET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005186:	2b01      	cmp	r3, #1
 8005188:	d105      	bne.n	8005196 <HAL_NOR_ReturnToReadMode+0xaa>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_READ_ARRAY);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	22ff      	movs	r2, #255	; 0xff
 800518e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005190:	f3bf 8f4f 	dsb	sy
}
 8005194:	e001      	b.n	800519a <HAL_NOR_ReturnToReadMode+0xae>
    }
    else
    {
      /* Primary command set not supported by the driver */
      status = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	72fb      	strb	r3, [r7, #11]
    }

    /* Check the NOR controller state */
    hnor->State = state;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	7aba      	ldrb	r2, [r7, #10]
 800519e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process unlocked */
    __HAL_UNLOCK(hnor);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  else
  {
    return HAL_ERROR;
  }

  return status;
 80051aa:	7afb      	ldrb	r3, [r7, #11]
 80051ac:	e000      	b.n	80051b0 <HAL_NOR_ReturnToReadMode+0xc4>
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e0c3      	b.n	800535a <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b05      	cmp	r3, #5
 80051dc:	d101      	bne.n	80051e2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e0bb      	b.n	800535a <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d101      	bne.n	80051f2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e0b3      	b.n	800535a <HAL_OPAMP_Init+0x19e>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d103      	bne.n	800520e <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7fc fa2c 	bl	800166c <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005222:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	2b08      	cmp	r3, #8
 800522a:	d11b      	bne.n	8005264 <HAL_OPAMP_Init+0xa8>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8005236:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6891      	ldr	r1, [r2, #8]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	68d2      	ldr	r2, [r2, #12]
 8005242:	4311      	orrs	r1, r2
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6992      	ldr	r2, [r2, #24]
 8005248:	4311      	orrs	r1, r2
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6912      	ldr	r2, [r2, #16]
 800524e:	4311      	orrs	r1, r2
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6952      	ldr	r2, [r2, #20]
 8005254:	4311      	orrs	r1, r2
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	69d2      	ldr	r2, [r2, #28]
 800525a:	4311      	orrs	r1, r2
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6812      	ldr	r2, [r2, #0]
 8005260:	430b      	orrs	r3, r1
 8005262:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	2b0c      	cmp	r3, #12
 800526a:	d115      	bne.n	8005298 <HAL_OPAMP_Init+0xdc>
    {
    /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 8005276:	f023 030e 	bic.w	r3, r3, #14
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6891      	ldr	r1, [r2, #8]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	68d2      	ldr	r2, [r2, #12]
 8005282:	4311      	orrs	r1, r2
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6952      	ldr	r2, [r2, #20]
 8005288:	4311      	orrs	r1, r2
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	69d2      	ldr	r2, [r2, #28]
 800528e:	4311      	orrs	r1, r2
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6812      	ldr	r2, [r2, #0]
 8005294:	430b      	orrs	r3, r1
 8005296:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.Mode | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d118      	bne.n	80052d2 <HAL_OPAMP_Init+0x116>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 80052aa:	f023 030e 	bic.w	r3, r3, #14
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6891      	ldr	r1, [r2, #8]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	68d2      	ldr	r2, [r2, #12]
 80052b6:	4311      	orrs	r1, r2
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6912      	ldr	r2, [r2, #16]
 80052bc:	4311      	orrs	r1, r2
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6952      	ldr	r2, [r2, #20]
 80052c2:	4311      	orrs	r1, r2
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	69d2      	ldr	r2, [r2, #28]
 80052c8:	4311      	orrs	r1, r2
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	430b      	orrs	r3, r1
 80052d0:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052da:	d12a      	bne.n	8005332 <HAL_OPAMP_Init+0x176>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d013      	beq.n	800530c <HAL_OPAMP_Init+0x150>
      {
        /* OPAMP_POWERMODE_NORMALPOWER */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80052fc:	f023 031f 	bic.w	r3, r3, #31
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6812      	ldr	r2, [r2, #0]
 8005304:	68b9      	ldr	r1, [r7, #8]
 8005306:	430b      	orrs	r3, r1
 8005308:	6053      	str	r3, [r2, #4]
 800530a:	e012      	b.n	8005332 <HAL_OPAMP_Init+0x176>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005310:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNLowPower));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8005316:	4313      	orrs	r3, r2
 8005318:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8005324:	f023 031f 	bic.w	r3, r3, #31
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6812      	ldr	r2, [r2, #0]
 800532c:	68b9      	ldr	r1, [r7, #8]
 800532e:	430b      	orrs	r3, r1
 8005330:	6093      	str	r3, [r2, #8]
    }

    /* Configure the power supply range */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP1_CSR_OPARANGE is used for both OPAMPs */
    MODIFY_REG(OPAMP1->CSR, OPAMP1_CSR_OPARANGE, hopamp->Init.PowerSupplyRange);
 8005332:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <HAL_OPAMP_Init+0x1a8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	4909      	ldr	r1, [pc, #36]	; (8005364 <HAL_OPAMP_Init+0x1a8>)
 8005340:	4313      	orrs	r3, r2
 8005342:	600b      	str	r3, [r1, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d103      	bne.n	8005358 <HAL_OPAMP_Init+0x19c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8005358:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	40007800 	.word	0x40007800

08005368 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005368:	b480      	push	{r7}
 800536a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800536c:	4b04      	ldr	r3, [pc, #16]	; (8005380 <HAL_PWREx_GetVoltageRange+0x18>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005374:	4618      	mov	r0, r3
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40007000 	.word	0x40007000

08005384 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005392:	d130      	bne.n	80053f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005394:	4b23      	ldr	r3, [pc, #140]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800539c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053a0:	d038      	beq.n	8005414 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053a2:	4b20      	ldr	r3, [pc, #128]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80053aa:	4a1e      	ldr	r2, [pc, #120]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053b2:	4b1d      	ldr	r3, [pc, #116]	; (8005428 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2232      	movs	r2, #50	; 0x32
 80053b8:	fb02 f303 	mul.w	r3, r2, r3
 80053bc:	4a1b      	ldr	r2, [pc, #108]	; (800542c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80053be:	fba2 2303 	umull	r2, r3, r2, r3
 80053c2:	0c9b      	lsrs	r3, r3, #18
 80053c4:	3301      	adds	r3, #1
 80053c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053c8:	e002      	b.n	80053d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3b01      	subs	r3, #1
 80053ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053d0:	4b14      	ldr	r3, [pc, #80]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053dc:	d102      	bne.n	80053e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1f2      	bne.n	80053ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053e4:	4b0f      	ldr	r3, [pc, #60]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f0:	d110      	bne.n	8005414 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e00f      	b.n	8005416 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80053f6:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005402:	d007      	beq.n	8005414 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005404:	4b07      	ldr	r3, [pc, #28]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800540c:	4a05      	ldr	r2, [pc, #20]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800540e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005412:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	40007000 	.word	0x40007000
 8005428:	20000000 	.word	0x20000000
 800542c:	431bde83 	.word	0x431bde83

08005430 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <HAL_PWREx_EnableVddUSB+0x1c>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	4a04      	ldr	r2, [pc, #16]	; (800544c <HAL_PWREx_EnableVddUSB+0x1c>)
 800543a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800543e:	6053      	str	r3, [r2, #4]
}
 8005440:	bf00      	nop
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40007000 	.word	0x40007000

08005450 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005454:	4b05      	ldr	r3, [pc, #20]	; (800546c <HAL_PWREx_EnableVddIO2+0x1c>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	4a04      	ldr	r2, [pc, #16]	; (800546c <HAL_PWREx_EnableVddIO2+0x1c>)
 800545a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800545e:	6053      	str	r3, [r2, #4]
}
 8005460:	bf00      	nop
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	40007000 	.word	0x40007000

08005470 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e3ca      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005482:	4b97      	ldr	r3, [pc, #604]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 030c 	and.w	r3, r3, #12
 800548a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800548c:	4b94      	ldr	r3, [pc, #592]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f003 0303 	and.w	r3, r3, #3
 8005494:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0310 	and.w	r3, r3, #16
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 80e4 	beq.w	800566c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d007      	beq.n	80054ba <HAL_RCC_OscConfig+0x4a>
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	2b0c      	cmp	r3, #12
 80054ae:	f040 808b 	bne.w	80055c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	f040 8087 	bne.w	80055c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054ba:	4b89      	ldr	r3, [pc, #548]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d005      	beq.n	80054d2 <HAL_RCC_OscConfig+0x62>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e3a2      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1a      	ldr	r2, [r3, #32]
 80054d6:	4b82      	ldr	r3, [pc, #520]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d004      	beq.n	80054ec <HAL_RCC_OscConfig+0x7c>
 80054e2:	4b7f      	ldr	r3, [pc, #508]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054ea:	e005      	b.n	80054f8 <HAL_RCC_OscConfig+0x88>
 80054ec:	4b7c      	ldr	r3, [pc, #496]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 80054ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054f2:	091b      	lsrs	r3, r3, #4
 80054f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d223      	bcs.n	8005544 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fd87 	bl	8006014 <RCC_SetFlashLatencyFromMSIRange>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e383      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005510:	4b73      	ldr	r3, [pc, #460]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a72      	ldr	r2, [pc, #456]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 8005516:	f043 0308 	orr.w	r3, r3, #8
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	4b70      	ldr	r3, [pc, #448]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	496d      	ldr	r1, [pc, #436]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 800552a:	4313      	orrs	r3, r2
 800552c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800552e:	4b6c      	ldr	r3, [pc, #432]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	021b      	lsls	r3, r3, #8
 800553c:	4968      	ldr	r1, [pc, #416]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 800553e:	4313      	orrs	r3, r2
 8005540:	604b      	str	r3, [r1, #4]
 8005542:	e025      	b.n	8005590 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005544:	4b66      	ldr	r3, [pc, #408]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a65      	ldr	r2, [pc, #404]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 800554a:	f043 0308 	orr.w	r3, r3, #8
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	4b63      	ldr	r3, [pc, #396]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	4960      	ldr	r1, [pc, #384]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 800555e:	4313      	orrs	r3, r2
 8005560:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005562:	4b5f      	ldr	r3, [pc, #380]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	021b      	lsls	r3, r3, #8
 8005570:	495b      	ldr	r1, [pc, #364]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 8005572:	4313      	orrs	r3, r2
 8005574:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d109      	bne.n	8005590 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fd47 	bl	8006014 <RCC_SetFlashLatencyFromMSIRange>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e343      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005590:	f000 fc4a 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8005594:	4602      	mov	r2, r0
 8005596:	4b52      	ldr	r3, [pc, #328]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	091b      	lsrs	r3, r3, #4
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	4950      	ldr	r1, [pc, #320]	; (80056e4 <HAL_RCC_OscConfig+0x274>)
 80055a2:	5ccb      	ldrb	r3, [r1, r3]
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	fa22 f303 	lsr.w	r3, r2, r3
 80055ac:	4a4e      	ldr	r2, [pc, #312]	; (80056e8 <HAL_RCC_OscConfig+0x278>)
 80055ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80055b0:	4b4e      	ldr	r3, [pc, #312]	; (80056ec <HAL_RCC_OscConfig+0x27c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fc fadf 	bl	8001b78 <HAL_InitTick>
 80055ba:	4603      	mov	r3, r0
 80055bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d052      	beq.n	800566a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
 80055c6:	e327      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d032      	beq.n	8005636 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80055d0:	4b43      	ldr	r3, [pc, #268]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a42      	ldr	r2, [pc, #264]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 80055d6:	f043 0301 	orr.w	r3, r3, #1
 80055da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055dc:	f7fc fbbe 	bl	8001d5c <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055e4:	f7fc fbba 	bl	8001d5c <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e310      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055f6:	4b3a      	ldr	r3, [pc, #232]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0f0      	beq.n	80055e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005602:	4b37      	ldr	r3, [pc, #220]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a36      	ldr	r2, [pc, #216]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 8005608:	f043 0308 	orr.w	r3, r3, #8
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	4b34      	ldr	r3, [pc, #208]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	4931      	ldr	r1, [pc, #196]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 800561c:	4313      	orrs	r3, r2
 800561e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005620:	4b2f      	ldr	r3, [pc, #188]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	021b      	lsls	r3, r3, #8
 800562e:	492c      	ldr	r1, [pc, #176]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 8005630:	4313      	orrs	r3, r2
 8005632:	604b      	str	r3, [r1, #4]
 8005634:	e01a      	b.n	800566c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005636:	4b2a      	ldr	r3, [pc, #168]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a29      	ldr	r2, [pc, #164]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 800563c:	f023 0301 	bic.w	r3, r3, #1
 8005640:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005642:	f7fc fb8b 	bl	8001d5c <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005648:	e008      	b.n	800565c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800564a:	f7fc fb87 	bl	8001d5c <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e2dd      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800565c:	4b20      	ldr	r3, [pc, #128]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1f0      	bne.n	800564a <HAL_RCC_OscConfig+0x1da>
 8005668:	e000      	b.n	800566c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800566a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d074      	beq.n	8005762 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	2b08      	cmp	r3, #8
 800567c:	d005      	beq.n	800568a <HAL_RCC_OscConfig+0x21a>
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	2b0c      	cmp	r3, #12
 8005682:	d10e      	bne.n	80056a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	2b03      	cmp	r3, #3
 8005688:	d10b      	bne.n	80056a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800568a:	4b15      	ldr	r3, [pc, #84]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d064      	beq.n	8005760 <HAL_RCC_OscConfig+0x2f0>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d160      	bne.n	8005760 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e2ba      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056aa:	d106      	bne.n	80056ba <HAL_RCC_OscConfig+0x24a>
 80056ac:	4b0c      	ldr	r3, [pc, #48]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a0b      	ldr	r2, [pc, #44]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 80056b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	e026      	b.n	8005708 <HAL_RCC_OscConfig+0x298>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056c2:	d115      	bne.n	80056f0 <HAL_RCC_OscConfig+0x280>
 80056c4:	4b06      	ldr	r3, [pc, #24]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a05      	ldr	r2, [pc, #20]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 80056ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	4b03      	ldr	r3, [pc, #12]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a02      	ldr	r2, [pc, #8]	; (80056e0 <HAL_RCC_OscConfig+0x270>)
 80056d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056da:	6013      	str	r3, [r2, #0]
 80056dc:	e014      	b.n	8005708 <HAL_RCC_OscConfig+0x298>
 80056de:	bf00      	nop
 80056e0:	40021000 	.word	0x40021000
 80056e4:	0800db78 	.word	0x0800db78
 80056e8:	20000000 	.word	0x20000000
 80056ec:	20000004 	.word	0x20000004
 80056f0:	4ba0      	ldr	r3, [pc, #640]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a9f      	ldr	r2, [pc, #636]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 80056f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056fa:	6013      	str	r3, [r2, #0]
 80056fc:	4b9d      	ldr	r3, [pc, #628]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a9c      	ldr	r2, [pc, #624]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 8005702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d013      	beq.n	8005738 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005710:	f7fc fb24 	bl	8001d5c <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005718:	f7fc fb20 	bl	8001d5c <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b64      	cmp	r3, #100	; 0x64
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e276      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800572a:	4b92      	ldr	r3, [pc, #584]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0f0      	beq.n	8005718 <HAL_RCC_OscConfig+0x2a8>
 8005736:	e014      	b.n	8005762 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005738:	f7fc fb10 	bl	8001d5c <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005740:	f7fc fb0c 	bl	8001d5c <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b64      	cmp	r3, #100	; 0x64
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e262      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005752:	4b88      	ldr	r3, [pc, #544]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f0      	bne.n	8005740 <HAL_RCC_OscConfig+0x2d0>
 800575e:	e000      	b.n	8005762 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d060      	beq.n	8005830 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	2b04      	cmp	r3, #4
 8005772:	d005      	beq.n	8005780 <HAL_RCC_OscConfig+0x310>
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	2b0c      	cmp	r3, #12
 8005778:	d119      	bne.n	80057ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2b02      	cmp	r3, #2
 800577e:	d116      	bne.n	80057ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005780:	4b7c      	ldr	r3, [pc, #496]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005788:	2b00      	cmp	r3, #0
 800578a:	d005      	beq.n	8005798 <HAL_RCC_OscConfig+0x328>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e23f      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005798:	4b76      	ldr	r3, [pc, #472]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	061b      	lsls	r3, r3, #24
 80057a6:	4973      	ldr	r1, [pc, #460]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057ac:	e040      	b.n	8005830 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d023      	beq.n	80057fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057b6:	4b6f      	ldr	r3, [pc, #444]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a6e      	ldr	r2, [pc, #440]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 80057bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c2:	f7fc facb 	bl	8001d5c <HAL_GetTick>
 80057c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057c8:	e008      	b.n	80057dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ca:	f7fc fac7 	bl	8001d5c <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e21d      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057dc:	4b65      	ldr	r3, [pc, #404]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0f0      	beq.n	80057ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057e8:	4b62      	ldr	r3, [pc, #392]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	061b      	lsls	r3, r3, #24
 80057f6:	495f      	ldr	r1, [pc, #380]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	604b      	str	r3, [r1, #4]
 80057fc:	e018      	b.n	8005830 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057fe:	4b5d      	ldr	r3, [pc, #372]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a5c      	ldr	r2, [pc, #368]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 8005804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580a:	f7fc faa7 	bl	8001d5c <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005812:	f7fc faa3 	bl	8001d5c <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e1f9      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005824:	4b53      	ldr	r3, [pc, #332]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1f0      	bne.n	8005812 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0308 	and.w	r3, r3, #8
 8005838:	2b00      	cmp	r3, #0
 800583a:	d03c      	beq.n	80058b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d01c      	beq.n	800587e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005844:	4b4b      	ldr	r3, [pc, #300]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 8005846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800584a:	4a4a      	ldr	r2, [pc, #296]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 800584c:	f043 0301 	orr.w	r3, r3, #1
 8005850:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005854:	f7fc fa82 	bl	8001d5c <HAL_GetTick>
 8005858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800585a:	e008      	b.n	800586e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800585c:	f7fc fa7e 	bl	8001d5c <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e1d4      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800586e:	4b41      	ldr	r3, [pc, #260]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 8005870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0ef      	beq.n	800585c <HAL_RCC_OscConfig+0x3ec>
 800587c:	e01b      	b.n	80058b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800587e:	4b3d      	ldr	r3, [pc, #244]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 8005880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005884:	4a3b      	ldr	r2, [pc, #236]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 8005886:	f023 0301 	bic.w	r3, r3, #1
 800588a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800588e:	f7fc fa65 	bl	8001d5c <HAL_GetTick>
 8005892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005894:	e008      	b.n	80058a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005896:	f7fc fa61 	bl	8001d5c <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e1b7      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058a8:	4b32      	ldr	r3, [pc, #200]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 80058aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1ef      	bne.n	8005896 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0304 	and.w	r3, r3, #4
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f000 80a6 	beq.w	8005a10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058c4:	2300      	movs	r3, #0
 80058c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80058c8:	4b2a      	ldr	r3, [pc, #168]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 80058ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10d      	bne.n	80058f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058d4:	4b27      	ldr	r3, [pc, #156]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 80058d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d8:	4a26      	ldr	r2, [pc, #152]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 80058da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058de:	6593      	str	r3, [r2, #88]	; 0x58
 80058e0:	4b24      	ldr	r3, [pc, #144]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 80058e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e8:	60bb      	str	r3, [r7, #8]
 80058ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058ec:	2301      	movs	r3, #1
 80058ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058f0:	4b21      	ldr	r3, [pc, #132]	; (8005978 <HAL_RCC_OscConfig+0x508>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d118      	bne.n	800592e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058fc:	4b1e      	ldr	r3, [pc, #120]	; (8005978 <HAL_RCC_OscConfig+0x508>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a1d      	ldr	r2, [pc, #116]	; (8005978 <HAL_RCC_OscConfig+0x508>)
 8005902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005906:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005908:	f7fc fa28 	bl	8001d5c <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005910:	f7fc fa24 	bl	8001d5c <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e17a      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005922:	4b15      	ldr	r3, [pc, #84]	; (8005978 <HAL_RCC_OscConfig+0x508>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592a:	2b00      	cmp	r3, #0
 800592c:	d0f0      	beq.n	8005910 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d108      	bne.n	8005948 <HAL_RCC_OscConfig+0x4d8>
 8005936:	4b0f      	ldr	r3, [pc, #60]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 8005938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593c:	4a0d      	ldr	r2, [pc, #52]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 800593e:	f043 0301 	orr.w	r3, r3, #1
 8005942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005946:	e029      	b.n	800599c <HAL_RCC_OscConfig+0x52c>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	2b05      	cmp	r3, #5
 800594e:	d115      	bne.n	800597c <HAL_RCC_OscConfig+0x50c>
 8005950:	4b08      	ldr	r3, [pc, #32]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 8005952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005956:	4a07      	ldr	r2, [pc, #28]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 8005958:	f043 0304 	orr.w	r3, r3, #4
 800595c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005960:	4b04      	ldr	r3, [pc, #16]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 8005962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005966:	4a03      	ldr	r2, [pc, #12]	; (8005974 <HAL_RCC_OscConfig+0x504>)
 8005968:	f043 0301 	orr.w	r3, r3, #1
 800596c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005970:	e014      	b.n	800599c <HAL_RCC_OscConfig+0x52c>
 8005972:	bf00      	nop
 8005974:	40021000 	.word	0x40021000
 8005978:	40007000 	.word	0x40007000
 800597c:	4b9c      	ldr	r3, [pc, #624]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 800597e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005982:	4a9b      	ldr	r2, [pc, #620]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005984:	f023 0301 	bic.w	r3, r3, #1
 8005988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800598c:	4b98      	ldr	r3, [pc, #608]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 800598e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005992:	4a97      	ldr	r2, [pc, #604]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005994:	f023 0304 	bic.w	r3, r3, #4
 8005998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d016      	beq.n	80059d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a4:	f7fc f9da 	bl	8001d5c <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059aa:	e00a      	b.n	80059c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ac:	f7fc f9d6 	bl	8001d5c <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e12a      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059c2:	4b8b      	ldr	r3, [pc, #556]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 80059c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0ed      	beq.n	80059ac <HAL_RCC_OscConfig+0x53c>
 80059d0:	e015      	b.n	80059fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d2:	f7fc f9c3 	bl	8001d5c <HAL_GetTick>
 80059d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059d8:	e00a      	b.n	80059f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059da:	f7fc f9bf 	bl	8001d5c <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e113      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059f0:	4b7f      	ldr	r3, [pc, #508]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 80059f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1ed      	bne.n	80059da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059fe:	7ffb      	ldrb	r3, [r7, #31]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d105      	bne.n	8005a10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a04:	4b7a      	ldr	r3, [pc, #488]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a08:	4a79      	ldr	r2, [pc, #484]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a0e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 80fe 	beq.w	8005c16 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	f040 80d0 	bne.w	8005bc4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005a24:	4b72      	ldr	r3, [pc, #456]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f003 0203 	and.w	r2, r3, #3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d130      	bne.n	8005a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	3b01      	subs	r3, #1
 8005a44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d127      	bne.n	8005a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a54:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d11f      	bne.n	8005a9a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a64:	2a07      	cmp	r2, #7
 8005a66:	bf14      	ite	ne
 8005a68:	2201      	movne	r2, #1
 8005a6a:	2200      	moveq	r2, #0
 8005a6c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d113      	bne.n	8005a9a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7c:	085b      	lsrs	r3, r3, #1
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d109      	bne.n	8005a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a90:	085b      	lsrs	r3, r3, #1
 8005a92:	3b01      	subs	r3, #1
 8005a94:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d06e      	beq.n	8005b78 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b0c      	cmp	r3, #12
 8005a9e:	d069      	beq.n	8005b74 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005aa0:	4b53      	ldr	r3, [pc, #332]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d105      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005aac:	4b50      	ldr	r3, [pc, #320]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e0ad      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005abc:	4b4c      	ldr	r3, [pc, #304]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a4b      	ldr	r2, [pc, #300]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ac6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ac8:	f7fc f948 	bl	8001d5c <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ad0:	f7fc f944 	bl	8001d5c <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e09a      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ae2:	4b43      	ldr	r3, [pc, #268]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1f0      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aee:	4b40      	ldr	r3, [pc, #256]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	4b40      	ldr	r3, [pc, #256]	; (8005bf4 <HAL_RCC_OscConfig+0x784>)
 8005af4:	4013      	ands	r3, r2
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005afe:	3a01      	subs	r2, #1
 8005b00:	0112      	lsls	r2, r2, #4
 8005b02:	4311      	orrs	r1, r2
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b08:	0212      	lsls	r2, r2, #8
 8005b0a:	4311      	orrs	r1, r2
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b10:	0852      	lsrs	r2, r2, #1
 8005b12:	3a01      	subs	r2, #1
 8005b14:	0552      	lsls	r2, r2, #21
 8005b16:	4311      	orrs	r1, r2
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b1c:	0852      	lsrs	r2, r2, #1
 8005b1e:	3a01      	subs	r2, #1
 8005b20:	0652      	lsls	r2, r2, #25
 8005b22:	4311      	orrs	r1, r2
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b28:	0912      	lsrs	r2, r2, #4
 8005b2a:	0452      	lsls	r2, r2, #17
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	4930      	ldr	r1, [pc, #192]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b34:	4b2e      	ldr	r3, [pc, #184]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a2d      	ldr	r2, [pc, #180]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b40:	4b2b      	ldr	r3, [pc, #172]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	4a2a      	ldr	r2, [pc, #168]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b4c:	f7fc f906 	bl	8001d5c <HAL_GetTick>
 8005b50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b52:	e008      	b.n	8005b66 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b54:	f7fc f902 	bl	8001d5c <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e058      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b66:	4b22      	ldr	r3, [pc, #136]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d0f0      	beq.n	8005b54 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b72:	e050      	b.n	8005c16 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e04f      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b78:	4b1d      	ldr	r3, [pc, #116]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d148      	bne.n	8005c16 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b84:	4b1a      	ldr	r3, [pc, #104]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a19      	ldr	r2, [pc, #100]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b90:	4b17      	ldr	r3, [pc, #92]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	4a16      	ldr	r2, [pc, #88]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b9c:	f7fc f8de 	bl	8001d5c <HAL_GetTick>
 8005ba0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ba4:	f7fc f8da 	bl	8001d5c <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e030      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bb6:	4b0e      	ldr	r3, [pc, #56]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0f0      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x734>
 8005bc2:	e028      	b.n	8005c16 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	2b0c      	cmp	r3, #12
 8005bc8:	d023      	beq.n	8005c12 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bca:	4b09      	ldr	r3, [pc, #36]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a08      	ldr	r2, [pc, #32]	; (8005bf0 <HAL_RCC_OscConfig+0x780>)
 8005bd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd6:	f7fc f8c1 	bl	8001d5c <HAL_GetTick>
 8005bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bdc:	e00c      	b.n	8005bf8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bde:	f7fc f8bd 	bl	8001d5c <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d905      	bls.n	8005bf8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e013      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bf8:	4b09      	ldr	r3, [pc, #36]	; (8005c20 <HAL_RCC_OscConfig+0x7b0>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1ec      	bne.n	8005bde <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005c04:	4b06      	ldr	r3, [pc, #24]	; (8005c20 <HAL_RCC_OscConfig+0x7b0>)
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	4905      	ldr	r1, [pc, #20]	; (8005c20 <HAL_RCC_OscConfig+0x7b0>)
 8005c0a:	4b06      	ldr	r3, [pc, #24]	; (8005c24 <HAL_RCC_OscConfig+0x7b4>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	60cb      	str	r3, [r1, #12]
 8005c10:	e001      	b.n	8005c16 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e000      	b.n	8005c18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3720      	adds	r7, #32
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	40021000 	.word	0x40021000
 8005c24:	feeefffc 	.word	0xfeeefffc

08005c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0e7      	b.n	8005e0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c3c:	4b75      	ldr	r3, [pc, #468]	; (8005e14 <HAL_RCC_ClockConfig+0x1ec>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d910      	bls.n	8005c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c4a:	4b72      	ldr	r3, [pc, #456]	; (8005e14 <HAL_RCC_ClockConfig+0x1ec>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f023 0207 	bic.w	r2, r3, #7
 8005c52:	4970      	ldr	r1, [pc, #448]	; (8005e14 <HAL_RCC_ClockConfig+0x1ec>)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5a:	4b6e      	ldr	r3, [pc, #440]	; (8005e14 <HAL_RCC_ClockConfig+0x1ec>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d001      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e0cf      	b.n	8005e0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d010      	beq.n	8005c9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	4b66      	ldr	r3, [pc, #408]	; (8005e18 <HAL_RCC_ClockConfig+0x1f0>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d908      	bls.n	8005c9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c88:	4b63      	ldr	r3, [pc, #396]	; (8005e18 <HAL_RCC_ClockConfig+0x1f0>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	4960      	ldr	r1, [pc, #384]	; (8005e18 <HAL_RCC_ClockConfig+0x1f0>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d04c      	beq.n	8005d40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d107      	bne.n	8005cbe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cae:	4b5a      	ldr	r3, [pc, #360]	; (8005e18 <HAL_RCC_ClockConfig+0x1f0>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d121      	bne.n	8005cfe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e0a6      	b.n	8005e0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d107      	bne.n	8005cd6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cc6:	4b54      	ldr	r3, [pc, #336]	; (8005e18 <HAL_RCC_ClockConfig+0x1f0>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d115      	bne.n	8005cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e09a      	b.n	8005e0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d107      	bne.n	8005cee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005cde:	4b4e      	ldr	r3, [pc, #312]	; (8005e18 <HAL_RCC_ClockConfig+0x1f0>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d109      	bne.n	8005cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e08e      	b.n	8005e0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cee:	4b4a      	ldr	r3, [pc, #296]	; (8005e18 <HAL_RCC_ClockConfig+0x1f0>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e086      	b.n	8005e0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cfe:	4b46      	ldr	r3, [pc, #280]	; (8005e18 <HAL_RCC_ClockConfig+0x1f0>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f023 0203 	bic.w	r2, r3, #3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	4943      	ldr	r1, [pc, #268]	; (8005e18 <HAL_RCC_ClockConfig+0x1f0>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d10:	f7fc f824 	bl	8001d5c <HAL_GetTick>
 8005d14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d16:	e00a      	b.n	8005d2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d18:	f7fc f820 	bl	8001d5c <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e06e      	b.n	8005e0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d2e:	4b3a      	ldr	r3, [pc, #232]	; (8005e18 <HAL_RCC_ClockConfig+0x1f0>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 020c 	and.w	r2, r3, #12
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d1eb      	bne.n	8005d18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d010      	beq.n	8005d6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	4b31      	ldr	r3, [pc, #196]	; (8005e18 <HAL_RCC_ClockConfig+0x1f0>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d208      	bcs.n	8005d6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d5c:	4b2e      	ldr	r3, [pc, #184]	; (8005e18 <HAL_RCC_ClockConfig+0x1f0>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	492b      	ldr	r1, [pc, #172]	; (8005e18 <HAL_RCC_ClockConfig+0x1f0>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d6e:	4b29      	ldr	r3, [pc, #164]	; (8005e14 <HAL_RCC_ClockConfig+0x1ec>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d210      	bcs.n	8005d9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d7c:	4b25      	ldr	r3, [pc, #148]	; (8005e14 <HAL_RCC_ClockConfig+0x1ec>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f023 0207 	bic.w	r2, r3, #7
 8005d84:	4923      	ldr	r1, [pc, #140]	; (8005e14 <HAL_RCC_ClockConfig+0x1ec>)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d8c:	4b21      	ldr	r3, [pc, #132]	; (8005e14 <HAL_RCC_ClockConfig+0x1ec>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d001      	beq.n	8005d9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e036      	b.n	8005e0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d008      	beq.n	8005dbc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005daa:	4b1b      	ldr	r3, [pc, #108]	; (8005e18 <HAL_RCC_ClockConfig+0x1f0>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	4918      	ldr	r1, [pc, #96]	; (8005e18 <HAL_RCC_ClockConfig+0x1f0>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0308 	and.w	r3, r3, #8
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d009      	beq.n	8005ddc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dc8:	4b13      	ldr	r3, [pc, #76]	; (8005e18 <HAL_RCC_ClockConfig+0x1f0>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	00db      	lsls	r3, r3, #3
 8005dd6:	4910      	ldr	r1, [pc, #64]	; (8005e18 <HAL_RCC_ClockConfig+0x1f0>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ddc:	f000 f824 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8005de0:	4602      	mov	r2, r0
 8005de2:	4b0d      	ldr	r3, [pc, #52]	; (8005e18 <HAL_RCC_ClockConfig+0x1f0>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	091b      	lsrs	r3, r3, #4
 8005de8:	f003 030f 	and.w	r3, r3, #15
 8005dec:	490b      	ldr	r1, [pc, #44]	; (8005e1c <HAL_RCC_ClockConfig+0x1f4>)
 8005dee:	5ccb      	ldrb	r3, [r1, r3]
 8005df0:	f003 031f 	and.w	r3, r3, #31
 8005df4:	fa22 f303 	lsr.w	r3, r2, r3
 8005df8:	4a09      	ldr	r2, [pc, #36]	; (8005e20 <HAL_RCC_ClockConfig+0x1f8>)
 8005dfa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005dfc:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <HAL_RCC_ClockConfig+0x1fc>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fb feb9 	bl	8001b78 <HAL_InitTick>
 8005e06:	4603      	mov	r3, r0
 8005e08:	72fb      	strb	r3, [r7, #11]

  return status;
 8005e0a:	7afb      	ldrb	r3, [r7, #11]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	40022000 	.word	0x40022000
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	0800db78 	.word	0x0800db78
 8005e20:	20000000 	.word	0x20000000
 8005e24:	20000004 	.word	0x20000004

08005e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b089      	sub	sp, #36	; 0x24
 8005e2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	61fb      	str	r3, [r7, #28]
 8005e32:	2300      	movs	r3, #0
 8005e34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e36:	4b3e      	ldr	r3, [pc, #248]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 030c 	and.w	r3, r3, #12
 8005e3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e40:	4b3b      	ldr	r3, [pc, #236]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f003 0303 	and.w	r3, r3, #3
 8005e48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d005      	beq.n	8005e5c <HAL_RCC_GetSysClockFreq+0x34>
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	2b0c      	cmp	r3, #12
 8005e54:	d121      	bne.n	8005e9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d11e      	bne.n	8005e9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e5c:	4b34      	ldr	r3, [pc, #208]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0308 	and.w	r3, r3, #8
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d107      	bne.n	8005e78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e68:	4b31      	ldr	r3, [pc, #196]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e6e:	0a1b      	lsrs	r3, r3, #8
 8005e70:	f003 030f 	and.w	r3, r3, #15
 8005e74:	61fb      	str	r3, [r7, #28]
 8005e76:	e005      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e78:	4b2d      	ldr	r3, [pc, #180]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	091b      	lsrs	r3, r3, #4
 8005e7e:	f003 030f 	and.w	r3, r3, #15
 8005e82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e84:	4a2b      	ldr	r2, [pc, #172]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10d      	bne.n	8005eb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e98:	e00a      	b.n	8005eb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d102      	bne.n	8005ea6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ea0:	4b25      	ldr	r3, [pc, #148]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ea2:	61bb      	str	r3, [r7, #24]
 8005ea4:	e004      	b.n	8005eb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d101      	bne.n	8005eb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005eac:	4b23      	ldr	r3, [pc, #140]	; (8005f3c <HAL_RCC_GetSysClockFreq+0x114>)
 8005eae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	2b0c      	cmp	r3, #12
 8005eb4:	d134      	bne.n	8005f20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005eb6:	4b1e      	ldr	r3, [pc, #120]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f003 0303 	and.w	r3, r3, #3
 8005ebe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d003      	beq.n	8005ece <HAL_RCC_GetSysClockFreq+0xa6>
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d003      	beq.n	8005ed4 <HAL_RCC_GetSysClockFreq+0xac>
 8005ecc:	e005      	b.n	8005eda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005ece:	4b1a      	ldr	r3, [pc, #104]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ed0:	617b      	str	r3, [r7, #20]
      break;
 8005ed2:	e005      	b.n	8005ee0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ed4:	4b19      	ldr	r3, [pc, #100]	; (8005f3c <HAL_RCC_GetSysClockFreq+0x114>)
 8005ed6:	617b      	str	r3, [r7, #20]
      break;
 8005ed8:	e002      	b.n	8005ee0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	617b      	str	r3, [r7, #20]
      break;
 8005ede:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ee0:	4b13      	ldr	r3, [pc, #76]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	091b      	lsrs	r3, r3, #4
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	3301      	adds	r3, #1
 8005eec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005eee:	4b10      	ldr	r3, [pc, #64]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	0a1b      	lsrs	r3, r3, #8
 8005ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	fb03 f202 	mul.w	r2, r3, r2
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f06:	4b0a      	ldr	r3, [pc, #40]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	0e5b      	lsrs	r3, r3, #25
 8005f0c:	f003 0303 	and.w	r3, r3, #3
 8005f10:	3301      	adds	r3, #1
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f20:	69bb      	ldr	r3, [r7, #24]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3724      	adds	r7, #36	; 0x24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	40021000 	.word	0x40021000
 8005f34:	0800db90 	.word	0x0800db90
 8005f38:	00f42400 	.word	0x00f42400
 8005f3c:	007a1200 	.word	0x007a1200

08005f40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f44:	4b03      	ldr	r3, [pc, #12]	; (8005f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f46:	681b      	ldr	r3, [r3, #0]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	20000000 	.word	0x20000000

08005f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f5c:	f7ff fff0 	bl	8005f40 <HAL_RCC_GetHCLKFreq>
 8005f60:	4602      	mov	r2, r0
 8005f62:	4b06      	ldr	r3, [pc, #24]	; (8005f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	0a1b      	lsrs	r3, r3, #8
 8005f68:	f003 0307 	and.w	r3, r3, #7
 8005f6c:	4904      	ldr	r1, [pc, #16]	; (8005f80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f6e:	5ccb      	ldrb	r3, [r1, r3]
 8005f70:	f003 031f 	and.w	r3, r3, #31
 8005f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	40021000 	.word	0x40021000
 8005f80:	0800db88 	.word	0x0800db88

08005f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f88:	f7ff ffda 	bl	8005f40 <HAL_RCC_GetHCLKFreq>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	0adb      	lsrs	r3, r3, #11
 8005f94:	f003 0307 	and.w	r3, r3, #7
 8005f98:	4904      	ldr	r1, [pc, #16]	; (8005fac <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f9a:	5ccb      	ldrb	r3, [r1, r3]
 8005f9c:	f003 031f 	and.w	r3, r3, #31
 8005fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	40021000 	.word	0x40021000
 8005fac:	0800db88 	.word	0x0800db88

08005fb0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	220f      	movs	r2, #15
 8005fbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005fc0:	4b12      	ldr	r3, [pc, #72]	; (800600c <HAL_RCC_GetClockConfig+0x5c>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f003 0203 	and.w	r2, r3, #3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005fcc:	4b0f      	ldr	r3, [pc, #60]	; (800600c <HAL_RCC_GetClockConfig+0x5c>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005fd8:	4b0c      	ldr	r3, [pc, #48]	; (800600c <HAL_RCC_GetClockConfig+0x5c>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005fe4:	4b09      	ldr	r3, [pc, #36]	; (800600c <HAL_RCC_GetClockConfig+0x5c>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	08db      	lsrs	r3, r3, #3
 8005fea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005ff2:	4b07      	ldr	r3, [pc, #28]	; (8006010 <HAL_RCC_GetClockConfig+0x60>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0207 	and.w	r2, r3, #7
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	601a      	str	r2, [r3, #0]
}
 8005ffe:	bf00      	nop
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	40021000 	.word	0x40021000
 8006010:	40022000 	.word	0x40022000

08006014 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800601c:	2300      	movs	r3, #0
 800601e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006020:	4b2a      	ldr	r3, [pc, #168]	; (80060cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800602c:	f7ff f99c 	bl	8005368 <HAL_PWREx_GetVoltageRange>
 8006030:	6178      	str	r0, [r7, #20]
 8006032:	e014      	b.n	800605e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006034:	4b25      	ldr	r3, [pc, #148]	; (80060cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006038:	4a24      	ldr	r2, [pc, #144]	; (80060cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800603a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800603e:	6593      	str	r3, [r2, #88]	; 0x58
 8006040:	4b22      	ldr	r3, [pc, #136]	; (80060cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800604c:	f7ff f98c 	bl	8005368 <HAL_PWREx_GetVoltageRange>
 8006050:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006052:	4b1e      	ldr	r3, [pc, #120]	; (80060cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006056:	4a1d      	ldr	r2, [pc, #116]	; (80060cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800605c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006064:	d10b      	bne.n	800607e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b80      	cmp	r3, #128	; 0x80
 800606a:	d919      	bls.n	80060a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2ba0      	cmp	r3, #160	; 0xa0
 8006070:	d902      	bls.n	8006078 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006072:	2302      	movs	r3, #2
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	e013      	b.n	80060a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006078:	2301      	movs	r3, #1
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	e010      	b.n	80060a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b80      	cmp	r3, #128	; 0x80
 8006082:	d902      	bls.n	800608a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006084:	2303      	movs	r3, #3
 8006086:	613b      	str	r3, [r7, #16]
 8006088:	e00a      	b.n	80060a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b80      	cmp	r3, #128	; 0x80
 800608e:	d102      	bne.n	8006096 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006090:	2302      	movs	r3, #2
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	e004      	b.n	80060a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b70      	cmp	r3, #112	; 0x70
 800609a:	d101      	bne.n	80060a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800609c:	2301      	movs	r3, #1
 800609e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80060a0:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f023 0207 	bic.w	r2, r3, #7
 80060a8:	4909      	ldr	r1, [pc, #36]	; (80060d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80060b0:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0307 	and.w	r3, r3, #7
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d001      	beq.n	80060c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e000      	b.n	80060c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40021000 	.word	0x40021000
 80060d0:	40022000 	.word	0x40022000

080060d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060dc:	2300      	movs	r3, #0
 80060de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060e0:	2300      	movs	r3, #0
 80060e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d041      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060f8:	d02a      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80060fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060fe:	d824      	bhi.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006100:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006104:	d008      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006106:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800610a:	d81e      	bhi.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00a      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006114:	d010      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006116:	e018      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006118:	4b86      	ldr	r3, [pc, #536]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	4a85      	ldr	r2, [pc, #532]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800611e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006122:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006124:	e015      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	3304      	adds	r3, #4
 800612a:	2100      	movs	r1, #0
 800612c:	4618      	mov	r0, r3
 800612e:	f001 f829 	bl	8007184 <RCCEx_PLLSAI1_Config>
 8006132:	4603      	mov	r3, r0
 8006134:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006136:	e00c      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3320      	adds	r3, #32
 800613c:	2100      	movs	r1, #0
 800613e:	4618      	mov	r0, r3
 8006140:	f001 f914 	bl	800736c <RCCEx_PLLSAI2_Config>
 8006144:	4603      	mov	r3, r0
 8006146:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006148:	e003      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	74fb      	strb	r3, [r7, #19]
      break;
 800614e:	e000      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006152:	7cfb      	ldrb	r3, [r7, #19]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10b      	bne.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006158:	4b76      	ldr	r3, [pc, #472]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800615a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006166:	4973      	ldr	r1, [pc, #460]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006168:	4313      	orrs	r3, r2
 800616a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800616e:	e001      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006170:	7cfb      	ldrb	r3, [r7, #19]
 8006172:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d041      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006184:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006188:	d02a      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800618a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800618e:	d824      	bhi.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006190:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006194:	d008      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006196:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800619a:	d81e      	bhi.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00a      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80061a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061a4:	d010      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80061a6:	e018      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80061a8:	4b62      	ldr	r3, [pc, #392]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	4a61      	ldr	r2, [pc, #388]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061b4:	e015      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3304      	adds	r3, #4
 80061ba:	2100      	movs	r1, #0
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 ffe1 	bl	8007184 <RCCEx_PLLSAI1_Config>
 80061c2:	4603      	mov	r3, r0
 80061c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061c6:	e00c      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3320      	adds	r3, #32
 80061cc:	2100      	movs	r1, #0
 80061ce:	4618      	mov	r0, r3
 80061d0:	f001 f8cc 	bl	800736c <RCCEx_PLLSAI2_Config>
 80061d4:	4603      	mov	r3, r0
 80061d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061d8:	e003      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	74fb      	strb	r3, [r7, #19]
      break;
 80061de:	e000      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80061e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061e2:	7cfb      	ldrb	r3, [r7, #19]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10b      	bne.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061e8:	4b52      	ldr	r3, [pc, #328]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061f6:	494f      	ldr	r1, [pc, #316]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80061fe:	e001      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006200:	7cfb      	ldrb	r3, [r7, #19]
 8006202:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 80a0 	beq.w	8006352 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006212:	2300      	movs	r3, #0
 8006214:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006216:	4b47      	ldr	r3, [pc, #284]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800621a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006222:	2301      	movs	r3, #1
 8006224:	e000      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006226:	2300      	movs	r3, #0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00d      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800622c:	4b41      	ldr	r3, [pc, #260]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800622e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006230:	4a40      	ldr	r2, [pc, #256]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006236:	6593      	str	r3, [r2, #88]	; 0x58
 8006238:	4b3e      	ldr	r3, [pc, #248]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800623a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006240:	60bb      	str	r3, [r7, #8]
 8006242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006244:	2301      	movs	r3, #1
 8006246:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006248:	4b3b      	ldr	r3, [pc, #236]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a3a      	ldr	r2, [pc, #232]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800624e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006252:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006254:	f7fb fd82 	bl	8001d5c <HAL_GetTick>
 8006258:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800625a:	e009      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800625c:	f7fb fd7e 	bl	8001d5c <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b02      	cmp	r3, #2
 8006268:	d902      	bls.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	74fb      	strb	r3, [r7, #19]
        break;
 800626e:	e005      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006270:	4b31      	ldr	r3, [pc, #196]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006278:	2b00      	cmp	r3, #0
 800627a:	d0ef      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800627c:	7cfb      	ldrb	r3, [r7, #19]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d15c      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006282:	4b2c      	ldr	r3, [pc, #176]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800628c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d01f      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	429a      	cmp	r2, r3
 800629e:	d019      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062a0:	4b24      	ldr	r3, [pc, #144]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062ac:	4b21      	ldr	r3, [pc, #132]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b2:	4a20      	ldr	r2, [pc, #128]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062bc:	4b1d      	ldr	r3, [pc, #116]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c2:	4a1c      	ldr	r2, [pc, #112]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062cc:	4a19      	ldr	r2, [pc, #100]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d016      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062de:	f7fb fd3d 	bl	8001d5c <HAL_GetTick>
 80062e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062e4:	e00b      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062e6:	f7fb fd39 	bl	8001d5c <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d902      	bls.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	74fb      	strb	r3, [r7, #19]
            break;
 80062fc:	e006      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062fe:	4b0d      	ldr	r3, [pc, #52]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006304:	f003 0302 	and.w	r3, r3, #2
 8006308:	2b00      	cmp	r3, #0
 800630a:	d0ec      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800630c:	7cfb      	ldrb	r3, [r7, #19]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10c      	bne.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006312:	4b08      	ldr	r3, [pc, #32]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006322:	4904      	ldr	r1, [pc, #16]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006324:	4313      	orrs	r3, r2
 8006326:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800632a:	e009      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800632c:	7cfb      	ldrb	r3, [r7, #19]
 800632e:	74bb      	strb	r3, [r7, #18]
 8006330:	e006      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006332:	bf00      	nop
 8006334:	40021000 	.word	0x40021000
 8006338:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633c:	7cfb      	ldrb	r3, [r7, #19]
 800633e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006340:	7c7b      	ldrb	r3, [r7, #17]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d105      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006346:	4b9e      	ldr	r3, [pc, #632]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634a:	4a9d      	ldr	r2, [pc, #628]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800634c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006350:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800635e:	4b98      	ldr	r3, [pc, #608]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006364:	f023 0203 	bic.w	r2, r3, #3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636c:	4994      	ldr	r1, [pc, #592]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800636e:	4313      	orrs	r3, r2
 8006370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00a      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006380:	4b8f      	ldr	r3, [pc, #572]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006386:	f023 020c 	bic.w	r2, r3, #12
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638e:	498c      	ldr	r1, [pc, #560]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006390:	4313      	orrs	r3, r2
 8006392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0304 	and.w	r3, r3, #4
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063a2:	4b87      	ldr	r3, [pc, #540]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b0:	4983      	ldr	r1, [pc, #524]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0308 	and.w	r3, r3, #8
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00a      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063c4:	4b7e      	ldr	r3, [pc, #504]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d2:	497b      	ldr	r1, [pc, #492]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0310 	and.w	r3, r3, #16
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063e6:	4b76      	ldr	r3, [pc, #472]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063f4:	4972      	ldr	r1, [pc, #456]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006408:	4b6d      	ldr	r3, [pc, #436]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800640a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006416:	496a      	ldr	r1, [pc, #424]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006418:	4313      	orrs	r3, r2
 800641a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800642a:	4b65      	ldr	r3, [pc, #404]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800642c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006430:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006438:	4961      	ldr	r1, [pc, #388]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800643a:	4313      	orrs	r3, r2
 800643c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800644c:	4b5c      	ldr	r3, [pc, #368]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800644e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006452:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800645a:	4959      	ldr	r1, [pc, #356]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800645c:	4313      	orrs	r3, r2
 800645e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800646e:	4b54      	ldr	r3, [pc, #336]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006474:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647c:	4950      	ldr	r1, [pc, #320]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800647e:	4313      	orrs	r3, r2
 8006480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00a      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006490:	4b4b      	ldr	r3, [pc, #300]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006496:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649e:	4948      	ldr	r1, [pc, #288]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064b2:	4b43      	ldr	r3, [pc, #268]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c0:	493f      	ldr	r1, [pc, #252]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d028      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064d4:	4b3a      	ldr	r3, [pc, #232]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064e2:	4937      	ldr	r1, [pc, #220]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064f2:	d106      	bne.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064f4:	4b32      	ldr	r3, [pc, #200]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	4a31      	ldr	r2, [pc, #196]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064fe:	60d3      	str	r3, [r2, #12]
 8006500:	e011      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006506:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800650a:	d10c      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	3304      	adds	r3, #4
 8006510:	2101      	movs	r1, #1
 8006512:	4618      	mov	r0, r3
 8006514:	f000 fe36 	bl	8007184 <RCCEx_PLLSAI1_Config>
 8006518:	4603      	mov	r3, r0
 800651a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800651c:	7cfb      	ldrb	r3, [r7, #19]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006522:	7cfb      	ldrb	r3, [r7, #19]
 8006524:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d028      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006532:	4b23      	ldr	r3, [pc, #140]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006538:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006540:	491f      	ldr	r1, [pc, #124]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006542:	4313      	orrs	r3, r2
 8006544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006550:	d106      	bne.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006552:	4b1b      	ldr	r3, [pc, #108]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	4a1a      	ldr	r2, [pc, #104]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800655c:	60d3      	str	r3, [r2, #12]
 800655e:	e011      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006564:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006568:	d10c      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	3304      	adds	r3, #4
 800656e:	2101      	movs	r1, #1
 8006570:	4618      	mov	r0, r3
 8006572:	f000 fe07 	bl	8007184 <RCCEx_PLLSAI1_Config>
 8006576:	4603      	mov	r3, r0
 8006578:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800657a:	7cfb      	ldrb	r3, [r7, #19]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006580:	7cfb      	ldrb	r3, [r7, #19]
 8006582:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d02b      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006590:	4b0b      	ldr	r3, [pc, #44]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006596:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800659e:	4908      	ldr	r1, [pc, #32]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065ae:	d109      	bne.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065b0:	4b03      	ldr	r3, [pc, #12]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	4a02      	ldr	r2, [pc, #8]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065ba:	60d3      	str	r3, [r2, #12]
 80065bc:	e014      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80065be:	bf00      	nop
 80065c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065cc:	d10c      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3304      	adds	r3, #4
 80065d2:	2101      	movs	r1, #1
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 fdd5 	bl	8007184 <RCCEx_PLLSAI1_Config>
 80065da:	4603      	mov	r3, r0
 80065dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065de:	7cfb      	ldrb	r3, [r7, #19]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80065e4:	7cfb      	ldrb	r3, [r7, #19]
 80065e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d02f      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065f4:	4b2b      	ldr	r3, [pc, #172]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006602:	4928      	ldr	r1, [pc, #160]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006604:	4313      	orrs	r3, r2
 8006606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800660e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006612:	d10d      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	3304      	adds	r3, #4
 8006618:	2102      	movs	r1, #2
 800661a:	4618      	mov	r0, r3
 800661c:	f000 fdb2 	bl	8007184 <RCCEx_PLLSAI1_Config>
 8006620:	4603      	mov	r3, r0
 8006622:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006624:	7cfb      	ldrb	r3, [r7, #19]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d014      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800662a:	7cfb      	ldrb	r3, [r7, #19]
 800662c:	74bb      	strb	r3, [r7, #18]
 800662e:	e011      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006638:	d10c      	bne.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3320      	adds	r3, #32
 800663e:	2102      	movs	r1, #2
 8006640:	4618      	mov	r0, r3
 8006642:	f000 fe93 	bl	800736c <RCCEx_PLLSAI2_Config>
 8006646:	4603      	mov	r3, r0
 8006648:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800664a:	7cfb      	ldrb	r3, [r7, #19]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d001      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006650:	7cfb      	ldrb	r3, [r7, #19]
 8006652:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00a      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006660:	4b10      	ldr	r3, [pc, #64]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006666:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800666e:	490d      	ldr	r1, [pc, #52]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006670:	4313      	orrs	r3, r2
 8006672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00b      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006682:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006688:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006692:	4904      	ldr	r1, [pc, #16]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006694:	4313      	orrs	r3, r2
 8006696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800669a:	7cbb      	ldrb	r3, [r7, #18]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3718      	adds	r7, #24
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	40021000 	.word	0x40021000

080066a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066ba:	d13e      	bne.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80066bc:	4bb2      	ldr	r3, [pc, #712]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80066be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066c6:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066ce:	d028      	beq.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066d6:	f200 8542 	bhi.w	800715e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066e0:	d005      	beq.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e8:	d00e      	beq.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80066ea:	f000 bd38 	b.w	800715e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80066ee:	4ba6      	ldr	r3, [pc, #664]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80066f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	f040 8532 	bne.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 80066fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006702:	61fb      	str	r3, [r7, #28]
      break;
 8006704:	f000 bd2d 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006708:	4b9f      	ldr	r3, [pc, #636]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800670a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b02      	cmp	r3, #2
 8006714:	f040 8527 	bne.w	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8006718:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800671c:	61fb      	str	r3, [r7, #28]
      break;
 800671e:	f000 bd22 	b.w	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006722:	4b99      	ldr	r3, [pc, #612]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800672e:	f040 851c 	bne.w	800716a <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8006732:	4b96      	ldr	r3, [pc, #600]	; (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8006734:	61fb      	str	r3, [r7, #28]
      break;
 8006736:	f000 bd18 	b.w	800716a <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800673a:	4b93      	ldr	r3, [pc, #588]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	f003 0303 	and.w	r3, r3, #3
 8006742:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2b03      	cmp	r3, #3
 8006748:	d036      	beq.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2b03      	cmp	r3, #3
 800674e:	d840      	bhi.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d003      	beq.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2b02      	cmp	r3, #2
 800675a:	d020      	beq.n	800679e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800675c:	e039      	b.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800675e:	4b8a      	ldr	r3, [pc, #552]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b02      	cmp	r3, #2
 8006768:	d116      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800676a:	4b87      	ldr	r3, [pc, #540]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0308 	and.w	r3, r3, #8
 8006772:	2b00      	cmp	r3, #0
 8006774:	d005      	beq.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006776:	4b84      	ldr	r3, [pc, #528]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	091b      	lsrs	r3, r3, #4
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	e005      	b.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006782:	4b81      	ldr	r3, [pc, #516]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006788:	0a1b      	lsrs	r3, r3, #8
 800678a:	f003 030f 	and.w	r3, r3, #15
 800678e:	4a80      	ldr	r2, [pc, #512]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006794:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006796:	e01f      	b.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006798:	2300      	movs	r3, #0
 800679a:	61bb      	str	r3, [r7, #24]
      break;
 800679c:	e01c      	b.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800679e:	4b7a      	ldr	r3, [pc, #488]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067aa:	d102      	bne.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80067ac:	4b79      	ldr	r3, [pc, #484]	; (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80067ae:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80067b0:	e012      	b.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	61bb      	str	r3, [r7, #24]
      break;
 80067b6:	e00f      	b.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80067b8:	4b73      	ldr	r3, [pc, #460]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067c4:	d102      	bne.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80067c6:	4b74      	ldr	r3, [pc, #464]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80067c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80067ca:	e005      	b.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	61bb      	str	r3, [r7, #24]
      break;
 80067d0:	e002      	b.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	61bb      	str	r3, [r7, #24]
      break;
 80067d6:	bf00      	nop
    }

    switch(PeriphClk)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80067de:	f000 80dd 	beq.w	800699c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80067e8:	f200 84c1 	bhi.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067f2:	f000 80d3 	beq.w	800699c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067fc:	f200 84b7 	bhi.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006806:	f000 835f 	beq.w	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006810:	f200 84ad 	bhi.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800681a:	f000 847e 	beq.w	800711a <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006824:	f200 84a3 	bhi.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800682e:	f000 82cd 	beq.w	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006838:	f200 8499 	bhi.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006842:	f000 80ab 	beq.w	800699c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800684c:	f200 848f 	bhi.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006856:	f000 8090 	beq.w	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006860:	f200 8485 	bhi.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800686a:	d07f      	beq.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006872:	f200 847c 	bhi.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800687c:	f000 8403 	beq.w	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006886:	f200 8472 	bhi.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006890:	f000 83af 	beq.w	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800689a:	f200 8468 	bhi.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a4:	f000 8379 	beq.w	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ae:	f200 845e 	bhi.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2b80      	cmp	r3, #128	; 0x80
 80068b6:	f000 8344 	beq.w	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b80      	cmp	r3, #128	; 0x80
 80068be:	f200 8456 	bhi.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b20      	cmp	r3, #32
 80068c6:	d84b      	bhi.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 844f 	beq.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3b01      	subs	r3, #1
 80068d4:	2b1f      	cmp	r3, #31
 80068d6:	f200 844a 	bhi.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80068da:	a201      	add	r2, pc, #4	; (adr r2, 80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80068dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e0:	08006ac9 	.word	0x08006ac9
 80068e4:	08006b37 	.word	0x08006b37
 80068e8:	0800716f 	.word	0x0800716f
 80068ec:	08006bcb 	.word	0x08006bcb
 80068f0:	0800716f 	.word	0x0800716f
 80068f4:	0800716f 	.word	0x0800716f
 80068f8:	0800716f 	.word	0x0800716f
 80068fc:	08006c51 	.word	0x08006c51
 8006900:	0800716f 	.word	0x0800716f
 8006904:	0800716f 	.word	0x0800716f
 8006908:	0800716f 	.word	0x0800716f
 800690c:	0800716f 	.word	0x0800716f
 8006910:	0800716f 	.word	0x0800716f
 8006914:	0800716f 	.word	0x0800716f
 8006918:	0800716f 	.word	0x0800716f
 800691c:	08006cc9 	.word	0x08006cc9
 8006920:	0800716f 	.word	0x0800716f
 8006924:	0800716f 	.word	0x0800716f
 8006928:	0800716f 	.word	0x0800716f
 800692c:	0800716f 	.word	0x0800716f
 8006930:	0800716f 	.word	0x0800716f
 8006934:	0800716f 	.word	0x0800716f
 8006938:	0800716f 	.word	0x0800716f
 800693c:	0800716f 	.word	0x0800716f
 8006940:	0800716f 	.word	0x0800716f
 8006944:	0800716f 	.word	0x0800716f
 8006948:	0800716f 	.word	0x0800716f
 800694c:	0800716f 	.word	0x0800716f
 8006950:	0800716f 	.word	0x0800716f
 8006954:	0800716f 	.word	0x0800716f
 8006958:	0800716f 	.word	0x0800716f
 800695c:	08006d4b 	.word	0x08006d4b
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b40      	cmp	r3, #64	; 0x40
 8006964:	f000 82c1 	beq.w	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006968:	f000 bc01 	b.w	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800696c:	69b9      	ldr	r1, [r7, #24]
 800696e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006972:	f000 fdd9 	bl	8007528 <RCCEx_GetSAIxPeriphCLKFreq>
 8006976:	61f8      	str	r0, [r7, #28]
      break;
 8006978:	e3fa      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800697a:	69b9      	ldr	r1, [r7, #24]
 800697c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006980:	f000 fdd2 	bl	8007528 <RCCEx_GetSAIxPeriphCLKFreq>
 8006984:	61f8      	str	r0, [r7, #28]
      break;
 8006986:	e3f3      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006988:	40021000 	.word	0x40021000
 800698c:	0003d090 	.word	0x0003d090
 8006990:	0800db90 	.word	0x0800db90
 8006994:	00f42400 	.word	0x00f42400
 8006998:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800699c:	4ba9      	ldr	r3, [pc, #676]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800699e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80069a6:	613b      	str	r3, [r7, #16]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80069ae:	d00c      	beq.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80069b6:	d87f      	bhi.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069be:	d04e      	beq.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069c6:	d01d      	beq.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 80069c8:	e076      	b.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80069ca:	4b9e      	ldr	r3, [pc, #632]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d172      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80069d6:	4b9b      	ldr	r3, [pc, #620]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0308 	and.w	r3, r3, #8
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d005      	beq.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80069e2:	4b98      	ldr	r3, [pc, #608]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	091b      	lsrs	r3, r3, #4
 80069e8:	f003 030f 	and.w	r3, r3, #15
 80069ec:	e005      	b.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80069ee:	4b95      	ldr	r3, [pc, #596]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80069f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069f4:	0a1b      	lsrs	r3, r3, #8
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	4a93      	ldr	r2, [pc, #588]	; (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80069fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a00:	61fb      	str	r3, [r7, #28]
          break;
 8006a02:	e05b      	b.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006a04:	4b8f      	ldr	r3, [pc, #572]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a10:	d156      	bne.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006a12:	4b8c      	ldr	r3, [pc, #560]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a1e:	d14f      	bne.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006a20:	4b88      	ldr	r3, [pc, #544]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	0a1b      	lsrs	r3, r3, #8
 8006a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a2a:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	fb03 f202 	mul.w	r2, r3, r2
 8006a34:	4b83      	ldr	r3, [pc, #524]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	091b      	lsrs	r3, r3, #4
 8006a3a:	f003 0307 	and.w	r3, r3, #7
 8006a3e:	3301      	adds	r3, #1
 8006a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a44:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006a46:	4b7f      	ldr	r3, [pc, #508]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	0d5b      	lsrs	r3, r3, #21
 8006a4c:	f003 0303 	and.w	r3, r3, #3
 8006a50:	3301      	adds	r3, #1
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5a:	61fb      	str	r3, [r7, #28]
          break;
 8006a5c:	e030      	b.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006a5e:	4b79      	ldr	r3, [pc, #484]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a6a:	d12b      	bne.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006a6c:	4b75      	ldr	r3, [pc, #468]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a78:	d124      	bne.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006a7a:	4b72      	ldr	r3, [pc, #456]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	0a1b      	lsrs	r3, r3, #8
 8006a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a84:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	fb03 f202 	mul.w	r2, r3, r2
 8006a8e:	4b6d      	ldr	r3, [pc, #436]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	091b      	lsrs	r3, r3, #4
 8006a94:	f003 0307 	and.w	r3, r3, #7
 8006a98:	3301      	adds	r3, #1
 8006a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006aa0:	4b68      	ldr	r3, [pc, #416]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	0d5b      	lsrs	r3, r3, #21
 8006aa6:	f003 0303 	and.w	r3, r3, #3
 8006aaa:	3301      	adds	r3, #1
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab4:	61fb      	str	r3, [r7, #28]
          break;
 8006ab6:	e005      	b.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8006ab8:	bf00      	nop
 8006aba:	e359      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006abc:	bf00      	nop
 8006abe:	e357      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006ac0:	bf00      	nop
 8006ac2:	e355      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006ac4:	bf00      	nop
        break;
 8006ac6:	e353      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006ac8:	4b5e      	ldr	r3, [pc, #376]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ace:	f003 0303 	and.w	r3, r3, #3
 8006ad2:	613b      	str	r3, [r7, #16]
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	2b03      	cmp	r3, #3
 8006ad8:	d827      	bhi.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8006ada:	a201      	add	r2, pc, #4	; (adr r2, 8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8006adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae0:	08006af1 	.word	0x08006af1
 8006ae4:	08006af9 	.word	0x08006af9
 8006ae8:	08006b01 	.word	0x08006b01
 8006aec:	08006b15 	.word	0x08006b15
          frequency = HAL_RCC_GetPCLK2Freq();
 8006af0:	f7ff fa48 	bl	8005f84 <HAL_RCC_GetPCLK2Freq>
 8006af4:	61f8      	str	r0, [r7, #28]
          break;
 8006af6:	e01d      	b.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006af8:	f7ff f996 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8006afc:	61f8      	str	r0, [r7, #28]
          break;
 8006afe:	e019      	b.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b00:	4b50      	ldr	r3, [pc, #320]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b0c:	d10f      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8006b0e:	4b4f      	ldr	r3, [pc, #316]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006b10:	61fb      	str	r3, [r7, #28]
          break;
 8006b12:	e00c      	b.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b14:	4b4b      	ldr	r3, [pc, #300]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d107      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8006b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b26:	61fb      	str	r3, [r7, #28]
          break;
 8006b28:	e003      	b.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8006b2a:	bf00      	nop
 8006b2c:	e320      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006b2e:	bf00      	nop
 8006b30:	e31e      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006b32:	bf00      	nop
        break;
 8006b34:	e31c      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006b36:	4b43      	ldr	r3, [pc, #268]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3c:	f003 030c 	and.w	r3, r3, #12
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	2b0c      	cmp	r3, #12
 8006b46:	d83a      	bhi.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8006b48:	a201      	add	r2, pc, #4	; (adr r2, 8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8006b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4e:	bf00      	nop
 8006b50:	08006b85 	.word	0x08006b85
 8006b54:	08006bbf 	.word	0x08006bbf
 8006b58:	08006bbf 	.word	0x08006bbf
 8006b5c:	08006bbf 	.word	0x08006bbf
 8006b60:	08006b8d 	.word	0x08006b8d
 8006b64:	08006bbf 	.word	0x08006bbf
 8006b68:	08006bbf 	.word	0x08006bbf
 8006b6c:	08006bbf 	.word	0x08006bbf
 8006b70:	08006b95 	.word	0x08006b95
 8006b74:	08006bbf 	.word	0x08006bbf
 8006b78:	08006bbf 	.word	0x08006bbf
 8006b7c:	08006bbf 	.word	0x08006bbf
 8006b80:	08006ba9 	.word	0x08006ba9
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b84:	f7ff f9e8 	bl	8005f58 <HAL_RCC_GetPCLK1Freq>
 8006b88:	61f8      	str	r0, [r7, #28]
          break;
 8006b8a:	e01d      	b.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b8c:	f7ff f94c 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8006b90:	61f8      	str	r0, [r7, #28]
          break;
 8006b92:	e019      	b.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b94:	4b2b      	ldr	r3, [pc, #172]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ba0:	d10f      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8006ba2:	4b2a      	ldr	r3, [pc, #168]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006ba4:	61fb      	str	r3, [r7, #28]
          break;
 8006ba6:	e00c      	b.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ba8:	4b26      	ldr	r3, [pc, #152]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d107      	bne.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8006bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bba:	61fb      	str	r3, [r7, #28]
          break;
 8006bbc:	e003      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8006bbe:	bf00      	nop
 8006bc0:	e2d6      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006bc2:	bf00      	nop
 8006bc4:	e2d4      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006bc6:	bf00      	nop
        break;
 8006bc8:	e2d2      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006bca:	4b1e      	ldr	r3, [pc, #120]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006bd4:	613b      	str	r3, [r7, #16]
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	2b30      	cmp	r3, #48	; 0x30
 8006bda:	d021      	beq.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	2b30      	cmp	r3, #48	; 0x30
 8006be0:	d829      	bhi.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	2b20      	cmp	r3, #32
 8006be6:	d011      	beq.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	2b20      	cmp	r3, #32
 8006bec:	d823      	bhi.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d003      	beq.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	2b10      	cmp	r3, #16
 8006bf8:	d004      	beq.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8006bfa:	e01c      	b.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006bfc:	f7ff f9ac 	bl	8005f58 <HAL_RCC_GetPCLK1Freq>
 8006c00:	61f8      	str	r0, [r7, #28]
          break;
 8006c02:	e01d      	b.n	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c04:	f7ff f910 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8006c08:	61f8      	str	r0, [r7, #28]
          break;
 8006c0a:	e019      	b.n	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c0c:	4b0d      	ldr	r3, [pc, #52]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c18:	d10f      	bne.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8006c1a:	4b0c      	ldr	r3, [pc, #48]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006c1c:	61fb      	str	r3, [r7, #28]
          break;
 8006c1e:	e00c      	b.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c20:	4b08      	ldr	r3, [pc, #32]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d107      	bne.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8006c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c32:	61fb      	str	r3, [r7, #28]
          break;
 8006c34:	e003      	b.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8006c36:	bf00      	nop
 8006c38:	e29a      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006c3a:	bf00      	nop
 8006c3c:	e298      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006c3e:	bf00      	nop
        break;
 8006c40:	e296      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006c42:	bf00      	nop
 8006c44:	40021000 	.word	0x40021000
 8006c48:	0800db90 	.word	0x0800db90
 8006c4c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006c50:	4b9b      	ldr	r3, [pc, #620]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c5a:	613b      	str	r3, [r7, #16]
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	2bc0      	cmp	r3, #192	; 0xc0
 8006c60:	d021      	beq.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	2bc0      	cmp	r3, #192	; 0xc0
 8006c66:	d829      	bhi.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	2b80      	cmp	r3, #128	; 0x80
 8006c6c:	d011      	beq.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	2b80      	cmp	r3, #128	; 0x80
 8006c72:	d823      	bhi.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	2b40      	cmp	r3, #64	; 0x40
 8006c7e:	d004      	beq.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8006c80:	e01c      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c82:	f7ff f969 	bl	8005f58 <HAL_RCC_GetPCLK1Freq>
 8006c86:	61f8      	str	r0, [r7, #28]
          break;
 8006c88:	e01d      	b.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c8a:	f7ff f8cd 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8006c8e:	61f8      	str	r0, [r7, #28]
          break;
 8006c90:	e019      	b.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c92:	4b8b      	ldr	r3, [pc, #556]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c9e:	d10f      	bne.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8006ca0:	4b88      	ldr	r3, [pc, #544]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8006ca2:	61fb      	str	r3, [r7, #28]
          break;
 8006ca4:	e00c      	b.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ca6:	4b86      	ldr	r3, [pc, #536]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d107      	bne.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8006cb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cb8:	61fb      	str	r3, [r7, #28]
          break;
 8006cba:	e003      	b.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8006cbc:	bf00      	nop
 8006cbe:	e257      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006cc0:	bf00      	nop
 8006cc2:	e255      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006cc4:	bf00      	nop
        break;
 8006cc6:	e253      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006cc8:	4b7d      	ldr	r3, [pc, #500]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cd2:	613b      	str	r3, [r7, #16]
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cda:	d025      	beq.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ce2:	d82c      	bhi.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cea:	d013      	beq.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cf2:	d824      	bhi.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d004      	beq.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d00:	d004      	beq.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8006d02:	e01c      	b.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d04:	f7ff f928 	bl	8005f58 <HAL_RCC_GetPCLK1Freq>
 8006d08:	61f8      	str	r0, [r7, #28]
          break;
 8006d0a:	e01d      	b.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d0c:	f7ff f88c 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8006d10:	61f8      	str	r0, [r7, #28]
          break;
 8006d12:	e019      	b.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d14:	4b6a      	ldr	r3, [pc, #424]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d20:	d10f      	bne.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8006d22:	4b68      	ldr	r3, [pc, #416]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8006d24:	61fb      	str	r3, [r7, #28]
          break;
 8006d26:	e00c      	b.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d28:	4b65      	ldr	r3, [pc, #404]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d107      	bne.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8006d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d3a:	61fb      	str	r3, [r7, #28]
          break;
 8006d3c:	e003      	b.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8006d3e:	bf00      	nop
 8006d40:	e216      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006d42:	bf00      	nop
 8006d44:	e214      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006d46:	bf00      	nop
        break;
 8006d48:	e212      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006d4a:	4b5d      	ldr	r3, [pc, #372]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d54:	613b      	str	r3, [r7, #16]
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d5c:	d025      	beq.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d64:	d82c      	bhi.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d6c:	d013      	beq.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d74:	d824      	bhi.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d004      	beq.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d82:	d004      	beq.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8006d84:	e01c      	b.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d86:	f7ff f8e7 	bl	8005f58 <HAL_RCC_GetPCLK1Freq>
 8006d8a:	61f8      	str	r0, [r7, #28]
          break;
 8006d8c:	e01d      	b.n	8006dca <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d8e:	f7ff f84b 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8006d92:	61f8      	str	r0, [r7, #28]
          break;
 8006d94:	e019      	b.n	8006dca <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d96:	4b4a      	ldr	r3, [pc, #296]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006da2:	d10f      	bne.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8006da4:	4b47      	ldr	r3, [pc, #284]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8006da6:	61fb      	str	r3, [r7, #28]
          break;
 8006da8:	e00c      	b.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006daa:	4b45      	ldr	r3, [pc, #276]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d107      	bne.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8006db8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dbc:	61fb      	str	r3, [r7, #28]
          break;
 8006dbe:	e003      	b.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8006dc0:	bf00      	nop
 8006dc2:	e1d5      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006dc4:	bf00      	nop
 8006dc6:	e1d3      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006dc8:	bf00      	nop
        break;
 8006dca:	e1d1      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006dcc:	4b3c      	ldr	r3, [pc, #240]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006dde:	d00c      	beq.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006de6:	d864      	bhi.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dee:	d008      	beq.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006df6:	d030      	beq.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8006df8:	e05b      	b.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006dfa:	f7ff f815 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8006dfe:	61f8      	str	r0, [r7, #28]
          break;
 8006e00:	e05c      	b.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006e02:	4b2f      	ldr	r3, [pc, #188]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e0e:	d152      	bne.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8006e10:	4b2b      	ldr	r3, [pc, #172]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d04c      	beq.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006e1c:	4b28      	ldr	r3, [pc, #160]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	0a1b      	lsrs	r3, r3, #8
 8006e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e26:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	fb03 f202 	mul.w	r2, r3, r2
 8006e30:	4b23      	ldr	r3, [pc, #140]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	091b      	lsrs	r3, r3, #4
 8006e36:	f003 0307 	and.w	r3, r3, #7
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e40:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006e42:	4b1f      	ldr	r3, [pc, #124]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	0e5b      	lsrs	r3, r3, #25
 8006e48:	f003 0303 	and.w	r3, r3, #3
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	005b      	lsls	r3, r3, #1
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e56:	61fb      	str	r3, [r7, #28]
          break;
 8006e58:	e02d      	b.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8006e5a:	4b19      	ldr	r3, [pc, #100]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e66:	d128      	bne.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8006e68:	4b15      	ldr	r3, [pc, #84]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d022      	beq.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006e74:	4b12      	ldr	r3, [pc, #72]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	0a1b      	lsrs	r3, r3, #8
 8006e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e7e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	fb03 f202 	mul.w	r2, r3, r2
 8006e88:	4b0d      	ldr	r3, [pc, #52]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	091b      	lsrs	r3, r3, #4
 8006e8e:	f003 0307 	and.w	r3, r3, #7
 8006e92:	3301      	adds	r3, #1
 8006e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e98:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8006e9a:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	0e5b      	lsrs	r3, r3, #25
 8006ea0:	f003 0303 	and.w	r3, r3, #3
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eae:	61fb      	str	r3, [r7, #28]
          break;
 8006eb0:	e003      	b.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8006eb2:	bf00      	nop
 8006eb4:	e15c      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006eb6:	bf00      	nop
 8006eb8:	e15a      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006eba:	bf00      	nop
        break;
 8006ebc:	e158      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006ebe:	bf00      	nop
 8006ec0:	40021000 	.word	0x40021000
 8006ec4:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006ec8:	4b9d      	ldr	r3, [pc, #628]	; (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ed2:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d103      	bne.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006eda:	f7ff f853 	bl	8005f84 <HAL_RCC_GetPCLK2Freq>
 8006ede:	61f8      	str	r0, [r7, #28]
        break;
 8006ee0:	e146      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ee2:	f7fe ffa1 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8006ee6:	61f8      	str	r0, [r7, #28]
        break;
 8006ee8:	e142      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006eea:	4b95      	ldr	r3, [pc, #596]	; (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006ef4:	613b      	str	r3, [r7, #16]
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006efc:	d013      	beq.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f04:	d819      	bhi.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d004      	beq.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f12:	d004      	beq.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8006f14:	e011      	b.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f16:	f7ff f81f 	bl	8005f58 <HAL_RCC_GetPCLK1Freq>
 8006f1a:	61f8      	str	r0, [r7, #28]
          break;
 8006f1c:	e010      	b.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f1e:	f7fe ff83 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8006f22:	61f8      	str	r0, [r7, #28]
          break;
 8006f24:	e00c      	b.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f26:	4b86      	ldr	r3, [pc, #536]	; (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f32:	d104      	bne.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8006f34:	4b83      	ldr	r3, [pc, #524]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006f36:	61fb      	str	r3, [r7, #28]
          break;
 8006f38:	e001      	b.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8006f3a:	bf00      	nop
 8006f3c:	e118      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006f3e:	bf00      	nop
        break;
 8006f40:	e116      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006f42:	4b7f      	ldr	r3, [pc, #508]	; (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f4c:	613b      	str	r3, [r7, #16]
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f54:	d013      	beq.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f5c:	d819      	bhi.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d004      	beq.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f6a:	d004      	beq.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8006f6c:	e011      	b.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f6e:	f7fe fff3 	bl	8005f58 <HAL_RCC_GetPCLK1Freq>
 8006f72:	61f8      	str	r0, [r7, #28]
          break;
 8006f74:	e010      	b.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f76:	f7fe ff57 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8006f7a:	61f8      	str	r0, [r7, #28]
          break;
 8006f7c:	e00c      	b.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f7e:	4b70      	ldr	r3, [pc, #448]	; (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f8a:	d104      	bne.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8006f8c:	4b6d      	ldr	r3, [pc, #436]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006f8e:	61fb      	str	r3, [r7, #28]
          break;
 8006f90:	e001      	b.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8006f92:	bf00      	nop
 8006f94:	e0ec      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006f96:	bf00      	nop
        break;
 8006f98:	e0ea      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006f9a:	4b69      	ldr	r3, [pc, #420]	; (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006fa4:	613b      	str	r3, [r7, #16]
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fac:	d013      	beq.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fb4:	d819      	bhi.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d004      	beq.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc2:	d004      	beq.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8006fc4:	e011      	b.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006fc6:	f7fe ffc7 	bl	8005f58 <HAL_RCC_GetPCLK1Freq>
 8006fca:	61f8      	str	r0, [r7, #28]
          break;
 8006fcc:	e010      	b.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8006fce:	f7fe ff2b 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8006fd2:	61f8      	str	r0, [r7, #28]
          break;
 8006fd4:	e00c      	b.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fd6:	4b5a      	ldr	r3, [pc, #360]	; (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe2:	d104      	bne.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8006fe4:	4b57      	ldr	r3, [pc, #348]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006fe6:	61fb      	str	r3, [r7, #28]
          break;
 8006fe8:	e001      	b.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8006fea:	bf00      	nop
 8006fec:	e0c0      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006fee:	bf00      	nop
        break;
 8006ff0:	e0be      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006ff2:	4b53      	ldr	r3, [pc, #332]	; (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006ffc:	613b      	str	r3, [r7, #16]
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007004:	d02c      	beq.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800700c:	d833      	bhi.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007014:	d01a      	beq.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800701c:	d82b      	bhi.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d004      	beq.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800702a:	d004      	beq.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 800702c:	e023      	b.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 800702e:	f7fe ff93 	bl	8005f58 <HAL_RCC_GetPCLK1Freq>
 8007032:	61f8      	str	r0, [r7, #28]
          break;
 8007034:	e026      	b.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007036:	4b42      	ldr	r3, [pc, #264]	; (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b02      	cmp	r3, #2
 8007042:	d11a      	bne.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8007044:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007048:	61fb      	str	r3, [r7, #28]
          break;
 800704a:	e016      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800704c:	4b3c      	ldr	r3, [pc, #240]	; (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007058:	d111      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 800705a:	4b3a      	ldr	r3, [pc, #232]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800705c:	61fb      	str	r3, [r7, #28]
          break;
 800705e:	e00e      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007060:	4b37      	ldr	r3, [pc, #220]	; (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b02      	cmp	r3, #2
 800706c:	d109      	bne.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 800706e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007072:	61fb      	str	r3, [r7, #28]
          break;
 8007074:	e005      	b.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8007076:	bf00      	nop
 8007078:	e07a      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800707a:	bf00      	nop
 800707c:	e078      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800707e:	bf00      	nop
 8007080:	e076      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007082:	bf00      	nop
        break;
 8007084:	e074      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007086:	4b2e      	ldr	r3, [pc, #184]	; (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800708c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007090:	613b      	str	r3, [r7, #16]
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007098:	d02c      	beq.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070a0:	d833      	bhi.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070a8:	d01a      	beq.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070b0:	d82b      	bhi.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d004      	beq.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070be:	d004      	beq.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80070c0:	e023      	b.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80070c2:	f7fe ff49 	bl	8005f58 <HAL_RCC_GetPCLK1Freq>
 80070c6:	61f8      	str	r0, [r7, #28]
          break;
 80070c8:	e026      	b.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80070ca:	4b1d      	ldr	r3, [pc, #116]	; (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80070cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d11a      	bne.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 80070d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80070dc:	61fb      	str	r3, [r7, #28]
          break;
 80070de:	e016      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070e0:	4b17      	ldr	r3, [pc, #92]	; (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ec:	d111      	bne.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 80070ee:	4b15      	ldr	r3, [pc, #84]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80070f0:	61fb      	str	r3, [r7, #28]
          break;
 80070f2:	e00e      	b.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80070f4:	4b12      	ldr	r3, [pc, #72]	; (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80070f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d109      	bne.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8007102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007106:	61fb      	str	r3, [r7, #28]
          break;
 8007108:	e005      	b.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 800710a:	bf00      	nop
 800710c:	e030      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800710e:	bf00      	nop
 8007110:	e02e      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007112:	bf00      	nop
 8007114:	e02c      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007116:	bf00      	nop
        break;
 8007118:	e02a      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800711a:	4b09      	ldr	r3, [pc, #36]	; (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800711c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007120:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007124:	613b      	str	r3, [r7, #16]
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d004      	beq.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007132:	d009      	beq.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8007134:	e012      	b.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007136:	f7fe ff0f 	bl	8005f58 <HAL_RCC_GetPCLK1Freq>
 800713a:	61f8      	str	r0, [r7, #28]
          break;
 800713c:	e00e      	b.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 800713e:	bf00      	nop
 8007140:	40021000 	.word	0x40021000
 8007144:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007148:	4b0c      	ldr	r3, [pc, #48]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007154:	d101      	bne.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8007156:	4b0a      	ldr	r3, [pc, #40]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8007158:	61fb      	str	r3, [r7, #28]
          break;
 800715a:	bf00      	nop
        break;
 800715c:	e008      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800715e:	bf00      	nop
 8007160:	e006      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8007162:	bf00      	nop
 8007164:	e004      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8007166:	bf00      	nop
 8007168:	e002      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800716a:	bf00      	nop
 800716c:	e000      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800716e:	bf00      	nop
    }
  }

  return(frequency);
 8007170:	69fb      	ldr	r3, [r7, #28]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3720      	adds	r7, #32
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	40021000 	.word	0x40021000
 8007180:	00f42400 	.word	0x00f42400

08007184 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007192:	4b75      	ldr	r3, [pc, #468]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f003 0303 	and.w	r3, r3, #3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d018      	beq.n	80071d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800719e:	4b72      	ldr	r3, [pc, #456]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f003 0203 	and.w	r2, r3, #3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d10d      	bne.n	80071ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
       ||
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d009      	beq.n	80071ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80071b6:	4b6c      	ldr	r3, [pc, #432]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	091b      	lsrs	r3, r3, #4
 80071bc:	f003 0307 	and.w	r3, r3, #7
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
       ||
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d047      	beq.n	800725a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	73fb      	strb	r3, [r7, #15]
 80071ce:	e044      	b.n	800725a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2b03      	cmp	r3, #3
 80071d6:	d018      	beq.n	800720a <RCCEx_PLLSAI1_Config+0x86>
 80071d8:	2b03      	cmp	r3, #3
 80071da:	d825      	bhi.n	8007228 <RCCEx_PLLSAI1_Config+0xa4>
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d002      	beq.n	80071e6 <RCCEx_PLLSAI1_Config+0x62>
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d009      	beq.n	80071f8 <RCCEx_PLLSAI1_Config+0x74>
 80071e4:	e020      	b.n	8007228 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80071e6:	4b60      	ldr	r3, [pc, #384]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d11d      	bne.n	800722e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071f6:	e01a      	b.n	800722e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80071f8:	4b5b      	ldr	r3, [pc, #364]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007200:	2b00      	cmp	r3, #0
 8007202:	d116      	bne.n	8007232 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007208:	e013      	b.n	8007232 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800720a:	4b57      	ldr	r3, [pc, #348]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10f      	bne.n	8007236 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007216:	4b54      	ldr	r3, [pc, #336]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d109      	bne.n	8007236 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007226:	e006      	b.n	8007236 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	73fb      	strb	r3, [r7, #15]
      break;
 800722c:	e004      	b.n	8007238 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800722e:	bf00      	nop
 8007230:	e002      	b.n	8007238 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007232:	bf00      	nop
 8007234:	e000      	b.n	8007238 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007236:	bf00      	nop
    }

    if(status == HAL_OK)
 8007238:	7bfb      	ldrb	r3, [r7, #15]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10d      	bne.n	800725a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800723e:	4b4a      	ldr	r3, [pc, #296]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6819      	ldr	r1, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	3b01      	subs	r3, #1
 8007250:	011b      	lsls	r3, r3, #4
 8007252:	430b      	orrs	r3, r1
 8007254:	4944      	ldr	r1, [pc, #272]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007256:	4313      	orrs	r3, r2
 8007258:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800725a:	7bfb      	ldrb	r3, [r7, #15]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d17d      	bne.n	800735c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007260:	4b41      	ldr	r3, [pc, #260]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a40      	ldr	r2, [pc, #256]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007266:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800726a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800726c:	f7fa fd76 	bl	8001d5c <HAL_GetTick>
 8007270:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007272:	e009      	b.n	8007288 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007274:	f7fa fd72 	bl	8001d5c <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	2b02      	cmp	r3, #2
 8007280:	d902      	bls.n	8007288 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	73fb      	strb	r3, [r7, #15]
        break;
 8007286:	e005      	b.n	8007294 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007288:	4b37      	ldr	r3, [pc, #220]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1ef      	bne.n	8007274 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007294:	7bfb      	ldrb	r3, [r7, #15]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d160      	bne.n	800735c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d111      	bne.n	80072c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072a0:	4b31      	ldr	r3, [pc, #196]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80072a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	6892      	ldr	r2, [r2, #8]
 80072b0:	0211      	lsls	r1, r2, #8
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	68d2      	ldr	r2, [r2, #12]
 80072b6:	0912      	lsrs	r2, r2, #4
 80072b8:	0452      	lsls	r2, r2, #17
 80072ba:	430a      	orrs	r2, r1
 80072bc:	492a      	ldr	r1, [pc, #168]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	610b      	str	r3, [r1, #16]
 80072c2:	e027      	b.n	8007314 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d112      	bne.n	80072f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072ca:	4b27      	ldr	r3, [pc, #156]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80072d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	6892      	ldr	r2, [r2, #8]
 80072da:	0211      	lsls	r1, r2, #8
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	6912      	ldr	r2, [r2, #16]
 80072e0:	0852      	lsrs	r2, r2, #1
 80072e2:	3a01      	subs	r2, #1
 80072e4:	0552      	lsls	r2, r2, #21
 80072e6:	430a      	orrs	r2, r1
 80072e8:	491f      	ldr	r1, [pc, #124]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	610b      	str	r3, [r1, #16]
 80072ee:	e011      	b.n	8007314 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072f0:	4b1d      	ldr	r3, [pc, #116]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80072f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	6892      	ldr	r2, [r2, #8]
 8007300:	0211      	lsls	r1, r2, #8
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	6952      	ldr	r2, [r2, #20]
 8007306:	0852      	lsrs	r2, r2, #1
 8007308:	3a01      	subs	r2, #1
 800730a:	0652      	lsls	r2, r2, #25
 800730c:	430a      	orrs	r2, r1
 800730e:	4916      	ldr	r1, [pc, #88]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007310:	4313      	orrs	r3, r2
 8007312:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007314:	4b14      	ldr	r3, [pc, #80]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a13      	ldr	r2, [pc, #76]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 800731a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800731e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007320:	f7fa fd1c 	bl	8001d5c <HAL_GetTick>
 8007324:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007326:	e009      	b.n	800733c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007328:	f7fa fd18 	bl	8001d5c <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	2b02      	cmp	r3, #2
 8007334:	d902      	bls.n	800733c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	73fb      	strb	r3, [r7, #15]
          break;
 800733a:	e005      	b.n	8007348 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800733c:	4b0a      	ldr	r3, [pc, #40]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d0ef      	beq.n	8007328 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d106      	bne.n	800735c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800734e:	4b06      	ldr	r3, [pc, #24]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007350:	691a      	ldr	r2, [r3, #16]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	4904      	ldr	r1, [pc, #16]	; (8007368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007358:	4313      	orrs	r3, r2
 800735a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800735c:	7bfb      	ldrb	r3, [r7, #15]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	40021000 	.word	0x40021000

0800736c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800737a:	4b6a      	ldr	r3, [pc, #424]	; (8007524 <RCCEx_PLLSAI2_Config+0x1b8>)
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	f003 0303 	and.w	r3, r3, #3
 8007382:	2b00      	cmp	r3, #0
 8007384:	d018      	beq.n	80073b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007386:	4b67      	ldr	r3, [pc, #412]	; (8007524 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	f003 0203 	and.w	r2, r3, #3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	429a      	cmp	r2, r3
 8007394:	d10d      	bne.n	80073b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
       ||
 800739a:	2b00      	cmp	r3, #0
 800739c:	d009      	beq.n	80073b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800739e:	4b61      	ldr	r3, [pc, #388]	; (8007524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	091b      	lsrs	r3, r3, #4
 80073a4:	f003 0307 	and.w	r3, r3, #7
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
       ||
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d047      	beq.n	8007442 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	73fb      	strb	r3, [r7, #15]
 80073b6:	e044      	b.n	8007442 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d018      	beq.n	80073f2 <RCCEx_PLLSAI2_Config+0x86>
 80073c0:	2b03      	cmp	r3, #3
 80073c2:	d825      	bhi.n	8007410 <RCCEx_PLLSAI2_Config+0xa4>
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d002      	beq.n	80073ce <RCCEx_PLLSAI2_Config+0x62>
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d009      	beq.n	80073e0 <RCCEx_PLLSAI2_Config+0x74>
 80073cc:	e020      	b.n	8007410 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80073ce:	4b55      	ldr	r3, [pc, #340]	; (8007524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0302 	and.w	r3, r3, #2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d11d      	bne.n	8007416 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073de:	e01a      	b.n	8007416 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80073e0:	4b50      	ldr	r3, [pc, #320]	; (8007524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d116      	bne.n	800741a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073f0:	e013      	b.n	800741a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80073f2:	4b4c      	ldr	r3, [pc, #304]	; (8007524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10f      	bne.n	800741e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80073fe:	4b49      	ldr	r3, [pc, #292]	; (8007524 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d109      	bne.n	800741e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800740e:	e006      	b.n	800741e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	73fb      	strb	r3, [r7, #15]
      break;
 8007414:	e004      	b.n	8007420 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007416:	bf00      	nop
 8007418:	e002      	b.n	8007420 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800741a:	bf00      	nop
 800741c:	e000      	b.n	8007420 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800741e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007420:	7bfb      	ldrb	r3, [r7, #15]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10d      	bne.n	8007442 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007426:	4b3f      	ldr	r3, [pc, #252]	; (8007524 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6819      	ldr	r1, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	3b01      	subs	r3, #1
 8007438:	011b      	lsls	r3, r3, #4
 800743a:	430b      	orrs	r3, r1
 800743c:	4939      	ldr	r1, [pc, #228]	; (8007524 <RCCEx_PLLSAI2_Config+0x1b8>)
 800743e:	4313      	orrs	r3, r2
 8007440:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007442:	7bfb      	ldrb	r3, [r7, #15]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d167      	bne.n	8007518 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007448:	4b36      	ldr	r3, [pc, #216]	; (8007524 <RCCEx_PLLSAI2_Config+0x1b8>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a35      	ldr	r2, [pc, #212]	; (8007524 <RCCEx_PLLSAI2_Config+0x1b8>)
 800744e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007454:	f7fa fc82 	bl	8001d5c <HAL_GetTick>
 8007458:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800745a:	e009      	b.n	8007470 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800745c:	f7fa fc7e 	bl	8001d5c <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	2b02      	cmp	r3, #2
 8007468:	d902      	bls.n	8007470 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	73fb      	strb	r3, [r7, #15]
        break;
 800746e:	e005      	b.n	800747c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007470:	4b2c      	ldr	r3, [pc, #176]	; (8007524 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1ef      	bne.n	800745c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800747c:	7bfb      	ldrb	r3, [r7, #15]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d14a      	bne.n	8007518 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d111      	bne.n	80074ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007488:	4b26      	ldr	r3, [pc, #152]	; (8007524 <RCCEx_PLLSAI2_Config+0x1b8>)
 800748a:	695b      	ldr	r3, [r3, #20]
 800748c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	6892      	ldr	r2, [r2, #8]
 8007498:	0211      	lsls	r1, r2, #8
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	68d2      	ldr	r2, [r2, #12]
 800749e:	0912      	lsrs	r2, r2, #4
 80074a0:	0452      	lsls	r2, r2, #17
 80074a2:	430a      	orrs	r2, r1
 80074a4:	491f      	ldr	r1, [pc, #124]	; (8007524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	614b      	str	r3, [r1, #20]
 80074aa:	e011      	b.n	80074d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80074ac:	4b1d      	ldr	r3, [pc, #116]	; (8007524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80074b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	6892      	ldr	r2, [r2, #8]
 80074bc:	0211      	lsls	r1, r2, #8
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	6912      	ldr	r2, [r2, #16]
 80074c2:	0852      	lsrs	r2, r2, #1
 80074c4:	3a01      	subs	r2, #1
 80074c6:	0652      	lsls	r2, r2, #25
 80074c8:	430a      	orrs	r2, r1
 80074ca:	4916      	ldr	r1, [pc, #88]	; (8007524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074cc:	4313      	orrs	r3, r2
 80074ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80074d0:	4b14      	ldr	r3, [pc, #80]	; (8007524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a13      	ldr	r2, [pc, #76]	; (8007524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074dc:	f7fa fc3e 	bl	8001d5c <HAL_GetTick>
 80074e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80074e2:	e009      	b.n	80074f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80074e4:	f7fa fc3a 	bl	8001d5c <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d902      	bls.n	80074f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	73fb      	strb	r3, [r7, #15]
          break;
 80074f6:	e005      	b.n	8007504 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80074f8:	4b0a      	ldr	r3, [pc, #40]	; (8007524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d0ef      	beq.n	80074e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007504:	7bfb      	ldrb	r3, [r7, #15]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d106      	bne.n	8007518 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800750a:	4b06      	ldr	r3, [pc, #24]	; (8007524 <RCCEx_PLLSAI2_Config+0x1b8>)
 800750c:	695a      	ldr	r2, [r3, #20]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	4904      	ldr	r1, [pc, #16]	; (8007524 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007514:	4313      	orrs	r3, r2
 8007516:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007518:	7bfb      	ldrb	r3, [r7, #15]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	40021000 	.word	0x40021000

08007528 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007528:	b480      	push	{r7}
 800752a:	b089      	sub	sp, #36	; 0x24
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007532:	2300      	movs	r3, #0
 8007534:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800753a:	2300      	movs	r3, #0
 800753c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007544:	d10c      	bne.n	8007560 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007546:	4b6e      	ldr	r3, [pc, #440]	; (8007700 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800754c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007550:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007558:	d112      	bne.n	8007580 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800755a:	4b6a      	ldr	r3, [pc, #424]	; (8007704 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800755c:	61fb      	str	r3, [r7, #28]
 800755e:	e00f      	b.n	8007580 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007566:	d10b      	bne.n	8007580 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007568:	4b65      	ldr	r3, [pc, #404]	; (8007700 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800756a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800756e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007572:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800757a:	d101      	bne.n	8007580 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800757c:	4b61      	ldr	r3, [pc, #388]	; (8007704 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800757e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	2b00      	cmp	r3, #0
 8007584:	f040 80b4 	bne.w	80076f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007592:	d003      	beq.n	800759c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800759a:	d135      	bne.n	8007608 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800759c:	4b58      	ldr	r3, [pc, #352]	; (8007700 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075a8:	f040 80a1 	bne.w	80076ee <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80075ac:	4b54      	ldr	r3, [pc, #336]	; (8007700 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 809a 	beq.w	80076ee <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80075ba:	4b51      	ldr	r3, [pc, #324]	; (8007700 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	091b      	lsrs	r3, r3, #4
 80075c0:	f003 0307 	and.w	r3, r3, #7
 80075c4:	3301      	adds	r3, #1
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075cc:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80075ce:	4b4c      	ldr	r3, [pc, #304]	; (8007700 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	0a1b      	lsrs	r3, r3, #8
 80075d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075d8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10a      	bne.n	80075f6 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80075e0:	4b47      	ldr	r3, [pc, #284]	; (8007700 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 80075ec:	2311      	movs	r3, #17
 80075ee:	617b      	str	r3, [r7, #20]
 80075f0:	e001      	b.n	80075f6 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80075f2:	2307      	movs	r3, #7
 80075f4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	fb03 f202 	mul.w	r2, r3, r2
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	fbb2 f3f3 	udiv	r3, r2, r3
 8007604:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007606:	e072      	b.n	80076ee <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d133      	bne.n	8007676 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800760e:	4b3c      	ldr	r3, [pc, #240]	; (8007700 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800761a:	d169      	bne.n	80076f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800761c:	4b38      	ldr	r3, [pc, #224]	; (8007700 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d063      	beq.n	80076f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007628:	4b35      	ldr	r3, [pc, #212]	; (8007700 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	091b      	lsrs	r3, r3, #4
 800762e:	f003 0307 	and.w	r3, r3, #7
 8007632:	3301      	adds	r3, #1
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	fbb2 f3f3 	udiv	r3, r2, r3
 800763a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800763c:	4b30      	ldr	r3, [pc, #192]	; (8007700 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	0a1b      	lsrs	r3, r3, #8
 8007642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007646:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10a      	bne.n	8007664 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800764e:	4b2c      	ldr	r3, [pc, #176]	; (8007700 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800765a:	2311      	movs	r3, #17
 800765c:	617b      	str	r3, [r7, #20]
 800765e:	e001      	b.n	8007664 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8007660:	2307      	movs	r3, #7
 8007662:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	fb03 f202 	mul.w	r2, r3, r2
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007672:	61fb      	str	r3, [r7, #28]
 8007674:	e03c      	b.n	80076f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800767c:	d003      	beq.n	8007686 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007684:	d134      	bne.n	80076f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8007686:	4b1e      	ldr	r3, [pc, #120]	; (8007700 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800768e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007692:	d12d      	bne.n	80076f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8007694:	4b1a      	ldr	r3, [pc, #104]	; (8007700 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d027      	beq.n	80076f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80076a0:	4b17      	ldr	r3, [pc, #92]	; (8007700 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	091b      	lsrs	r3, r3, #4
 80076a6:	f003 0307 	and.w	r3, r3, #7
 80076aa:	3301      	adds	r3, #1
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b2:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80076b4:	4b12      	ldr	r3, [pc, #72]	; (8007700 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	0a1b      	lsrs	r3, r3, #8
 80076ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076be:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10a      	bne.n	80076dc <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80076c6:	4b0e      	ldr	r3, [pc, #56]	; (8007700 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80076d2:	2311      	movs	r3, #17
 80076d4:	617b      	str	r3, [r7, #20]
 80076d6:	e001      	b.n	80076dc <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80076d8:	2307      	movs	r3, #7
 80076da:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	fb03 f202 	mul.w	r2, r3, r2
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ea:	61fb      	str	r3, [r7, #28]
 80076ec:	e000      	b.n	80076f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80076ee:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80076f0:	69fb      	ldr	r3, [r7, #28]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3724      	adds	r7, #36	; 0x24
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	40021000 	.word	0x40021000
 8007704:	001fff68 	.word	0x001fff68

08007708 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e155      	b.n	80079c6 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d106      	bne.n	8007734 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7fa f9b8 	bl	8001aa4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f959 	bl	80079ec <SAI_Disable>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e140      	b.n	80079c6 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2202      	movs	r2, #2
 8007748:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	2b02      	cmp	r3, #2
 8007752:	d00c      	beq.n	800776e <HAL_SAI_Init+0x66>
 8007754:	2b02      	cmp	r3, #2
 8007756:	d80d      	bhi.n	8007774 <HAL_SAI_Init+0x6c>
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <HAL_SAI_Init+0x5a>
 800775c:	2b01      	cmp	r3, #1
 800775e:	d003      	beq.n	8007768 <HAL_SAI_Init+0x60>
 8007760:	e008      	b.n	8007774 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007762:	2300      	movs	r3, #0
 8007764:	61fb      	str	r3, [r7, #28]
      break;
 8007766:	e008      	b.n	800777a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007768:	2310      	movs	r3, #16
 800776a:	61fb      	str	r3, [r7, #28]
      break;
 800776c:	e005      	b.n	800777a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800776e:	2320      	movs	r3, #32
 8007770:	61fb      	str	r3, [r7, #28]
      break;
 8007772:	e002      	b.n	800777a <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8007774:	2300      	movs	r3, #0
 8007776:	61fb      	str	r3, [r7, #28]
      break;
 8007778:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	2b03      	cmp	r3, #3
 8007780:	d81d      	bhi.n	80077be <HAL_SAI_Init+0xb6>
 8007782:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <HAL_SAI_Init+0x80>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	08007799 	.word	0x08007799
 800778c:	0800779f 	.word	0x0800779f
 8007790:	080077a7 	.word	0x080077a7
 8007794:	080077af 	.word	0x080077af
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007798:	2300      	movs	r3, #0
 800779a:	617b      	str	r3, [r7, #20]
      break;
 800779c:	e012      	b.n	80077c4 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800779e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077a2:	617b      	str	r3, [r7, #20]
      break;
 80077a4:	e00e      	b.n	80077c4 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80077a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077aa:	617b      	str	r3, [r7, #20]
      break;
 80077ac:	e00a      	b.n	80077c4 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80077ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077b2:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	f043 0301 	orr.w	r3, r3, #1
 80077ba:	61fb      	str	r3, [r7, #28]
      break;
 80077bc:	e002      	b.n	80077c4 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80077be:	2300      	movs	r3, #0
 80077c0:	617b      	str	r3, [r7, #20]
      break;
 80077c2:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a81      	ldr	r2, [pc, #516]	; (80079d0 <HAL_SAI_Init+0x2c8>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d004      	beq.n	80077d8 <HAL_SAI_Init+0xd0>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a80      	ldr	r2, [pc, #512]	; (80079d4 <HAL_SAI_Init+0x2cc>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d103      	bne.n	80077e0 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 80077d8:	4a7f      	ldr	r2, [pc, #508]	; (80079d8 <HAL_SAI_Init+0x2d0>)
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	6013      	str	r3, [r2, #0]
 80077de:	e002      	b.n	80077e6 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80077e0:	4a7e      	ldr	r2, [pc, #504]	; (80079dc <HAL_SAI_Init+0x2d4>)
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d041      	beq.n	8007872 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a77      	ldr	r2, [pc, #476]	; (80079d0 <HAL_SAI_Init+0x2c8>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d004      	beq.n	8007802 <HAL_SAI_Init+0xfa>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a75      	ldr	r2, [pc, #468]	; (80079d4 <HAL_SAI_Init+0x2cc>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d105      	bne.n	800780e <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007802:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007806:	f7fe ff4f 	bl	80066a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800780a:	6138      	str	r0, [r7, #16]
 800780c:	e004      	b.n	8007818 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800780e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007812:	f7fe ff49 	bl	80066a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007816:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	4613      	mov	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	4413      	add	r3, r2
 8007820:	005b      	lsls	r3, r3, #1
 8007822:	461a      	mov	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	69db      	ldr	r3, [r3, #28]
 8007828:	025b      	lsls	r3, r3, #9
 800782a:	fbb2 f3f3 	udiv	r3, r2, r3
 800782e:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4a6b      	ldr	r2, [pc, #428]	; (80079e0 <HAL_SAI_Init+0x2d8>)
 8007834:	fba2 2303 	umull	r2, r3, r2, r3
 8007838:	08da      	lsrs	r2, r3, #3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800783e:	68f9      	ldr	r1, [r7, #12]
 8007840:	4b67      	ldr	r3, [pc, #412]	; (80079e0 <HAL_SAI_Init+0x2d8>)
 8007842:	fba3 2301 	umull	r2, r3, r3, r1
 8007846:	08da      	lsrs	r2, r3, #3
 8007848:	4613      	mov	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	1aca      	subs	r2, r1, r3
 8007852:	2a08      	cmp	r2, #8
 8007854:	d904      	bls.n	8007860 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a1b      	ldr	r3, [r3, #32]
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007864:	2b04      	cmp	r3, #4
 8007866:	d104      	bne.n	8007872 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a1b      	ldr	r3, [r3, #32]
 800786c:	085a      	lsrs	r2, r3, #1
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <HAL_SAI_Init+0x17a>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	2b02      	cmp	r3, #2
 8007880:	d109      	bne.n	8007896 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007886:	2b01      	cmp	r3, #1
 8007888:	d101      	bne.n	800788e <HAL_SAI_Init+0x186>
 800788a:	2300      	movs	r3, #0
 800788c:	e001      	b.n	8007892 <HAL_SAI_Init+0x18a>
 800788e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007892:	61bb      	str	r3, [r7, #24]
 8007894:	e008      	b.n	80078a8 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789a:	2b01      	cmp	r3, #1
 800789c:	d102      	bne.n	80078a4 <HAL_SAI_Init+0x19c>
 800789e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078a2:	e000      	b.n	80078a6 <HAL_SAI_Init+0x19e>
 80078a4:	2300      	movs	r3, #0
 80078a6:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6819      	ldr	r1, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	4b4c      	ldr	r3, [pc, #304]	; (80079e4 <HAL_SAI_Init+0x2dc>)
 80078b4:	400b      	ands	r3, r1
 80078b6:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	6819      	ldr	r1, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685a      	ldr	r2, [r3, #4]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80078cc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d2:	431a      	orrs	r2, r3
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 80078e0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80078ec:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	051b      	lsls	r3, r3, #20
 80078f4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	6812      	ldr	r2, [r2, #0]
 8007908:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800790c:	f023 030f 	bic.w	r3, r3, #15
 8007910:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6859      	ldr	r1, [r3, #4]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	699a      	ldr	r2, [r3, #24]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007920:	431a      	orrs	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007926:	431a      	orrs	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	430a      	orrs	r2, r1
 800792e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6899      	ldr	r1, [r3, #8]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	4b2b      	ldr	r3, [pc, #172]	; (80079e8 <HAL_SAI_Init+0x2e0>)
 800793c:	400b      	ands	r3, r1
 800793e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6899      	ldr	r1, [r3, #8]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007950:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8007956:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800795c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007962:	3b01      	subs	r3, #1
 8007964:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007966:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	430a      	orrs	r2, r1
 800796e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68d9      	ldr	r1, [r3, #12]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800797e:	400b      	ands	r3, r1
 8007980:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68d9      	ldr	r1, [r3, #12]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007990:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007996:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007998:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800799e:	3b01      	subs	r3, #1
 80079a0:	021b      	lsls	r3, r3, #8
 80079a2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	430a      	orrs	r2, r1
 80079aa:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3720      	adds	r7, #32
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	40015404 	.word	0x40015404
 80079d4:	40015424 	.word	0x40015424
 80079d8:	40015400 	.word	0x40015400
 80079dc:	40015800 	.word	0x40015800
 80079e0:	cccccccd 	.word	0xcccccccd
 80079e4:	ff05c010 	.word	0xff05c010
 80079e8:	fff88000 	.word	0xfff88000

080079ec <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80079f4:	4b18      	ldr	r3, [pc, #96]	; (8007a58 <SAI_Disable+0x6c>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a18      	ldr	r2, [pc, #96]	; (8007a5c <SAI_Disable+0x70>)
 80079fa:	fba2 2303 	umull	r2, r3, r2, r3
 80079fe:	0b1b      	lsrs	r3, r3, #12
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007a16:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10a      	bne.n	8007a34 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	72fb      	strb	r3, [r7, #11]
      break;
 8007a32:	e009      	b.n	8007a48 <SAI_Disable+0x5c>
    }
    count--;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	3b01      	subs	r3, #1
 8007a38:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d1e7      	bne.n	8007a18 <SAI_Disable+0x2c>

  return status;
 8007a48:	7afb      	ldrb	r3, [r7, #11]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	20000000 	.word	0x20000000
 8007a5c:	95cbec1b 	.word	0x95cbec1b

08007a60 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e022      	b.n	8007ab8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d105      	bne.n	8007a8a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7f9 fe2f 	bl	80016e8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2203      	movs	r2, #3
 8007a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f814 	bl	8007ac0 <HAL_SD_InitCard>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e00a      	b.n	8007ab8 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007ac0:	b5b0      	push	{r4, r5, r7, lr}
 8007ac2:	b08e      	sub	sp, #56	; 0x38
 8007ac4:	af04      	add	r7, sp, #16
 8007ac6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007acc:	2300      	movs	r3, #0
 8007ace:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007adc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007ae0:	f7fe fde2 	bl	80066a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ae4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d109      	bne.n	8007b00 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007afa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e07b      	b.n	8007bf8 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	09db      	lsrs	r3, r3, #7
 8007b04:	4a3e      	ldr	r2, [pc, #248]	; (8007c00 <HAL_SD_InitCard+0x140>)
 8007b06:	fba2 2303 	umull	r2, r3, r2, r3
 8007b0a:	091b      	lsrs	r3, r3, #4
 8007b0c:	3b02      	subs	r3, #2
 8007b0e:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681d      	ldr	r5, [r3, #0]
 8007b14:	466c      	mov	r4, sp
 8007b16:	f107 0314 	add.w	r3, r7, #20
 8007b1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007b22:	f107 0308 	add.w	r3, r7, #8
 8007b26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b28:	4628      	mov	r0, r5
 8007b2a:	f002 fa0f 	bl	8009f4c <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b3c:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f002 fa3c 	bl	8009fc0 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b56:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	3302      	adds	r3, #2
 8007b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b62:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8007b64:	4a27      	ldr	r2, [pc, #156]	; (8007c04 <HAL_SD_InitCard+0x144>)
 8007b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fa f900 	bl	8001d74 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fb77 	bl	8008268 <SD_PowerON>
 8007b7a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b7c:	6a3b      	ldr	r3, [r7, #32]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00b      	beq.n	8007b9a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	431a      	orrs	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e02e      	b.n	8007bf8 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fa96 	bl	80080cc <SD_InitCard>
 8007ba0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ba2:	6a3b      	ldr	r3, [r7, #32]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00b      	beq.n	8007bc0 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e01b      	b.n	8007bf8 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f002 fa8c 	bl	800a0e6 <SDMMC_CmdBlockLength>
 8007bce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00f      	beq.n	8007bf6 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a0b      	ldr	r2, [pc, #44]	; (8007c08 <HAL_SD_InitCard+0x148>)
 8007bdc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	431a      	orrs	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e000      	b.n	8007bf8 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3728      	adds	r7, #40	; 0x28
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bdb0      	pop	{r4, r5, r7, pc}
 8007c00:	014f8b59 	.word	0x014f8b59
 8007c04:	00012110 	.word	0x00012110
 8007c08:	004005ff 	.word	0x004005ff

08007c0c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c1a:	0f9b      	lsrs	r3, r3, #30
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c26:	0e9b      	lsrs	r3, r3, #26
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	f003 030f 	and.w	r3, r3, #15
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c38:	0e1b      	lsrs	r3, r3, #24
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	f003 0303 	and.w	r3, r3, #3
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c4a:	0c1b      	lsrs	r3, r3, #16
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c56:	0a1b      	lsrs	r3, r3, #8
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c62:	b2da      	uxtb	r2, r3
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c6c:	0d1b      	lsrs	r3, r3, #20
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c78:	0c1b      	lsrs	r3, r3, #16
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	f003 030f 	and.w	r3, r3, #15
 8007c80:	b2da      	uxtb	r2, r3
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c8a:	0bdb      	lsrs	r3, r3, #15
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	f003 0301 	and.w	r3, r3, #1
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c9c:	0b9b      	lsrs	r3, r3, #14
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cae:	0b5b      	lsrs	r3, r3, #13
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	b2da      	uxtb	r2, r3
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cc0:	0b1b      	lsrs	r3, r3, #12
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d163      	bne.n	8007da4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ce0:	009a      	lsls	r2, r3, #2
 8007ce2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007cec:	0f92      	lsrs	r2, r2, #30
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cf8:	0edb      	lsrs	r3, r3, #27
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	f003 0307 	and.w	r3, r3, #7
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d0a:	0e1b      	lsrs	r3, r3, #24
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	f003 0307 	and.w	r3, r3, #7
 8007d12:	b2da      	uxtb	r2, r3
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d1c:	0d5b      	lsrs	r3, r3, #21
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	f003 0307 	and.w	r3, r3, #7
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d2e:	0c9b      	lsrs	r3, r3, #18
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	f003 0307 	and.w	r3, r3, #7
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d40:	0bdb      	lsrs	r3, r3, #15
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	f003 0307 	and.w	r3, r3, #7
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	1c5a      	adds	r2, r3, #1
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	7e1b      	ldrb	r3, [r3, #24]
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	f003 0307 	and.w	r3, r3, #7
 8007d62:	3302      	adds	r3, #2
 8007d64:	2201      	movs	r2, #1
 8007d66:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007d6e:	fb03 f202 	mul.w	r2, r3, r2
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	7a1b      	ldrb	r3, [r3, #8]
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	f003 030f 	and.w	r3, r3, #15
 8007d80:	2201      	movs	r2, #1
 8007d82:	409a      	lsls	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007d90:	0a52      	lsrs	r2, r2, #9
 8007d92:	fb03 f202 	mul.w	r2, r3, r2
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007da0:	661a      	str	r2, [r3, #96]	; 0x60
 8007da2:	e031      	b.n	8007e08 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d11d      	bne.n	8007de8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007db0:	041b      	lsls	r3, r3, #16
 8007db2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dba:	0c1b      	lsrs	r3, r3, #16
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	029a      	lsls	r2, r3, #10
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ddc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	661a      	str	r2, [r3, #96]	; 0x60
 8007de6:	e00f      	b.n	8007e08 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a58      	ldr	r2, [pc, #352]	; (8007f50 <HAL_SD_GetCardCSD+0x344>)
 8007dee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e09d      	b.n	8007f44 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e0c:	0b9b      	lsrs	r3, r3, #14
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e1e:	09db      	lsrs	r3, r3, #7
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e26:	b2da      	uxtb	r2, r3
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e40:	0fdb      	lsrs	r3, r3, #31
 8007e42:	b2da      	uxtb	r2, r3
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e4c:	0f5b      	lsrs	r3, r3, #29
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	f003 0303 	and.w	r3, r3, #3
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e5e:	0e9b      	lsrs	r3, r3, #26
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	f003 0307 	and.w	r3, r3, #7
 8007e66:	b2da      	uxtb	r2, r3
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e70:	0d9b      	lsrs	r3, r3, #22
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	f003 030f 	and.w	r3, r3, #15
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e82:	0d5b      	lsrs	r3, r3, #21
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e9e:	0c1b      	lsrs	r3, r3, #16
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	b2da      	uxtb	r2, r3
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb2:	0bdb      	lsrs	r3, r3, #15
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec6:	0b9b      	lsrs	r3, r3, #14
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	b2da      	uxtb	r2, r3
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eda:	0b5b      	lsrs	r3, r3, #13
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	b2da      	uxtb	r2, r3
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eee:	0b1b      	lsrs	r3, r3, #12
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	b2da      	uxtb	r2, r3
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f02:	0a9b      	lsrs	r3, r3, #10
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	f003 0303 	and.w	r3, r3, #3
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f16:	0a1b      	lsrs	r3, r3, #8
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	f003 0303 	and.w	r3, r3, #3
 8007f1e:	b2da      	uxtb	r2, r3
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f2a:	085b      	lsrs	r3, r3, #1
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	004005ff 	.word	0x004005ff

08007f54 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007f54:	b5b0      	push	{r4, r5, r7, lr}
 8007f56:	b090      	sub	sp, #64	; 0x40
 8007f58:	af04      	add	r7, sp, #16
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2203      	movs	r2, #3
 8007f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d02e      	beq.n	8007fd2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f7a:	d106      	bne.n	8007f8a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	639a      	str	r2, [r3, #56]	; 0x38
 8007f88:	e029      	b.n	8007fde <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f90:	d10a      	bne.n	8007fa8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f9f6 	bl	8008384 <SD_WideBus_Enable>
 8007f98:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa0:	431a      	orrs	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	639a      	str	r2, [r3, #56]	; 0x38
 8007fa6:	e01a      	b.n	8007fde <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10a      	bne.n	8007fc4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fa33 	bl	800841a <SD_WideBus_Disable>
 8007fb4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbc:	431a      	orrs	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	639a      	str	r2, [r3, #56]	; 0x38
 8007fc2:	e00c      	b.n	8007fde <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	639a      	str	r2, [r3, #56]	; 0x38
 8007fd0:	e005      	b.n	8007fde <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d007      	beq.n	8007ff6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a35      	ldr	r2, [pc, #212]	; (80080c0 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8007fec:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007ff4:	e042      	b.n	800807c <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007ff6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007ffa:	f7fe fb55 	bl	80066a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ffe:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	2b00      	cmp	r3, #0
 8008004:	d031      	beq.n	800806a <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	695b      	ldr	r3, [r3, #20]
 8008020:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	3302      	adds	r3, #2
 8008028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800802a:	fbb2 f3f3 	udiv	r3, r2, r3
 800802e:	4a25      	ldr	r2, [pc, #148]	; (80080c4 <HAL_SD_ConfigWideBusOperation+0x170>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d907      	bls.n	8008044 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	4a24      	ldr	r2, [pc, #144]	; (80080c8 <HAL_SD_ConfigWideBusOperation+0x174>)
 8008038:	fba2 2303 	umull	r2, r3, r2, r3
 800803c:	0ddb      	lsrs	r3, r3, #23
 800803e:	3b02      	subs	r3, #2
 8008040:	623b      	str	r3, [r7, #32]
 8008042:	e002      	b.n	800804a <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681d      	ldr	r5, [r3, #0]
 800804e:	466c      	mov	r4, sp
 8008050:	f107 0318 	add.w	r3, r7, #24
 8008054:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008058:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800805c:	f107 030c 	add.w	r3, r7, #12
 8008060:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008062:	4628      	mov	r0, r5
 8008064:	f001 ff72 	bl	8009f4c <SDMMC_Init>
 8008068:	e008      	b.n	800807c <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008084:	4618      	mov	r0, r3
 8008086:	f002 f82e 	bl	800a0e6 <SDMMC_CmdBlockLength>
 800808a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00c      	beq.n	80080ac <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a0a      	ldr	r2, [pc, #40]	; (80080c0 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8008098:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800809e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a0:	431a      	orrs	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80080b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3730      	adds	r7, #48	; 0x30
 80080bc:	46bd      	mov	sp, r7
 80080be:	bdb0      	pop	{r4, r5, r7, pc}
 80080c0:	004005ff 	.word	0x004005ff
 80080c4:	017d7840 	.word	0x017d7840
 80080c8:	55e63b89 	.word	0x55e63b89

080080cc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80080cc:	b5b0      	push	{r4, r5, r7, lr}
 80080ce:	b094      	sub	sp, #80	; 0x50
 80080d0:	af04      	add	r7, sp, #16
 80080d2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80080d4:	2301      	movs	r3, #1
 80080d6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4618      	mov	r0, r3
 80080de:	f001 ff7e 	bl	8009fde <SDMMC_GetPowerState>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d102      	bne.n	80080ee <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80080e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80080ec:	e0b8      	b.n	8008260 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d02f      	beq.n	8008156 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f002 f8fd 	bl	800a2fa <SDMMC_CmdSendCID>
 8008100:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <SD_InitCard+0x40>
    {
      return errorstate;
 8008108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800810a:	e0a9      	b.n	8008260 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2100      	movs	r1, #0
 8008112:	4618      	mov	r0, r3
 8008114:	f001 ffa8 	bl	800a068 <SDMMC_GetResponse>
 8008118:	4602      	mov	r2, r0
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2104      	movs	r1, #4
 8008124:	4618      	mov	r0, r3
 8008126:	f001 ff9f 	bl	800a068 <SDMMC_GetResponse>
 800812a:	4602      	mov	r2, r0
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2108      	movs	r1, #8
 8008136:	4618      	mov	r0, r3
 8008138:	f001 ff96 	bl	800a068 <SDMMC_GetResponse>
 800813c:	4602      	mov	r2, r0
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	210c      	movs	r1, #12
 8008148:	4618      	mov	r0, r3
 800814a:	f001 ff8d 	bl	800a068 <SDMMC_GetResponse>
 800814e:	4602      	mov	r2, r0
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800815a:	2b03      	cmp	r3, #3
 800815c:	d00d      	beq.n	800817a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f107 020e 	add.w	r2, r7, #14
 8008166:	4611      	mov	r1, r2
 8008168:	4618      	mov	r0, r3
 800816a:	f002 f903 	bl	800a374 <SDMMC_CmdSetRelAdd>
 800816e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <SD_InitCard+0xae>
    {
      return errorstate;
 8008176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008178:	e072      	b.n	8008260 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800817e:	2b03      	cmp	r3, #3
 8008180:	d036      	beq.n	80081f0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008182:	89fb      	ldrh	r3, [r7, #14]
 8008184:	461a      	mov	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008192:	041b      	lsls	r3, r3, #16
 8008194:	4619      	mov	r1, r3
 8008196:	4610      	mov	r0, r2
 8008198:	f002 f8cd 	bl	800a336 <SDMMC_CmdSendCSD>
 800819c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800819e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80081a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a6:	e05b      	b.n	8008260 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2100      	movs	r1, #0
 80081ae:	4618      	mov	r0, r3
 80081b0:	f001 ff5a 	bl	800a068 <SDMMC_GetResponse>
 80081b4:	4602      	mov	r2, r0
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2104      	movs	r1, #4
 80081c0:	4618      	mov	r0, r3
 80081c2:	f001 ff51 	bl	800a068 <SDMMC_GetResponse>
 80081c6:	4602      	mov	r2, r0
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2108      	movs	r1, #8
 80081d2:	4618      	mov	r0, r3
 80081d4:	f001 ff48 	bl	800a068 <SDMMC_GetResponse>
 80081d8:	4602      	mov	r2, r0
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	210c      	movs	r1, #12
 80081e4:	4618      	mov	r0, r3
 80081e6:	f001 ff3f 	bl	800a068 <SDMMC_GetResponse>
 80081ea:	4602      	mov	r2, r0
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2104      	movs	r1, #4
 80081f6:	4618      	mov	r0, r3
 80081f8:	f001 ff36 	bl	800a068 <SDMMC_GetResponse>
 80081fc:	4603      	mov	r3, r0
 80081fe:	0d1a      	lsrs	r2, r3, #20
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008204:	f107 0310 	add.w	r3, r7, #16
 8008208:	4619      	mov	r1, r3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7ff fcfe 	bl	8007c0c <HAL_SD_GetCardCSD>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d002      	beq.n	800821c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008216:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800821a:	e021      	b.n	8008260 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6819      	ldr	r1, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008224:	041b      	lsls	r3, r3, #16
 8008226:	2200      	movs	r2, #0
 8008228:	461c      	mov	r4, r3
 800822a:	4615      	mov	r5, r2
 800822c:	4622      	mov	r2, r4
 800822e:	462b      	mov	r3, r5
 8008230:	4608      	mov	r0, r1
 8008232:	f001 ff7a 	bl	800a12a <SDMMC_CmdSelDesel>
 8008236:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <SD_InitCard+0x176>
  {
    return errorstate;
 800823e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008240:	e00e      	b.n	8008260 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681d      	ldr	r5, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	466c      	mov	r4, sp
 800824a:	f103 0210 	add.w	r2, r3, #16
 800824e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008250:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008254:	3304      	adds	r3, #4
 8008256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008258:	4628      	mov	r0, r5
 800825a:	f001 fe77 	bl	8009f4c <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3740      	adds	r7, #64	; 0x40
 8008264:	46bd      	mov	sp, r7
 8008266:	bdb0      	pop	{r4, r5, r7, pc}

08008268 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b086      	sub	sp, #24
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	617b      	str	r3, [r7, #20]
 8008278:	2300      	movs	r3, #0
 800827a:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4618      	mov	r0, r3
 8008282:	f001 ff75 	bl	800a170 <SDMMC_CmdGoIdleState>
 8008286:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <SD_PowerON+0x2a>
  {
    return errorstate;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	e072      	b.n	8008378 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4618      	mov	r0, r3
 8008298:	f001 ff88 	bl	800a1ac <SDMMC_CmdOperCond>
 800829c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00d      	beq.n	80082c0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f001 ff5e 	bl	800a170 <SDMMC_CmdGoIdleState>
 80082b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d004      	beq.n	80082c6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	e05b      	b.n	8008378 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d137      	bne.n	800833e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2100      	movs	r1, #0
 80082d4:	4618      	mov	r0, r3
 80082d6:	f001 ff88 	bl	800a1ea <SDMMC_CmdAppCommand>
 80082da:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d02d      	beq.n	800833e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80082e6:	e047      	b.n	8008378 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2100      	movs	r1, #0
 80082ee:	4618      	mov	r0, r3
 80082f0:	f001 ff7b 	bl	800a1ea <SDMMC_CmdAppCommand>
 80082f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d001      	beq.n	8008300 <SD_PowerON+0x98>
    {
      return errorstate;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	e03b      	b.n	8008378 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	491e      	ldr	r1, [pc, #120]	; (8008380 <SD_PowerON+0x118>)
 8008306:	4618      	mov	r0, r3
 8008308:	f001 ff91 	bl	800a22e <SDMMC_CmdAppOperCommand>
 800830c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008314:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008318:	e02e      	b.n	8008378 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2100      	movs	r1, #0
 8008320:	4618      	mov	r0, r3
 8008322:	f001 fea1 	bl	800a068 <SDMMC_GetResponse>
 8008326:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	0fdb      	lsrs	r3, r3, #31
 800832c:	2b01      	cmp	r3, #1
 800832e:	d101      	bne.n	8008334 <SD_PowerON+0xcc>
 8008330:	2301      	movs	r3, #1
 8008332:	e000      	b.n	8008336 <SD_PowerON+0xce>
 8008334:	2300      	movs	r3, #0
 8008336:	613b      	str	r3, [r7, #16]

    count++;
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	3301      	adds	r3, #1
 800833c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008344:	4293      	cmp	r3, r2
 8008346:	d802      	bhi.n	800834e <SD_PowerON+0xe6>
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d0cc      	beq.n	80082e8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008354:	4293      	cmp	r3, r2
 8008356:	d902      	bls.n	800835e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008358:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800835c:	e00c      	b.n	8008378 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d003      	beq.n	8008370 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	645a      	str	r2, [r3, #68]	; 0x44
 800836e:	e002      	b.n	8008376 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3718      	adds	r7, #24
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	c1100000 	.word	0xc1100000

08008384 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800838c:	2300      	movs	r3, #0
 800838e:	60fb      	str	r3, [r7, #12]
 8008390:	2300      	movs	r3, #0
 8008392:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2100      	movs	r1, #0
 800839a:	4618      	mov	r0, r3
 800839c:	f001 fe64 	bl	800a068 <SDMMC_GetResponse>
 80083a0:	4603      	mov	r3, r0
 80083a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083aa:	d102      	bne.n	80083b2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80083ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083b0:	e02f      	b.n	8008412 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80083b2:	f107 030c 	add.w	r3, r7, #12
 80083b6:	4619      	mov	r1, r3
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 f879 	bl	80084b0 <SD_FindSCR>
 80083be:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	e023      	b.n	8008412 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d01c      	beq.n	800840e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083dc:	041b      	lsls	r3, r3, #16
 80083de:	4619      	mov	r1, r3
 80083e0:	4610      	mov	r0, r2
 80083e2:	f001 ff02 	bl	800a1ea <SDMMC_CmdAppCommand>
 80083e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	e00f      	b.n	8008412 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2102      	movs	r1, #2
 80083f8:	4618      	mov	r0, r3
 80083fa:	f001 ff3b 	bl	800a274 <SDMMC_CmdBusWidth>
 80083fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	e003      	b.n	8008412 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800840a:	2300      	movs	r3, #0
 800840c:	e001      	b.n	8008412 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800840e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008412:	4618      	mov	r0, r3
 8008414:	3718      	adds	r7, #24
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b086      	sub	sp, #24
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008422:	2300      	movs	r3, #0
 8008424:	60fb      	str	r3, [r7, #12]
 8008426:	2300      	movs	r3, #0
 8008428:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2100      	movs	r1, #0
 8008430:	4618      	mov	r0, r3
 8008432:	f001 fe19 	bl	800a068 <SDMMC_GetResponse>
 8008436:	4603      	mov	r3, r0
 8008438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800843c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008440:	d102      	bne.n	8008448 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008442:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008446:	e02f      	b.n	80084a8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008448:	f107 030c 	add.w	r3, r7, #12
 800844c:	4619      	mov	r1, r3
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f82e 	bl	80084b0 <SD_FindSCR>
 8008454:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d001      	beq.n	8008460 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	e023      	b.n	80084a8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d01c      	beq.n	80084a4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008472:	041b      	lsls	r3, r3, #16
 8008474:	4619      	mov	r1, r3
 8008476:	4610      	mov	r0, r2
 8008478:	f001 feb7 	bl	800a1ea <SDMMC_CmdAppCommand>
 800847c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d001      	beq.n	8008488 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	e00f      	b.n	80084a8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2100      	movs	r1, #0
 800848e:	4618      	mov	r0, r3
 8008490:	f001 fef0 	bl	800a274 <SDMMC_CmdBusWidth>
 8008494:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	e003      	b.n	80084a8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80084a0:	2300      	movs	r3, #0
 80084a2:	e001      	b.n	80084a8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80084a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80084b0:	b590      	push	{r4, r7, lr}
 80084b2:	b08f      	sub	sp, #60	; 0x3c
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80084ba:	f7f9 fc4f 	bl	8001d5c <HAL_GetTick>
 80084be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80084c0:	2300      	movs	r3, #0
 80084c2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80084c4:	2300      	movs	r3, #0
 80084c6:	60bb      	str	r3, [r7, #8]
 80084c8:	2300      	movs	r3, #0
 80084ca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2108      	movs	r1, #8
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 fe05 	bl	800a0e6 <SDMMC_CmdBlockLength>
 80084dc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80084de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80084e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e6:	e0a9      	b.n	800863c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f0:	041b      	lsls	r3, r3, #16
 80084f2:	4619      	mov	r1, r3
 80084f4:	4610      	mov	r0, r2
 80084f6:	f001 fe78 	bl	800a1ea <SDMMC_CmdAppCommand>
 80084fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80084fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008504:	e09a      	b.n	800863c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008506:	f04f 33ff 	mov.w	r3, #4294967295
 800850a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800850c:	2308      	movs	r3, #8
 800850e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008510:	2330      	movs	r3, #48	; 0x30
 8008512:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008514:	2302      	movs	r3, #2
 8008516:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008518:	2300      	movs	r3, #0
 800851a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800851c:	2301      	movs	r3, #1
 800851e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f107 0210 	add.w	r2, r7, #16
 8008528:	4611      	mov	r1, r2
 800852a:	4618      	mov	r0, r3
 800852c:	f001 fdaf 	bl	800a08e <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4618      	mov	r0, r3
 8008536:	f001 febf 	bl	800a2b8 <SDMMC_CmdSendSCR>
 800853a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800853c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853e:	2b00      	cmp	r3, #0
 8008540:	d022      	beq.n	8008588 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008544:	e07a      	b.n	800863c <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00e      	beq.n	8008572 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6819      	ldr	r1, [r3, #0]
 8008558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	f107 0208 	add.w	r2, r7, #8
 8008560:	18d4      	adds	r4, r2, r3
 8008562:	4608      	mov	r0, r1
 8008564:	f001 fd1f 	bl	8009fa6 <SDMMC_ReadFIFO>
 8008568:	4603      	mov	r3, r0
 800856a:	6023      	str	r3, [r4, #0]
      index++;
 800856c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800856e:	3301      	adds	r3, #1
 8008570:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008572:	f7f9 fbf3 	bl	8001d5c <HAL_GetTick>
 8008576:	4602      	mov	r2, r0
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008580:	d102      	bne.n	8008588 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008582:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008586:	e059      	b.n	800863c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800858e:	f240 432a 	movw	r3, #1066	; 0x42a
 8008592:	4013      	ands	r3, r2
 8008594:	2b00      	cmp	r3, #0
 8008596:	d0d6      	beq.n	8008546 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800859e:	f003 0308 	and.w	r3, r3, #8
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d005      	beq.n	80085b2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2208      	movs	r2, #8
 80085ac:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80085ae:	2308      	movs	r3, #8
 80085b0:	e044      	b.n	800863c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b8:	f003 0302 	and.w	r3, r3, #2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d005      	beq.n	80085cc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2202      	movs	r2, #2
 80085c6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80085c8:	2302      	movs	r3, #2
 80085ca:	e037      	b.n	800863c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d2:	f003 0320 	and.w	r3, r3, #32
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d005      	beq.n	80085e6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2220      	movs	r2, #32
 80085e0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80085e2:	2320      	movs	r3, #32
 80085e4:	e02a      	b.n	800863c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f240 523a 	movw	r2, #1338	; 0x53a
 80085ee:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	061a      	lsls	r2, r3, #24
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	021b      	lsls	r3, r3, #8
 80085f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80085fc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	0a1b      	lsrs	r3, r3, #8
 8008602:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008606:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	0e1b      	lsrs	r3, r3, #24
 800860c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800860e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008610:	601a      	str	r2, [r3, #0]
    scr++;
 8008612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008614:	3304      	adds	r3, #4
 8008616:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	061a      	lsls	r2, r3, #24
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	021b      	lsls	r3, r3, #8
 8008620:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008624:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	0a1b      	lsrs	r3, r3, #8
 800862a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800862e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	0e1b      	lsrs	r3, r3, #24
 8008634:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008638:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	373c      	adds	r7, #60	; 0x3c
 8008640:	46bd      	mov	sp, r7
 8008642:	bd90      	pop	{r4, r7, pc}

08008644 <HAL_SMARTCARD_Init>:
  * @param  hsmartcard Pointer to a SMARTCARD_HandleTypeDef structure that contains
  *                    the configuration information for the specified SMARTCARD module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMARTCARD_Init(SMARTCARD_HandleTypeDef *hsmartcard)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  /* Check the SMARTCARD handle allocation */
  if (hsmartcard == NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d101      	bne.n	8008656 <HAL_SMARTCARD_Init+0x12>
  {
    return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e04d      	b.n	80086f2 <HAL_SMARTCARD_Init+0xae>
  }

  /* Check the USART associated to the SMARTCARD handle */
  assert_param(IS_SMARTCARD_INSTANCE(hsmartcard->Instance));

  if (hsmartcard->gState == HAL_SMARTCARD_STATE_RESET)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800865a:	2b00      	cmp	r3, #0
 800865c:	d106      	bne.n	800866c <HAL_SMARTCARD_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmartcard->Lock = HAL_UNLOCKED;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    hsmartcard->MspInitCallback(hsmartcard);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_SMARTCARD_MspInit(hsmartcard);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f7f8 ff80 	bl	800156c <HAL_SMARTCARD_MspInit>
#endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACKS */
  }

  hsmartcard->gState = HAL_SMARTCARD_STATE_BUSY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2224      	movs	r2, #36	; 0x24
 8008670:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral to set smartcard mode */
  CLEAR_BIT(hsmartcard->Instance->CR1, USART_CR1_UE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f022 0201 	bic.w	r2, r2, #1
 8008680:	601a      	str	r2, [r3, #0]

  /* In SmartCard mode, the following bits must be kept cleared:
  - LINEN in the USART_CR2 register,
  - HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(hsmartcard->Instance->CR2, USART_CR2_LINEN);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008690:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(hsmartcard->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	689a      	ldr	r2, [r3, #8]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f022 020a 	bic.w	r2, r2, #10
 80086a0:	609a      	str	r2, [r3, #8]

  /* set the USART in SMARTCARD mode */
  SET_BIT(hsmartcard->Instance->CR3, USART_CR3_SCEN);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689a      	ldr	r2, [r3, #8]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f042 0220 	orr.w	r2, r2, #32
 80086b0:	609a      	str	r2, [r3, #8]

  /* Set the SMARTCARD Communication parameters */
  if (SMARTCARD_SetConfig(hsmartcard) == HAL_ERROR)
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f822 	bl	80086fc <SMARTCARD_SetConfig>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d101      	bne.n	80086c2 <HAL_SMARTCARD_Init+0x7e>
  {
    return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e017      	b.n	80086f2 <HAL_SMARTCARD_Init+0xae>
  }

  /* Set the SMARTCARD transmission completion indication */
  SMARTCARD_TRANSMISSION_COMPLETION_SETTING(hsmartcard);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f240 6226 	movw	r2, #1574	; 0x626
 80086c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  if (hsmartcard->AdvancedInit.AdvFeatureInit != SMARTCARD_ADVFEATURE_NO_INIT)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d002      	beq.n	80086da <HAL_SMARTCARD_Init+0x96>
  {
    SMARTCARD_AdvFeatureConfig(hsmartcard);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f99f 	bl	8008a18 <SMARTCARD_AdvFeatureConfig>
  }

  /* Enable the Peripheral */
  SET_BIT(hsmartcard->Instance->CR1, USART_CR1_UE);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f042 0201 	orr.w	r2, r2, #1
 80086e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving hsmartcard->gState and hsmartcard->RxState to Ready */
  return (SMARTCARD_CheckIdleState(hsmartcard));
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fa15 	bl	8008b1a <SMARTCARD_CheckIdleState>
 80086f0:	4603      	mov	r3, r0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
	...

080086fc <SMARTCARD_SetConfig>:
  * @param  hsmartcard Pointer to a SMARTCARD_HandleTypeDef structure that contains
  *                    the configuration information for the specified SMARTCARD module.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMARTCARD_SetConfig(SMARTCARD_HandleTypeDef *hsmartcard)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b086      	sub	sp, #24
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  SMARTCARD_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret = HAL_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	74bb      	strb	r3, [r7, #18]
  /* In SmartCard mode, M and PCE are forced to 1 (8 bits + parity).
   * Oversampling is forced to 16 (OVER8 = 0).
   * Configure the Parity and Mode:
   *  set PS bit according to hsmartcard->Init.Parity value
   *  set TE and RE bits according to hsmartcard->Init.Mode value */
  tmpreg = (((uint32_t)hsmartcard->Init.Parity) | ((uint32_t)hsmartcard->Init.Mode) |
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	8a1a      	ldrh	r2, [r3, #16]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	8a5b      	ldrh	r3, [r3, #18]
 8008710:	4313      	orrs	r3, r2
 8008712:	b29b      	uxth	r3, r3
 8008714:	461a      	mov	r2, r3
            ((uint32_t)hsmartcard->Init.WordLength));
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	689b      	ldr	r3, [r3, #8]
  tmpreg = (((uint32_t)hsmartcard->Init.Parity) | ((uint32_t)hsmartcard->Init.Mode) |
 800871a:	4313      	orrs	r3, r2
 800871c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(hsmartcard->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	4ba3      	ldr	r3, [pc, #652]	; (80089b4 <SMARTCARD_SetConfig+0x2b8>)
 8008726:	4013      	ands	r3, r2
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	6812      	ldr	r2, [r2, #0]
 800872c:	6979      	ldr	r1, [r7, #20]
 800872e:	430b      	orrs	r3, r1
 8008730:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = hsmartcard->Init.StopBits;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	617b      	str	r3, [r7, #20]
  /* Synchronous mode is activated by default */
  tmpreg |= (uint32_t) USART_CR2_CLKEN | hsmartcard->Init.CLKPolarity;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	8a9b      	ldrh	r3, [r3, #20]
 800873c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008740:	b29b      	uxth	r3, r3
 8008742:	461a      	mov	r2, r3
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	4313      	orrs	r3, r2
 8008748:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t) hsmartcard->Init.CLKPhase | hsmartcard->Init.CLKLastBit;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	8ada      	ldrh	r2, [r3, #22]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	8b1b      	ldrh	r3, [r3, #24]
 8008752:	4313      	orrs	r3, r2
 8008754:	b29b      	uxth	r3, r3
 8008756:	461a      	mov	r2, r3
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	4313      	orrs	r3, r2
 800875c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t) hsmartcard->Init.TimeOutEnable;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a1b      	ldr	r3, [r3, #32]
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	4313      	orrs	r3, r2
 8008766:	617b      	str	r3, [r7, #20]
  MODIFY_REG(hsmartcard->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008772:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	6812      	ldr	r2, [r2, #0]
 800877a:	6979      	ldr	r1, [r7, #20]
 800877c:	430b      	orrs	r3, r1
 800877e:	6053      	str	r3, [r2, #4]
   *   according to hsmartcard->Init.OneBitSampling
   * - NACK transmission in case of parity error according
   *   to hsmartcard->Init.NACKEnable
   * - autoretry counter according to hsmartcard->Init.AutoRetryCount */

  tmpreg = (uint32_t) hsmartcard->Init.OneBitSampling | hsmartcard->Init.NACKEnable;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	8b5a      	ldrh	r2, [r3, #26]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	8bdb      	ldrh	r3, [r3, #30]
 8008788:	4313      	orrs	r3, r2
 800878a:	b29b      	uxth	r3, r3
 800878c:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)hsmartcard->Init.AutoRetryCount << USART_CR3_SCARCNT_Pos);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008794:	045b      	lsls	r3, r3, #17
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	4313      	orrs	r3, r2
 800879a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(hsmartcard->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80087a6:	f423 6301 	bic.w	r3, r3, #2064	; 0x810
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	6812      	ldr	r2, [r2, #0]
 80087ae:	6979      	ldr	r1, [r7, #20]
 80087b0:	430b      	orrs	r3, r1
 80087b2:	6093      	str	r3, [r2, #8]
  * - SMARTCARD Clock Prescaler: set PRESCALER according to hsmartcard->Init.ClockPrescaler value */
  MODIFY_REG(hsmartcard->Instance->PRESC, USART_PRESC_PRESCALER, hsmartcard->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART GTPR Configuration ----------------------*/
  tmpreg = (hsmartcard->Init.Prescaler | ((uint32_t)hsmartcard->Init.GuardTime << USART_GTPR_GT_Pos));
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	7f1b      	ldrb	r3, [r3, #28]
 80087b8:	461a      	mov	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	7f5b      	ldrb	r3, [r3, #29]
 80087be:	021b      	lsls	r3, r3, #8
 80087c0:	4313      	orrs	r3, r2
 80087c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(hsmartcard->Instance->GTPR, (uint16_t)(USART_GTPR_GT | USART_GTPR_PSC), (uint16_t)tmpreg);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	8a1b      	ldrh	r3, [r3, #16]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	697a      	ldr	r2, [r7, #20]
 80087d0:	b292      	uxth	r2, r2
 80087d2:	821a      	strh	r2, [r3, #16]

  /*-------------------------- USART RTOR Configuration ----------------------*/
  tmpreg = ((uint32_t)hsmartcard->Init.BlockLength << USART_RTOR_BLEN_Pos);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087da:	061b      	lsls	r3, r3, #24
 80087dc:	617b      	str	r3, [r7, #20]
  if (hsmartcard->Init.TimeOutEnable == SMARTCARD_TIMEOUT_ENABLE)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80087e6:	d104      	bne.n	80087f2 <SMARTCARD_SetConfig+0xf6>
  {
    assert_param(IS_SMARTCARD_TIMEOUT_VALUE(hsmartcard->Init.TimeOutValue));
    tmpreg |= (uint32_t) hsmartcard->Init.TimeOutValue;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	617b      	str	r3, [r7, #20]
  }
  MODIFY_REG(hsmartcard->Instance->RTOR, (USART_RTOR_RTO | USART_RTOR_BLEN), tmpreg);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	695b      	ldr	r3, [r3, #20]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	697a      	ldr	r2, [r7, #20]
 80087fe:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  SMARTCARD_GETCLOCKSOURCE(hsmartcard, clocksource);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a6c      	ldr	r2, [pc, #432]	; (80089b8 <SMARTCARD_SetConfig+0x2bc>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d121      	bne.n	800884e <SMARTCARD_SetConfig+0x152>
 800880a:	4b6c      	ldr	r3, [pc, #432]	; (80089bc <SMARTCARD_SetConfig+0x2c0>)
 800880c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008810:	f003 0303 	and.w	r3, r3, #3
 8008814:	2b03      	cmp	r3, #3
 8008816:	d817      	bhi.n	8008848 <SMARTCARD_SetConfig+0x14c>
 8008818:	a201      	add	r2, pc, #4	; (adr r2, 8008820 <SMARTCARD_SetConfig+0x124>)
 800881a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881e:	bf00      	nop
 8008820:	08008831 	.word	0x08008831
 8008824:	0800883d 	.word	0x0800883d
 8008828:	08008837 	.word	0x08008837
 800882c:	08008843 	.word	0x08008843
 8008830:	2301      	movs	r3, #1
 8008832:	74fb      	strb	r3, [r7, #19]
 8008834:	e06b      	b.n	800890e <SMARTCARD_SetConfig+0x212>
 8008836:	2302      	movs	r3, #2
 8008838:	74fb      	strb	r3, [r7, #19]
 800883a:	e068      	b.n	800890e <SMARTCARD_SetConfig+0x212>
 800883c:	2304      	movs	r3, #4
 800883e:	74fb      	strb	r3, [r7, #19]
 8008840:	e065      	b.n	800890e <SMARTCARD_SetConfig+0x212>
 8008842:	2308      	movs	r3, #8
 8008844:	74fb      	strb	r3, [r7, #19]
 8008846:	e062      	b.n	800890e <SMARTCARD_SetConfig+0x212>
 8008848:	2310      	movs	r3, #16
 800884a:	74fb      	strb	r3, [r7, #19]
 800884c:	e05f      	b.n	800890e <SMARTCARD_SetConfig+0x212>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a5b      	ldr	r2, [pc, #364]	; (80089c0 <SMARTCARD_SetConfig+0x2c4>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d132      	bne.n	80088be <SMARTCARD_SetConfig+0x1c2>
 8008858:	4b58      	ldr	r3, [pc, #352]	; (80089bc <SMARTCARD_SetConfig+0x2c0>)
 800885a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800885e:	f003 030c 	and.w	r3, r3, #12
 8008862:	2b0c      	cmp	r3, #12
 8008864:	d828      	bhi.n	80088b8 <SMARTCARD_SetConfig+0x1bc>
 8008866:	a201      	add	r2, pc, #4	; (adr r2, 800886c <SMARTCARD_SetConfig+0x170>)
 8008868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886c:	080088a1 	.word	0x080088a1
 8008870:	080088b9 	.word	0x080088b9
 8008874:	080088b9 	.word	0x080088b9
 8008878:	080088b9 	.word	0x080088b9
 800887c:	080088ad 	.word	0x080088ad
 8008880:	080088b9 	.word	0x080088b9
 8008884:	080088b9 	.word	0x080088b9
 8008888:	080088b9 	.word	0x080088b9
 800888c:	080088a7 	.word	0x080088a7
 8008890:	080088b9 	.word	0x080088b9
 8008894:	080088b9 	.word	0x080088b9
 8008898:	080088b9 	.word	0x080088b9
 800889c:	080088b3 	.word	0x080088b3
 80088a0:	2300      	movs	r3, #0
 80088a2:	74fb      	strb	r3, [r7, #19]
 80088a4:	e033      	b.n	800890e <SMARTCARD_SetConfig+0x212>
 80088a6:	2302      	movs	r3, #2
 80088a8:	74fb      	strb	r3, [r7, #19]
 80088aa:	e030      	b.n	800890e <SMARTCARD_SetConfig+0x212>
 80088ac:	2304      	movs	r3, #4
 80088ae:	74fb      	strb	r3, [r7, #19]
 80088b0:	e02d      	b.n	800890e <SMARTCARD_SetConfig+0x212>
 80088b2:	2308      	movs	r3, #8
 80088b4:	74fb      	strb	r3, [r7, #19]
 80088b6:	e02a      	b.n	800890e <SMARTCARD_SetConfig+0x212>
 80088b8:	2310      	movs	r3, #16
 80088ba:	74fb      	strb	r3, [r7, #19]
 80088bc:	e027      	b.n	800890e <SMARTCARD_SetConfig+0x212>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a40      	ldr	r2, [pc, #256]	; (80089c4 <SMARTCARD_SetConfig+0x2c8>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d120      	bne.n	800890a <SMARTCARD_SetConfig+0x20e>
 80088c8:	4b3c      	ldr	r3, [pc, #240]	; (80089bc <SMARTCARD_SetConfig+0x2c0>)
 80088ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80088d2:	2b30      	cmp	r3, #48	; 0x30
 80088d4:	d013      	beq.n	80088fe <SMARTCARD_SetConfig+0x202>
 80088d6:	2b30      	cmp	r3, #48	; 0x30
 80088d8:	d814      	bhi.n	8008904 <SMARTCARD_SetConfig+0x208>
 80088da:	2b20      	cmp	r3, #32
 80088dc:	d009      	beq.n	80088f2 <SMARTCARD_SetConfig+0x1f6>
 80088de:	2b20      	cmp	r3, #32
 80088e0:	d810      	bhi.n	8008904 <SMARTCARD_SetConfig+0x208>
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d002      	beq.n	80088ec <SMARTCARD_SetConfig+0x1f0>
 80088e6:	2b10      	cmp	r3, #16
 80088e8:	d006      	beq.n	80088f8 <SMARTCARD_SetConfig+0x1fc>
 80088ea:	e00b      	b.n	8008904 <SMARTCARD_SetConfig+0x208>
 80088ec:	2300      	movs	r3, #0
 80088ee:	74fb      	strb	r3, [r7, #19]
 80088f0:	e00d      	b.n	800890e <SMARTCARD_SetConfig+0x212>
 80088f2:	2302      	movs	r3, #2
 80088f4:	74fb      	strb	r3, [r7, #19]
 80088f6:	e00a      	b.n	800890e <SMARTCARD_SetConfig+0x212>
 80088f8:	2304      	movs	r3, #4
 80088fa:	74fb      	strb	r3, [r7, #19]
 80088fc:	e007      	b.n	800890e <SMARTCARD_SetConfig+0x212>
 80088fe:	2308      	movs	r3, #8
 8008900:	74fb      	strb	r3, [r7, #19]
 8008902:	e004      	b.n	800890e <SMARTCARD_SetConfig+0x212>
 8008904:	2310      	movs	r3, #16
 8008906:	74fb      	strb	r3, [r7, #19]
 8008908:	e001      	b.n	800890e <SMARTCARD_SetConfig+0x212>
 800890a:	2310      	movs	r3, #16
 800890c:	74fb      	strb	r3, [r7, #19]
  tmpreg =   0U;
 800890e:	2300      	movs	r3, #0
 8008910:	617b      	str	r3, [r7, #20]
  switch (clocksource)
 8008912:	7cfb      	ldrb	r3, [r7, #19]
 8008914:	2b08      	cmp	r3, #8
 8008916:	d862      	bhi.n	80089de <SMARTCARD_SetConfig+0x2e2>
 8008918:	a201      	add	r2, pc, #4	; (adr r2, 8008920 <SMARTCARD_SetConfig+0x224>)
 800891a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891e:	bf00      	nop
 8008920:	08008945 	.word	0x08008945
 8008924:	08008961 	.word	0x08008961
 8008928:	0800897d 	.word	0x0800897d
 800892c:	080089df 	.word	0x080089df
 8008930:	08008997 	.word	0x08008997
 8008934:	080089df 	.word	0x080089df
 8008938:	080089df 	.word	0x080089df
 800893c:	080089df 	.word	0x080089df
 8008940:	080089c9 	.word	0x080089c9
  {
    case SMARTCARD_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8008944:	f7fd fb08 	bl	8005f58 <HAL_RCC_GetPCLK1Freq>
 8008948:	60f8      	str	r0, [r7, #12]
#if defined(USART_PRESC_PRESCALER)
      tmpreg = (uint32_t)(((pclk / SMARTCARDPrescTable[hsmartcard->Init.ClockPrescaler]) +
                           (hsmartcard->Init.BaudRate / 2U)) / hsmartcard->Init.BaudRate);
#else
      tmpreg = (uint32_t)((pclk + (hsmartcard->Init.BaudRate / 2U)) / hsmartcard->Init.BaudRate);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	085a      	lsrs	r2, r3, #1
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	441a      	add	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	fbb2 f3f3 	udiv	r3, r2, r3
 800895c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
      break;
 800895e:	e041      	b.n	80089e4 <SMARTCARD_SetConfig+0x2e8>
    case SMARTCARD_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8008960:	f7fd fb10 	bl	8005f84 <HAL_RCC_GetPCLK2Freq>
 8008964:	60f8      	str	r0, [r7, #12]
#if defined(USART_PRESC_PRESCALER)
      tmpreg = (uint32_t)(((pclk / SMARTCARDPrescTable[hsmartcard->Init.ClockPrescaler]) +
                           (hsmartcard->Init.BaudRate / 2U)) / hsmartcard->Init.BaudRate);
#else
      tmpreg = (uint32_t)((pclk + (hsmartcard->Init.BaudRate / 2U)) / hsmartcard->Init.BaudRate);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	085a      	lsrs	r2, r3, #1
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	441a      	add	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	fbb2 f3f3 	udiv	r3, r2, r3
 8008978:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
      break;
 800897a:	e033      	b.n	80089e4 <SMARTCARD_SetConfig+0x2e8>
    case SMARTCARD_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      tmpreg = (uint32_t)(((HSI_VALUE / SMARTCARDPrescTable[hsmartcard->Init.ClockPrescaler]) +
                           (hsmartcard->Init.BaudRate / 2U)) / hsmartcard->Init.BaudRate);
#else
      tmpreg = (uint32_t)((HSI_VALUE + (hsmartcard->Init.BaudRate / 2U)) / hsmartcard->Init.BaudRate);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	085b      	lsrs	r3, r3, #1
 8008982:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8008986:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	6852      	ldr	r2, [r2, #4]
 800898e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008992:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
      break;
 8008994:	e026      	b.n	80089e4 <SMARTCARD_SetConfig+0x2e8>
    case SMARTCARD_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8008996:	f7fd fa47 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 800899a:	60f8      	str	r0, [r7, #12]
#if defined(USART_PRESC_PRESCALER)
      tmpreg = (uint32_t)(((pclk / SMARTCARDPrescTable[hsmartcard->Init.ClockPrescaler]) +
                           (hsmartcard->Init.BaudRate / 2U)) / hsmartcard->Init.BaudRate);
#else
      tmpreg = (uint32_t)((pclk + (hsmartcard->Init.BaudRate / 2U)) / hsmartcard->Init.BaudRate);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	085a      	lsrs	r2, r3, #1
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	441a      	add	r2, r3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ae:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
      break;
 80089b0:	e018      	b.n	80089e4 <SMARTCARD_SetConfig+0x2e8>
 80089b2:	bf00      	nop
 80089b4:	efff69f3 	.word	0xefff69f3
 80089b8:	40013800 	.word	0x40013800
 80089bc:	40021000 	.word	0x40021000
 80089c0:	40004400 	.word	0x40004400
 80089c4:	40004800 	.word	0x40004800
    case SMARTCARD_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      tmpreg = (uint32_t)(((uint16_t)(LSE_VALUE / SMARTCARDPrescTable[hsmartcard->Init.ClockPrescaler]) +
                           (hsmartcard->Init.BaudRate / 2U)) / hsmartcard->Init.BaudRate);
#else
      tmpreg = (uint32_t)((LSE_VALUE + (hsmartcard->Init.BaudRate / 2U)) / hsmartcard->Init.BaudRate);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	085b      	lsrs	r3, r3, #1
 80089ce:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089da:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
      break;
 80089dc:	e002      	b.n	80089e4 <SMARTCARD_SetConfig+0x2e8>
    default:
      ret = HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	74bb      	strb	r3, [r7, #18]
      break;
 80089e2:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 */
  if ((tmpreg >= USART_BRR_MIN) && (tmpreg <= USART_BRR_MAX))
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	2b0f      	cmp	r3, #15
 80089e8:	d909      	bls.n	80089fe <SMARTCARD_SetConfig+0x302>
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089f0:	d205      	bcs.n	80089fe <SMARTCARD_SetConfig+0x302>
  {
    hsmartcard->Instance->BRR = (uint16_t)tmpreg;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	60da      	str	r2, [r3, #12]
 80089fc:	e001      	b.n	8008a02 <SMARTCARD_SetConfig+0x306>
  }
  else
  {
    ret = HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	74bb      	strb	r3, [r7, #18]
  hsmartcard->NbTxDataToProcess = 1U;
  hsmartcard->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  hsmartcard->RxISR   = NULL;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	661a      	str	r2, [r3, #96]	; 0x60
  hsmartcard->TxISR   = NULL;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008a0e:	7cbb      	ldrb	r3, [r7, #18]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3718      	adds	r7, #24
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <SMARTCARD_AdvFeatureConfig>:
  * @param hsmartcard Pointer to a SMARTCARD_HandleTypeDef structure that contains
  *                   the configuration information for the specified SMARTCARD module.
  * @retval None
  */
static void SMARTCARD_AdvFeatureConfig(SMARTCARD_HandleTypeDef *hsmartcard)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_SMARTCARD_ADVFEATURE_INIT(hsmartcard->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(hsmartcard->AdvancedInit.AdvFeatureInit, SMARTCARD_ADVFEATURE_TXINVERT_INIT))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a24:	f003 0301 	and.w	r3, r3, #1
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00a      	beq.n	8008a42 <SMARTCARD_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_SMARTCARD_ADVFEATURE_TXINV(hsmartcard->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(hsmartcard->Instance->CR2, USART_CR2_TXINV, hsmartcard->AdvancedInit.TxPinLevelInvert);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(hsmartcard->AdvancedInit.AdvFeatureInit, SMARTCARD_ADVFEATURE_RXINVERT_INIT))
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a46:	f003 0302 	and.w	r3, r3, #2
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00a      	beq.n	8008a64 <SMARTCARD_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_SMARTCARD_ADVFEATURE_RXINV(hsmartcard->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(hsmartcard->Instance->CR2, USART_CR2_RXINV, hsmartcard->AdvancedInit.RxPinLevelInvert);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	430a      	orrs	r2, r1
 8008a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(hsmartcard->AdvancedInit.AdvFeatureInit, SMARTCARD_ADVFEATURE_DATAINVERT_INIT))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a68:	f003 0304 	and.w	r3, r3, #4
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00a      	beq.n	8008a86 <SMARTCARD_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_SMARTCARD_ADVFEATURE_DATAINV(hsmartcard->AdvancedInit.DataInvert));
    MODIFY_REG(hsmartcard->Instance->CR2, USART_CR2_DATAINV, hsmartcard->AdvancedInit.DataInvert);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	430a      	orrs	r2, r1
 8008a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(hsmartcard->AdvancedInit.AdvFeatureInit, SMARTCARD_ADVFEATURE_SWAP_INIT))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8a:	f003 0308 	and.w	r3, r3, #8
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00a      	beq.n	8008aa8 <SMARTCARD_AdvFeatureConfig+0x90>
  {
    assert_param(IS_SMARTCARD_ADVFEATURE_SWAP(hsmartcard->AdvancedInit.Swap));
    MODIFY_REG(hsmartcard->Instance->CR2, USART_CR2_SWAP, hsmartcard->AdvancedInit.Swap);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	430a      	orrs	r2, r1
 8008aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(hsmartcard->AdvancedInit.AdvFeatureInit, SMARTCARD_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aac:	f003 0310 	and.w	r3, r3, #16
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00a      	beq.n	8008aca <SMARTCARD_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_SMARTCARD_OVERRUN(hsmartcard->AdvancedInit.OverrunDisable));
    MODIFY_REG(hsmartcard->Instance->CR3, USART_CR3_OVRDIS, hsmartcard->AdvancedInit.OverrunDisable);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(hsmartcard->AdvancedInit.AdvFeatureInit, SMARTCARD_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ace:	f003 0320 	and.w	r3, r3, #32
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00a      	beq.n	8008aec <SMARTCARD_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_SMARTCARD_ADVFEATURE_DMAONRXERROR(hsmartcard->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(hsmartcard->Instance->CR3, USART_CR3_DDRE, hsmartcard->AdvancedInit.DMADisableonRxError);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(hsmartcard->AdvancedInit.AdvFeatureInit, SMARTCARD_ADVFEATURE_MSBFIRST_INIT))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00a      	beq.n	8008b0e <SMARTCARD_AdvFeatureConfig+0xf6>
  {
    assert_param(IS_SMARTCARD_ADVFEATURE_MSBFIRST(hsmartcard->AdvancedInit.MSBFirst));
    MODIFY_REG(hsmartcard->Instance->CR2, USART_CR2_MSBFIRST, hsmartcard->AdvancedInit.MSBFirst);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	605a      	str	r2, [r3, #4]
  }

}
 8008b0e:	bf00      	nop
 8008b10:	370c      	adds	r7, #12
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <SMARTCARD_CheckIdleState>:
  * @param hsmartcard Pointer to a SMARTCARD_HandleTypeDef structure that contains
  *                   the configuration information for the specified SMARTCARD module.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMARTCARD_CheckIdleState(SMARTCARD_HandleTypeDef *hsmartcard)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b086      	sub	sp, #24
 8008b1e:	af02      	add	r7, sp, #8
 8008b20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the SMARTCARD ErrorCode */
  hsmartcard->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b28:	f7f9 f918 	bl	8001d5c <HAL_GetTick>
 8008b2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((hsmartcard->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0308 	and.w	r3, r3, #8
 8008b38:	2b08      	cmp	r3, #8
 8008b3a:	d10e      	bne.n	8008b5a <SMARTCARD_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (SMARTCARD_WaitOnFlagUntilTimeout(hsmartcard, USART_ISR_TEACK, RESET, tickstart,
 8008b3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 f82a 	bl	8008ba4 <SMARTCARD_WaitOnFlagUntilTimeout>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <SMARTCARD_CheckIdleState+0x40>
                                         SMARTCARD_TEACK_REACK_TIMEOUT) != HAL_OK)
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b56:	2303      	movs	r3, #3
 8008b58:	e020      	b.n	8008b9c <SMARTCARD_CheckIdleState+0x82>
    }
  }
  /* Check if the Receiver is enabled */
  if ((hsmartcard->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 0304 	and.w	r3, r3, #4
 8008b64:	2b04      	cmp	r3, #4
 8008b66:	d10e      	bne.n	8008b86 <SMARTCARD_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (SMARTCARD_WaitOnFlagUntilTimeout(hsmartcard, USART_ISR_REACK, RESET, tickstart,
 8008b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f814 	bl	8008ba4 <SMARTCARD_WaitOnFlagUntilTimeout>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d001      	beq.n	8008b86 <SMARTCARD_CheckIdleState+0x6c>
                                         SMARTCARD_TEACK_REACK_TIMEOUT) != HAL_OK)
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e00a      	b.n	8008b9c <SMARTCARD_CheckIdleState+0x82>
    }
  }

  /* Initialize the SMARTCARD states */
  hsmartcard->gState  = HAL_SMARTCARD_STATE_READY;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2220      	movs	r2, #32
 8008b8a:	675a      	str	r2, [r3, #116]	; 0x74
  hsmartcard->RxState = HAL_SMARTCARD_STATE_READY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2220      	movs	r2, #32
 8008b90:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(hsmartcard);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <SMARTCARD_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMARTCARD_WaitOnFlagUntilTimeout(SMARTCARD_HandleTypeDef *hsmartcard, uint32_t Flag,
                                                          FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	603b      	str	r3, [r7, #0]
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SMARTCARD_GET_FLAG(hsmartcard, Flag) ? SET : RESET) == Status)
 8008bb4:	e02a      	b.n	8008c0c <SMARTCARD_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bbc:	d026      	beq.n	8008c0c <SMARTCARD_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bbe:	f7f9 f8cd 	bl	8001d5c <HAL_GetTick>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	69ba      	ldr	r2, [r7, #24]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d302      	bcc.n	8008bd4 <SMARTCARD_WaitOnFlagUntilTimeout+0x30>
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d11b      	bne.n	8008c0c <SMARTCARD_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(hsmartcard->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(hsmartcard->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008be2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(hsmartcard->Instance->CR3, USART_CR3_EIE);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	689a      	ldr	r2, [r3, #8]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f022 0201 	bic.w	r2, r2, #1
 8008bf2:	609a      	str	r2, [r3, #8]

        hsmartcard->gState  = HAL_SMARTCARD_STATE_READY;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2220      	movs	r2, #32
 8008bf8:	675a      	str	r2, [r3, #116]	; 0x74
        hsmartcard->RxState = HAL_SMARTCARD_STATE_READY;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(hsmartcard);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        return HAL_TIMEOUT;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e00f      	b.n	8008c2c <SMARTCARD_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_SMARTCARD_GET_FLAG(hsmartcard, Flag) ? SET : RESET) == Status)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	69da      	ldr	r2, [r3, #28]
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	4013      	ands	r3, r2
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	bf0c      	ite	eq
 8008c1c:	2301      	moveq	r3, #1
 8008c1e:	2300      	movne	r3, #0
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	461a      	mov	r2, r3
 8008c24:	79fb      	ldrb	r3, [r7, #7]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d0c5      	beq.n	8008bb6 <SMARTCARD_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e095      	b.n	8008d72 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d108      	bne.n	8008c60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c56:	d009      	beq.n	8008c6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	61da      	str	r2, [r3, #28]
 8008c5e:	e005      	b.n	8008c6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d106      	bne.n	8008c8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7f8 fdb2 	bl	80017f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2202      	movs	r2, #2
 8008c90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ca2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008cac:	d902      	bls.n	8008cb4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60fb      	str	r3, [r7, #12]
 8008cb2:	e002      	b.n	8008cba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cb8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008cc2:	d007      	beq.n	8008cd4 <HAL_SPI_Init+0xa0>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ccc:	d002      	beq.n	8008cd4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008ce4:	431a      	orrs	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	f003 0302 	and.w	r3, r3, #2
 8008cee:	431a      	orrs	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	695b      	ldr	r3, [r3, #20]
 8008cf4:	f003 0301 	and.w	r3, r3, #1
 8008cf8:	431a      	orrs	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d02:	431a      	orrs	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	69db      	ldr	r3, [r3, #28]
 8008d08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d0c:	431a      	orrs	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a1b      	ldr	r3, [r3, #32]
 8008d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d16:	ea42 0103 	orr.w	r1, r2, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	430a      	orrs	r2, r1
 8008d28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	0c1b      	lsrs	r3, r3, #16
 8008d30:	f003 0204 	and.w	r2, r3, #4
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d38:	f003 0310 	and.w	r3, r3, #16
 8008d3c:	431a      	orrs	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d42:	f003 0308 	and.w	r3, r3, #8
 8008d46:	431a      	orrs	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008d50:	ea42 0103 	orr.w	r1, r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b084      	sub	sp, #16
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	60f8      	str	r0, [r7, #12]
 8008d82:	60b9      	str	r1, [r7, #8]
 8008d84:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d101      	bne.n	8008d90 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e038      	b.n	8008e02 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d106      	bne.n	8008daa <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f7f8 fe73 	bl	8001a90 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	3308      	adds	r3, #8
 8008db2:	4619      	mov	r1, r3
 8008db4:	4610      	mov	r0, r2
 8008db6:	f000 ffaf 	bl	8009d18 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6818      	ldr	r0, [r3, #0]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	68b9      	ldr	r1, [r7, #8]
 8008dc6:	f001 f823 	bl	8009e10 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6858      	ldr	r0, [r3, #4]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	689a      	ldr	r2, [r3, #8]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd6:	6879      	ldr	r1, [r7, #4]
 8008dd8:	f001 f86a 	bl	8009eb0 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	6892      	ldr	r2, [r2, #8]
 8008de4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	6892      	ldr	r2, [r2, #8]
 8008df0:	f041 0101 	orr.w	r1, r1, #1
 8008df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b082      	sub	sp, #8
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d101      	bne.n	8008e1c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e049      	b.n	8008eb0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d106      	bne.n	8008e36 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f841 	bl	8008eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2202      	movs	r2, #2
 8008e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	3304      	adds	r3, #4
 8008e46:	4619      	mov	r1, r3
 8008e48:	4610      	mov	r0, r2
 8008e4a:	f000 f9f7 	bl	800923c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2201      	movs	r2, #1
 8008e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d001      	beq.n	8008ee4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e04f      	b.n	8008f84 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68da      	ldr	r2, [r3, #12]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f042 0201 	orr.w	r2, r2, #1
 8008efa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a23      	ldr	r2, [pc, #140]	; (8008f90 <HAL_TIM_Base_Start_IT+0xc4>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d01d      	beq.n	8008f42 <HAL_TIM_Base_Start_IT+0x76>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f0e:	d018      	beq.n	8008f42 <HAL_TIM_Base_Start_IT+0x76>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a1f      	ldr	r2, [pc, #124]	; (8008f94 <HAL_TIM_Base_Start_IT+0xc8>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d013      	beq.n	8008f42 <HAL_TIM_Base_Start_IT+0x76>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a1e      	ldr	r2, [pc, #120]	; (8008f98 <HAL_TIM_Base_Start_IT+0xcc>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d00e      	beq.n	8008f42 <HAL_TIM_Base_Start_IT+0x76>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a1c      	ldr	r2, [pc, #112]	; (8008f9c <HAL_TIM_Base_Start_IT+0xd0>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d009      	beq.n	8008f42 <HAL_TIM_Base_Start_IT+0x76>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a1b      	ldr	r2, [pc, #108]	; (8008fa0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d004      	beq.n	8008f42 <HAL_TIM_Base_Start_IT+0x76>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a19      	ldr	r2, [pc, #100]	; (8008fa4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d115      	bne.n	8008f6e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	689a      	ldr	r2, [r3, #8]
 8008f48:	4b17      	ldr	r3, [pc, #92]	; (8008fa8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2b06      	cmp	r3, #6
 8008f52:	d015      	beq.n	8008f80 <HAL_TIM_Base_Start_IT+0xb4>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f5a:	d011      	beq.n	8008f80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f042 0201 	orr.w	r2, r2, #1
 8008f6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f6c:	e008      	b.n	8008f80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f042 0201 	orr.w	r2, r2, #1
 8008f7c:	601a      	str	r2, [r3, #0]
 8008f7e:	e000      	b.n	8008f82 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	40012c00 	.word	0x40012c00
 8008f94:	40000400 	.word	0x40000400
 8008f98:	40000800 	.word	0x40000800
 8008f9c:	40000c00 	.word	0x40000c00
 8008fa0:	40013400 	.word	0x40013400
 8008fa4:	40014000 	.word	0x40014000
 8008fa8:	00010007 	.word	0x00010007

08008fac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	f003 0302 	and.w	r3, r3, #2
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d122      	bne.n	8009008 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	f003 0302 	and.w	r3, r3, #2
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d11b      	bne.n	8009008 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f06f 0202 	mvn.w	r2, #2
 8008fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	f003 0303 	and.w	r3, r3, #3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d003      	beq.n	8008ff6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f905 	bl	80091fe <HAL_TIM_IC_CaptureCallback>
 8008ff4:	e005      	b.n	8009002 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f8f7 	bl	80091ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f908 	bl	8009212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	691b      	ldr	r3, [r3, #16]
 800900e:	f003 0304 	and.w	r3, r3, #4
 8009012:	2b04      	cmp	r3, #4
 8009014:	d122      	bne.n	800905c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	f003 0304 	and.w	r3, r3, #4
 8009020:	2b04      	cmp	r3, #4
 8009022:	d11b      	bne.n	800905c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f06f 0204 	mvn.w	r2, #4
 800902c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2202      	movs	r2, #2
 8009032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800903e:	2b00      	cmp	r3, #0
 8009040:	d003      	beq.n	800904a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 f8db 	bl	80091fe <HAL_TIM_IC_CaptureCallback>
 8009048:	e005      	b.n	8009056 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f8cd 	bl	80091ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 f8de 	bl	8009212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	f003 0308 	and.w	r3, r3, #8
 8009066:	2b08      	cmp	r3, #8
 8009068:	d122      	bne.n	80090b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	f003 0308 	and.w	r3, r3, #8
 8009074:	2b08      	cmp	r3, #8
 8009076:	d11b      	bne.n	80090b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f06f 0208 	mvn.w	r2, #8
 8009080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2204      	movs	r2, #4
 8009086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	69db      	ldr	r3, [r3, #28]
 800908e:	f003 0303 	and.w	r3, r3, #3
 8009092:	2b00      	cmp	r3, #0
 8009094:	d003      	beq.n	800909e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f8b1 	bl	80091fe <HAL_TIM_IC_CaptureCallback>
 800909c:	e005      	b.n	80090aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 f8a3 	bl	80091ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f8b4 	bl	8009212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	f003 0310 	and.w	r3, r3, #16
 80090ba:	2b10      	cmp	r3, #16
 80090bc:	d122      	bne.n	8009104 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	f003 0310 	and.w	r3, r3, #16
 80090c8:	2b10      	cmp	r3, #16
 80090ca:	d11b      	bne.n	8009104 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f06f 0210 	mvn.w	r2, #16
 80090d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2208      	movs	r2, #8
 80090da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	69db      	ldr	r3, [r3, #28]
 80090e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d003      	beq.n	80090f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f887 	bl	80091fe <HAL_TIM_IC_CaptureCallback>
 80090f0:	e005      	b.n	80090fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f879 	bl	80091ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f88a 	bl	8009212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	2b01      	cmp	r3, #1
 8009110:	d10e      	bne.n	8009130 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	f003 0301 	and.w	r3, r3, #1
 800911c:	2b01      	cmp	r3, #1
 800911e:	d107      	bne.n	8009130 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f06f 0201 	mvn.w	r2, #1
 8009128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f7f7 ff8e 	bl	800104c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	691b      	ldr	r3, [r3, #16]
 8009136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800913a:	2b80      	cmp	r3, #128	; 0x80
 800913c:	d10e      	bne.n	800915c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009148:	2b80      	cmp	r3, #128	; 0x80
 800914a:	d107      	bne.n	800915c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f914 	bl	8009384 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800916a:	d10e      	bne.n	800918a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009176:	2b80      	cmp	r3, #128	; 0x80
 8009178:	d107      	bne.n	800918a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f907 	bl	8009398 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009194:	2b40      	cmp	r3, #64	; 0x40
 8009196:	d10e      	bne.n	80091b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a2:	2b40      	cmp	r3, #64	; 0x40
 80091a4:	d107      	bne.n	80091b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80091ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f838 	bl	8009226 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	f003 0320 	and.w	r3, r3, #32
 80091c0:	2b20      	cmp	r3, #32
 80091c2:	d10e      	bne.n	80091e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	f003 0320 	and.w	r3, r3, #32
 80091ce:	2b20      	cmp	r3, #32
 80091d0:	d107      	bne.n	80091e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f06f 0220 	mvn.w	r2, #32
 80091da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 f8c7 	bl	8009370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091e2:	bf00      	nop
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091ea:	b480      	push	{r7}
 80091ec:	b083      	sub	sp, #12
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091f2:	bf00      	nop
 80091f4:	370c      	adds	r7, #12
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr

080091fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091fe:	b480      	push	{r7}
 8009200:	b083      	sub	sp, #12
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009206:	bf00      	nop
 8009208:	370c      	adds	r7, #12
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009212:	b480      	push	{r7}
 8009214:	b083      	sub	sp, #12
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800921a:	bf00      	nop
 800921c:	370c      	adds	r7, #12
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr

08009226 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009226:	b480      	push	{r7}
 8009228:	b083      	sub	sp, #12
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800922e:	bf00      	nop
 8009230:	370c      	adds	r7, #12
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
	...

0800923c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a40      	ldr	r2, [pc, #256]	; (8009350 <TIM_Base_SetConfig+0x114>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d013      	beq.n	800927c <TIM_Base_SetConfig+0x40>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800925a:	d00f      	beq.n	800927c <TIM_Base_SetConfig+0x40>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a3d      	ldr	r2, [pc, #244]	; (8009354 <TIM_Base_SetConfig+0x118>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d00b      	beq.n	800927c <TIM_Base_SetConfig+0x40>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a3c      	ldr	r2, [pc, #240]	; (8009358 <TIM_Base_SetConfig+0x11c>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d007      	beq.n	800927c <TIM_Base_SetConfig+0x40>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a3b      	ldr	r2, [pc, #236]	; (800935c <TIM_Base_SetConfig+0x120>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d003      	beq.n	800927c <TIM_Base_SetConfig+0x40>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a3a      	ldr	r2, [pc, #232]	; (8009360 <TIM_Base_SetConfig+0x124>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d108      	bne.n	800928e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	4313      	orrs	r3, r2
 800928c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4a2f      	ldr	r2, [pc, #188]	; (8009350 <TIM_Base_SetConfig+0x114>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d01f      	beq.n	80092d6 <TIM_Base_SetConfig+0x9a>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800929c:	d01b      	beq.n	80092d6 <TIM_Base_SetConfig+0x9a>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a2c      	ldr	r2, [pc, #176]	; (8009354 <TIM_Base_SetConfig+0x118>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d017      	beq.n	80092d6 <TIM_Base_SetConfig+0x9a>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a2b      	ldr	r2, [pc, #172]	; (8009358 <TIM_Base_SetConfig+0x11c>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d013      	beq.n	80092d6 <TIM_Base_SetConfig+0x9a>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a2a      	ldr	r2, [pc, #168]	; (800935c <TIM_Base_SetConfig+0x120>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d00f      	beq.n	80092d6 <TIM_Base_SetConfig+0x9a>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a29      	ldr	r2, [pc, #164]	; (8009360 <TIM_Base_SetConfig+0x124>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d00b      	beq.n	80092d6 <TIM_Base_SetConfig+0x9a>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4a28      	ldr	r2, [pc, #160]	; (8009364 <TIM_Base_SetConfig+0x128>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d007      	beq.n	80092d6 <TIM_Base_SetConfig+0x9a>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a27      	ldr	r2, [pc, #156]	; (8009368 <TIM_Base_SetConfig+0x12c>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d003      	beq.n	80092d6 <TIM_Base_SetConfig+0x9a>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a26      	ldr	r2, [pc, #152]	; (800936c <TIM_Base_SetConfig+0x130>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d108      	bne.n	80092e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	689a      	ldr	r2, [r3, #8]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a10      	ldr	r2, [pc, #64]	; (8009350 <TIM_Base_SetConfig+0x114>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d00f      	beq.n	8009334 <TIM_Base_SetConfig+0xf8>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4a12      	ldr	r2, [pc, #72]	; (8009360 <TIM_Base_SetConfig+0x124>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d00b      	beq.n	8009334 <TIM_Base_SetConfig+0xf8>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a11      	ldr	r2, [pc, #68]	; (8009364 <TIM_Base_SetConfig+0x128>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d007      	beq.n	8009334 <TIM_Base_SetConfig+0xf8>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a10      	ldr	r2, [pc, #64]	; (8009368 <TIM_Base_SetConfig+0x12c>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d003      	beq.n	8009334 <TIM_Base_SetConfig+0xf8>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a0f      	ldr	r2, [pc, #60]	; (800936c <TIM_Base_SetConfig+0x130>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d103      	bne.n	800933c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	691a      	ldr	r2, [r3, #16]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	615a      	str	r2, [r3, #20]
}
 8009342:	bf00      	nop
 8009344:	3714      	adds	r7, #20
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	40012c00 	.word	0x40012c00
 8009354:	40000400 	.word	0x40000400
 8009358:	40000800 	.word	0x40000800
 800935c:	40000c00 	.word	0x40000c00
 8009360:	40013400 	.word	0x40013400
 8009364:	40014000 	.word	0x40014000
 8009368:	40014400 	.word	0x40014400
 800936c:	40014800 	.word	0x40014800

08009370 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800938c:	bf00      	nop
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80093a0:	bf00      	nop
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d101      	bne.n	80093be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e040      	b.n	8009440 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d106      	bne.n	80093d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f7f8 f802 	bl	80013d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2224      	movs	r2, #36	; 0x24
 80093d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f022 0201 	bic.w	r2, r2, #1
 80093e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f82c 	bl	8009448 <UART_SetConfig>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d101      	bne.n	80093fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e022      	b.n	8009440 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d002      	beq.n	8009408 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fad8 	bl	80099b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	685a      	ldr	r2, [r3, #4]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009416:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	689a      	ldr	r2, [r3, #8]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009426:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f042 0201 	orr.w	r2, r2, #1
 8009436:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fb5f 	bl	8009afc <UART_CheckIdleState>
 800943e:	4603      	mov	r3, r0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800944c:	b08a      	sub	sp, #40	; 0x28
 800944e:	af00      	add	r7, sp, #0
 8009450:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009452:	2300      	movs	r3, #0
 8009454:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	689a      	ldr	r2, [r3, #8]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	431a      	orrs	r2, r3
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	695b      	ldr	r3, [r3, #20]
 8009466:	431a      	orrs	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	69db      	ldr	r3, [r3, #28]
 800946c:	4313      	orrs	r3, r2
 800946e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	4ba4      	ldr	r3, [pc, #656]	; (8009708 <UART_SetConfig+0x2c0>)
 8009478:	4013      	ands	r3, r2
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	6812      	ldr	r2, [r2, #0]
 800947e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009480:	430b      	orrs	r3, r1
 8009482:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	68da      	ldr	r2, [r3, #12]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	430a      	orrs	r2, r1
 8009498:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a99      	ldr	r2, [pc, #612]	; (800970c <UART_SetConfig+0x2c4>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d004      	beq.n	80094b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6a1b      	ldr	r3, [r3, #32]
 80094ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094b0:	4313      	orrs	r3, r2
 80094b2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094c4:	430a      	orrs	r2, r1
 80094c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a90      	ldr	r2, [pc, #576]	; (8009710 <UART_SetConfig+0x2c8>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d126      	bne.n	8009520 <UART_SetConfig+0xd8>
 80094d2:	4b90      	ldr	r3, [pc, #576]	; (8009714 <UART_SetConfig+0x2cc>)
 80094d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094d8:	f003 0303 	and.w	r3, r3, #3
 80094dc:	2b03      	cmp	r3, #3
 80094de:	d81b      	bhi.n	8009518 <UART_SetConfig+0xd0>
 80094e0:	a201      	add	r2, pc, #4	; (adr r2, 80094e8 <UART_SetConfig+0xa0>)
 80094e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e6:	bf00      	nop
 80094e8:	080094f9 	.word	0x080094f9
 80094ec:	08009509 	.word	0x08009509
 80094f0:	08009501 	.word	0x08009501
 80094f4:	08009511 	.word	0x08009511
 80094f8:	2301      	movs	r3, #1
 80094fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094fe:	e116      	b.n	800972e <UART_SetConfig+0x2e6>
 8009500:	2302      	movs	r3, #2
 8009502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009506:	e112      	b.n	800972e <UART_SetConfig+0x2e6>
 8009508:	2304      	movs	r3, #4
 800950a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800950e:	e10e      	b.n	800972e <UART_SetConfig+0x2e6>
 8009510:	2308      	movs	r3, #8
 8009512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009516:	e10a      	b.n	800972e <UART_SetConfig+0x2e6>
 8009518:	2310      	movs	r3, #16
 800951a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800951e:	e106      	b.n	800972e <UART_SetConfig+0x2e6>
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a7c      	ldr	r2, [pc, #496]	; (8009718 <UART_SetConfig+0x2d0>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d138      	bne.n	800959c <UART_SetConfig+0x154>
 800952a:	4b7a      	ldr	r3, [pc, #488]	; (8009714 <UART_SetConfig+0x2cc>)
 800952c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009530:	f003 030c 	and.w	r3, r3, #12
 8009534:	2b0c      	cmp	r3, #12
 8009536:	d82d      	bhi.n	8009594 <UART_SetConfig+0x14c>
 8009538:	a201      	add	r2, pc, #4	; (adr r2, 8009540 <UART_SetConfig+0xf8>)
 800953a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953e:	bf00      	nop
 8009540:	08009575 	.word	0x08009575
 8009544:	08009595 	.word	0x08009595
 8009548:	08009595 	.word	0x08009595
 800954c:	08009595 	.word	0x08009595
 8009550:	08009585 	.word	0x08009585
 8009554:	08009595 	.word	0x08009595
 8009558:	08009595 	.word	0x08009595
 800955c:	08009595 	.word	0x08009595
 8009560:	0800957d 	.word	0x0800957d
 8009564:	08009595 	.word	0x08009595
 8009568:	08009595 	.word	0x08009595
 800956c:	08009595 	.word	0x08009595
 8009570:	0800958d 	.word	0x0800958d
 8009574:	2300      	movs	r3, #0
 8009576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800957a:	e0d8      	b.n	800972e <UART_SetConfig+0x2e6>
 800957c:	2302      	movs	r3, #2
 800957e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009582:	e0d4      	b.n	800972e <UART_SetConfig+0x2e6>
 8009584:	2304      	movs	r3, #4
 8009586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800958a:	e0d0      	b.n	800972e <UART_SetConfig+0x2e6>
 800958c:	2308      	movs	r3, #8
 800958e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009592:	e0cc      	b.n	800972e <UART_SetConfig+0x2e6>
 8009594:	2310      	movs	r3, #16
 8009596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800959a:	e0c8      	b.n	800972e <UART_SetConfig+0x2e6>
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a5e      	ldr	r2, [pc, #376]	; (800971c <UART_SetConfig+0x2d4>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d125      	bne.n	80095f2 <UART_SetConfig+0x1aa>
 80095a6:	4b5b      	ldr	r3, [pc, #364]	; (8009714 <UART_SetConfig+0x2cc>)
 80095a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80095b0:	2b30      	cmp	r3, #48	; 0x30
 80095b2:	d016      	beq.n	80095e2 <UART_SetConfig+0x19a>
 80095b4:	2b30      	cmp	r3, #48	; 0x30
 80095b6:	d818      	bhi.n	80095ea <UART_SetConfig+0x1a2>
 80095b8:	2b20      	cmp	r3, #32
 80095ba:	d00a      	beq.n	80095d2 <UART_SetConfig+0x18a>
 80095bc:	2b20      	cmp	r3, #32
 80095be:	d814      	bhi.n	80095ea <UART_SetConfig+0x1a2>
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d002      	beq.n	80095ca <UART_SetConfig+0x182>
 80095c4:	2b10      	cmp	r3, #16
 80095c6:	d008      	beq.n	80095da <UART_SetConfig+0x192>
 80095c8:	e00f      	b.n	80095ea <UART_SetConfig+0x1a2>
 80095ca:	2300      	movs	r3, #0
 80095cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095d0:	e0ad      	b.n	800972e <UART_SetConfig+0x2e6>
 80095d2:	2302      	movs	r3, #2
 80095d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095d8:	e0a9      	b.n	800972e <UART_SetConfig+0x2e6>
 80095da:	2304      	movs	r3, #4
 80095dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095e0:	e0a5      	b.n	800972e <UART_SetConfig+0x2e6>
 80095e2:	2308      	movs	r3, #8
 80095e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095e8:	e0a1      	b.n	800972e <UART_SetConfig+0x2e6>
 80095ea:	2310      	movs	r3, #16
 80095ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095f0:	e09d      	b.n	800972e <UART_SetConfig+0x2e6>
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a4a      	ldr	r2, [pc, #296]	; (8009720 <UART_SetConfig+0x2d8>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d125      	bne.n	8009648 <UART_SetConfig+0x200>
 80095fc:	4b45      	ldr	r3, [pc, #276]	; (8009714 <UART_SetConfig+0x2cc>)
 80095fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009602:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009606:	2bc0      	cmp	r3, #192	; 0xc0
 8009608:	d016      	beq.n	8009638 <UART_SetConfig+0x1f0>
 800960a:	2bc0      	cmp	r3, #192	; 0xc0
 800960c:	d818      	bhi.n	8009640 <UART_SetConfig+0x1f8>
 800960e:	2b80      	cmp	r3, #128	; 0x80
 8009610:	d00a      	beq.n	8009628 <UART_SetConfig+0x1e0>
 8009612:	2b80      	cmp	r3, #128	; 0x80
 8009614:	d814      	bhi.n	8009640 <UART_SetConfig+0x1f8>
 8009616:	2b00      	cmp	r3, #0
 8009618:	d002      	beq.n	8009620 <UART_SetConfig+0x1d8>
 800961a:	2b40      	cmp	r3, #64	; 0x40
 800961c:	d008      	beq.n	8009630 <UART_SetConfig+0x1e8>
 800961e:	e00f      	b.n	8009640 <UART_SetConfig+0x1f8>
 8009620:	2300      	movs	r3, #0
 8009622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009626:	e082      	b.n	800972e <UART_SetConfig+0x2e6>
 8009628:	2302      	movs	r3, #2
 800962a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800962e:	e07e      	b.n	800972e <UART_SetConfig+0x2e6>
 8009630:	2304      	movs	r3, #4
 8009632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009636:	e07a      	b.n	800972e <UART_SetConfig+0x2e6>
 8009638:	2308      	movs	r3, #8
 800963a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800963e:	e076      	b.n	800972e <UART_SetConfig+0x2e6>
 8009640:	2310      	movs	r3, #16
 8009642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009646:	e072      	b.n	800972e <UART_SetConfig+0x2e6>
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a35      	ldr	r2, [pc, #212]	; (8009724 <UART_SetConfig+0x2dc>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d12a      	bne.n	80096a8 <UART_SetConfig+0x260>
 8009652:	4b30      	ldr	r3, [pc, #192]	; (8009714 <UART_SetConfig+0x2cc>)
 8009654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009658:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800965c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009660:	d01a      	beq.n	8009698 <UART_SetConfig+0x250>
 8009662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009666:	d81b      	bhi.n	80096a0 <UART_SetConfig+0x258>
 8009668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800966c:	d00c      	beq.n	8009688 <UART_SetConfig+0x240>
 800966e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009672:	d815      	bhi.n	80096a0 <UART_SetConfig+0x258>
 8009674:	2b00      	cmp	r3, #0
 8009676:	d003      	beq.n	8009680 <UART_SetConfig+0x238>
 8009678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800967c:	d008      	beq.n	8009690 <UART_SetConfig+0x248>
 800967e:	e00f      	b.n	80096a0 <UART_SetConfig+0x258>
 8009680:	2300      	movs	r3, #0
 8009682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009686:	e052      	b.n	800972e <UART_SetConfig+0x2e6>
 8009688:	2302      	movs	r3, #2
 800968a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800968e:	e04e      	b.n	800972e <UART_SetConfig+0x2e6>
 8009690:	2304      	movs	r3, #4
 8009692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009696:	e04a      	b.n	800972e <UART_SetConfig+0x2e6>
 8009698:	2308      	movs	r3, #8
 800969a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800969e:	e046      	b.n	800972e <UART_SetConfig+0x2e6>
 80096a0:	2310      	movs	r3, #16
 80096a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096a6:	e042      	b.n	800972e <UART_SetConfig+0x2e6>
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a17      	ldr	r2, [pc, #92]	; (800970c <UART_SetConfig+0x2c4>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d13a      	bne.n	8009728 <UART_SetConfig+0x2e0>
 80096b2:	4b18      	ldr	r3, [pc, #96]	; (8009714 <UART_SetConfig+0x2cc>)
 80096b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80096bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096c0:	d01a      	beq.n	80096f8 <UART_SetConfig+0x2b0>
 80096c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096c6:	d81b      	bhi.n	8009700 <UART_SetConfig+0x2b8>
 80096c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096cc:	d00c      	beq.n	80096e8 <UART_SetConfig+0x2a0>
 80096ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096d2:	d815      	bhi.n	8009700 <UART_SetConfig+0x2b8>
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d003      	beq.n	80096e0 <UART_SetConfig+0x298>
 80096d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096dc:	d008      	beq.n	80096f0 <UART_SetConfig+0x2a8>
 80096de:	e00f      	b.n	8009700 <UART_SetConfig+0x2b8>
 80096e0:	2300      	movs	r3, #0
 80096e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096e6:	e022      	b.n	800972e <UART_SetConfig+0x2e6>
 80096e8:	2302      	movs	r3, #2
 80096ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096ee:	e01e      	b.n	800972e <UART_SetConfig+0x2e6>
 80096f0:	2304      	movs	r3, #4
 80096f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096f6:	e01a      	b.n	800972e <UART_SetConfig+0x2e6>
 80096f8:	2308      	movs	r3, #8
 80096fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096fe:	e016      	b.n	800972e <UART_SetConfig+0x2e6>
 8009700:	2310      	movs	r3, #16
 8009702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009706:	e012      	b.n	800972e <UART_SetConfig+0x2e6>
 8009708:	efff69f3 	.word	0xefff69f3
 800970c:	40008000 	.word	0x40008000
 8009710:	40013800 	.word	0x40013800
 8009714:	40021000 	.word	0x40021000
 8009718:	40004400 	.word	0x40004400
 800971c:	40004800 	.word	0x40004800
 8009720:	40004c00 	.word	0x40004c00
 8009724:	40005000 	.word	0x40005000
 8009728:	2310      	movs	r3, #16
 800972a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a9f      	ldr	r2, [pc, #636]	; (80099b0 <UART_SetConfig+0x568>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d17a      	bne.n	800982e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009738:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800973c:	2b08      	cmp	r3, #8
 800973e:	d824      	bhi.n	800978a <UART_SetConfig+0x342>
 8009740:	a201      	add	r2, pc, #4	; (adr r2, 8009748 <UART_SetConfig+0x300>)
 8009742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009746:	bf00      	nop
 8009748:	0800976d 	.word	0x0800976d
 800974c:	0800978b 	.word	0x0800978b
 8009750:	08009775 	.word	0x08009775
 8009754:	0800978b 	.word	0x0800978b
 8009758:	0800977b 	.word	0x0800977b
 800975c:	0800978b 	.word	0x0800978b
 8009760:	0800978b 	.word	0x0800978b
 8009764:	0800978b 	.word	0x0800978b
 8009768:	08009783 	.word	0x08009783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800976c:	f7fc fbf4 	bl	8005f58 <HAL_RCC_GetPCLK1Freq>
 8009770:	61f8      	str	r0, [r7, #28]
        break;
 8009772:	e010      	b.n	8009796 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009774:	4b8f      	ldr	r3, [pc, #572]	; (80099b4 <UART_SetConfig+0x56c>)
 8009776:	61fb      	str	r3, [r7, #28]
        break;
 8009778:	e00d      	b.n	8009796 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800977a:	f7fc fb55 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 800977e:	61f8      	str	r0, [r7, #28]
        break;
 8009780:	e009      	b.n	8009796 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009786:	61fb      	str	r3, [r7, #28]
        break;
 8009788:	e005      	b.n	8009796 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800978a:	2300      	movs	r3, #0
 800978c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009794:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	2b00      	cmp	r3, #0
 800979a:	f000 80fb 	beq.w	8009994 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	685a      	ldr	r2, [r3, #4]
 80097a2:	4613      	mov	r3, r2
 80097a4:	005b      	lsls	r3, r3, #1
 80097a6:	4413      	add	r3, r2
 80097a8:	69fa      	ldr	r2, [r7, #28]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d305      	bcc.n	80097ba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80097b4:	69fa      	ldr	r2, [r7, #28]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d903      	bls.n	80097c2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80097c0:	e0e8      	b.n	8009994 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	2200      	movs	r2, #0
 80097c6:	461c      	mov	r4, r3
 80097c8:	4615      	mov	r5, r2
 80097ca:	f04f 0200 	mov.w	r2, #0
 80097ce:	f04f 0300 	mov.w	r3, #0
 80097d2:	022b      	lsls	r3, r5, #8
 80097d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80097d8:	0222      	lsls	r2, r4, #8
 80097da:	68f9      	ldr	r1, [r7, #12]
 80097dc:	6849      	ldr	r1, [r1, #4]
 80097de:	0849      	lsrs	r1, r1, #1
 80097e0:	2000      	movs	r0, #0
 80097e2:	4688      	mov	r8, r1
 80097e4:	4681      	mov	r9, r0
 80097e6:	eb12 0a08 	adds.w	sl, r2, r8
 80097ea:	eb43 0b09 	adc.w	fp, r3, r9
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	603b      	str	r3, [r7, #0]
 80097f6:	607a      	str	r2, [r7, #4]
 80097f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097fc:	4650      	mov	r0, sl
 80097fe:	4659      	mov	r1, fp
 8009800:	f7f6 fce6 	bl	80001d0 <__aeabi_uldivmod>
 8009804:	4602      	mov	r2, r0
 8009806:	460b      	mov	r3, r1
 8009808:	4613      	mov	r3, r2
 800980a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009812:	d308      	bcc.n	8009826 <UART_SetConfig+0x3de>
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800981a:	d204      	bcs.n	8009826 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	69ba      	ldr	r2, [r7, #24]
 8009822:	60da      	str	r2, [r3, #12]
 8009824:	e0b6      	b.n	8009994 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800982c:	e0b2      	b.n	8009994 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	69db      	ldr	r3, [r3, #28]
 8009832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009836:	d15e      	bne.n	80098f6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009838:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800983c:	2b08      	cmp	r3, #8
 800983e:	d828      	bhi.n	8009892 <UART_SetConfig+0x44a>
 8009840:	a201      	add	r2, pc, #4	; (adr r2, 8009848 <UART_SetConfig+0x400>)
 8009842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009846:	bf00      	nop
 8009848:	0800986d 	.word	0x0800986d
 800984c:	08009875 	.word	0x08009875
 8009850:	0800987d 	.word	0x0800987d
 8009854:	08009893 	.word	0x08009893
 8009858:	08009883 	.word	0x08009883
 800985c:	08009893 	.word	0x08009893
 8009860:	08009893 	.word	0x08009893
 8009864:	08009893 	.word	0x08009893
 8009868:	0800988b 	.word	0x0800988b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800986c:	f7fc fb74 	bl	8005f58 <HAL_RCC_GetPCLK1Freq>
 8009870:	61f8      	str	r0, [r7, #28]
        break;
 8009872:	e014      	b.n	800989e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009874:	f7fc fb86 	bl	8005f84 <HAL_RCC_GetPCLK2Freq>
 8009878:	61f8      	str	r0, [r7, #28]
        break;
 800987a:	e010      	b.n	800989e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800987c:	4b4d      	ldr	r3, [pc, #308]	; (80099b4 <UART_SetConfig+0x56c>)
 800987e:	61fb      	str	r3, [r7, #28]
        break;
 8009880:	e00d      	b.n	800989e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009882:	f7fc fad1 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8009886:	61f8      	str	r0, [r7, #28]
        break;
 8009888:	e009      	b.n	800989e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800988a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800988e:	61fb      	str	r3, [r7, #28]
        break;
 8009890:	e005      	b.n	800989e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8009892:	2300      	movs	r3, #0
 8009894:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800989c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d077      	beq.n	8009994 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	005a      	lsls	r2, r3, #1
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	085b      	lsrs	r3, r3, #1
 80098ae:	441a      	add	r2, r3
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	2b0f      	cmp	r3, #15
 80098be:	d916      	bls.n	80098ee <UART_SetConfig+0x4a6>
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098c6:	d212      	bcs.n	80098ee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	f023 030f 	bic.w	r3, r3, #15
 80098d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	085b      	lsrs	r3, r3, #1
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	f003 0307 	and.w	r3, r3, #7
 80098dc:	b29a      	uxth	r2, r3
 80098de:	8afb      	ldrh	r3, [r7, #22]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	8afa      	ldrh	r2, [r7, #22]
 80098ea:	60da      	str	r2, [r3, #12]
 80098ec:	e052      	b.n	8009994 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80098f4:	e04e      	b.n	8009994 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80098f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098fa:	2b08      	cmp	r3, #8
 80098fc:	d827      	bhi.n	800994e <UART_SetConfig+0x506>
 80098fe:	a201      	add	r2, pc, #4	; (adr r2, 8009904 <UART_SetConfig+0x4bc>)
 8009900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009904:	08009929 	.word	0x08009929
 8009908:	08009931 	.word	0x08009931
 800990c:	08009939 	.word	0x08009939
 8009910:	0800994f 	.word	0x0800994f
 8009914:	0800993f 	.word	0x0800993f
 8009918:	0800994f 	.word	0x0800994f
 800991c:	0800994f 	.word	0x0800994f
 8009920:	0800994f 	.word	0x0800994f
 8009924:	08009947 	.word	0x08009947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009928:	f7fc fb16 	bl	8005f58 <HAL_RCC_GetPCLK1Freq>
 800992c:	61f8      	str	r0, [r7, #28]
        break;
 800992e:	e014      	b.n	800995a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009930:	f7fc fb28 	bl	8005f84 <HAL_RCC_GetPCLK2Freq>
 8009934:	61f8      	str	r0, [r7, #28]
        break;
 8009936:	e010      	b.n	800995a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009938:	4b1e      	ldr	r3, [pc, #120]	; (80099b4 <UART_SetConfig+0x56c>)
 800993a:	61fb      	str	r3, [r7, #28]
        break;
 800993c:	e00d      	b.n	800995a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800993e:	f7fc fa73 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8009942:	61f8      	str	r0, [r7, #28]
        break;
 8009944:	e009      	b.n	800995a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800994a:	61fb      	str	r3, [r7, #28]
        break;
 800994c:	e005      	b.n	800995a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800994e:	2300      	movs	r3, #0
 8009950:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009958:	bf00      	nop
    }

    if (pclk != 0U)
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d019      	beq.n	8009994 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	085a      	lsrs	r2, r3, #1
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	441a      	add	r2, r3
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009972:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	2b0f      	cmp	r3, #15
 8009978:	d909      	bls.n	800998e <UART_SetConfig+0x546>
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009980:	d205      	bcs.n	800998e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	b29a      	uxth	r2, r3
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	60da      	str	r2, [r3, #12]
 800998c:	e002      	b.n	8009994 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2200      	movs	r2, #0
 8009998:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2200      	movs	r2, #0
 800999e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80099a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3728      	adds	r7, #40	; 0x28
 80099a8:	46bd      	mov	sp, r7
 80099aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099ae:	bf00      	nop
 80099b0:	40008000 	.word	0x40008000
 80099b4:	00f42400 	.word	0x00f42400

080099b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c4:	f003 0301 	and.w	r3, r3, #1
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00a      	beq.n	80099e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	430a      	orrs	r2, r1
 80099e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e6:	f003 0302 	and.w	r3, r3, #2
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00a      	beq.n	8009a04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	430a      	orrs	r2, r1
 8009a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a08:	f003 0304 	and.w	r3, r3, #4
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00a      	beq.n	8009a26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	430a      	orrs	r2, r1
 8009a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2a:	f003 0308 	and.w	r3, r3, #8
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00a      	beq.n	8009a48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	430a      	orrs	r2, r1
 8009a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4c:	f003 0310 	and.w	r3, r3, #16
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00a      	beq.n	8009a6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	430a      	orrs	r2, r1
 8009a68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6e:	f003 0320 	and.w	r3, r3, #32
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d00a      	beq.n	8009a8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	430a      	orrs	r2, r1
 8009a8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d01a      	beq.n	8009ace <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	430a      	orrs	r2, r1
 8009aac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ab6:	d10a      	bne.n	8009ace <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	430a      	orrs	r2, r1
 8009acc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00a      	beq.n	8009af0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	430a      	orrs	r2, r1
 8009aee:	605a      	str	r2, [r3, #4]
  }
}
 8009af0:	bf00      	nop
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af02      	add	r7, sp, #8
 8009b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b0c:	f7f8 f926 	bl	8001d5c <HAL_GetTick>
 8009b10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f003 0308 	and.w	r3, r3, #8
 8009b1c:	2b08      	cmp	r3, #8
 8009b1e:	d10e      	bne.n	8009b3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 f82d 	bl	8009b8e <UART_WaitOnFlagUntilTimeout>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d001      	beq.n	8009b3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b3a:	2303      	movs	r3, #3
 8009b3c:	e023      	b.n	8009b86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 0304 	and.w	r3, r3, #4
 8009b48:	2b04      	cmp	r3, #4
 8009b4a:	d10e      	bne.n	8009b6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b50:	9300      	str	r3, [sp, #0]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f817 	bl	8009b8e <UART_WaitOnFlagUntilTimeout>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d001      	beq.n	8009b6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e00d      	b.n	8009b86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2220      	movs	r2, #32
 8009b6e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2220      	movs	r2, #32
 8009b74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b09c      	sub	sp, #112	; 0x70
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	60f8      	str	r0, [r7, #12]
 8009b96:	60b9      	str	r1, [r7, #8]
 8009b98:	603b      	str	r3, [r7, #0]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b9e:	e0a5      	b.n	8009cec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba6:	f000 80a1 	beq.w	8009cec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009baa:	f7f8 f8d7 	bl	8001d5c <HAL_GetTick>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	1ad3      	subs	r3, r2, r3
 8009bb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d302      	bcc.n	8009bc0 <UART_WaitOnFlagUntilTimeout+0x32>
 8009bba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d13e      	bne.n	8009c3e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bc8:	e853 3f00 	ldrex	r3, [r3]
 8009bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009bd4:	667b      	str	r3, [r7, #100]	; 0x64
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009be0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009be4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009be6:	e841 2300 	strex	r3, r2, [r1]
 8009bea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1e6      	bne.n	8009bc0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	3308      	adds	r3, #8
 8009bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bfc:	e853 3f00 	ldrex	r3, [r3]
 8009c00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c04:	f023 0301 	bic.w	r3, r3, #1
 8009c08:	663b      	str	r3, [r7, #96]	; 0x60
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	3308      	adds	r3, #8
 8009c10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c12:	64ba      	str	r2, [r7, #72]	; 0x48
 8009c14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c1a:	e841 2300 	strex	r3, r2, [r1]
 8009c1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d1e5      	bne.n	8009bf2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2220      	movs	r2, #32
 8009c2a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2220      	movs	r2, #32
 8009c30:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009c3a:	2303      	movs	r3, #3
 8009c3c:	e067      	b.n	8009d0e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f003 0304 	and.w	r3, r3, #4
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d04f      	beq.n	8009cec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	69db      	ldr	r3, [r3, #28]
 8009c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c5a:	d147      	bne.n	8009cec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c64:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6e:	e853 3f00 	ldrex	r3, [r3]
 8009c72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	461a      	mov	r2, r3
 8009c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c84:	637b      	str	r3, [r7, #52]	; 0x34
 8009c86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c8c:	e841 2300 	strex	r3, r2, [r1]
 8009c90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1e6      	bne.n	8009c66 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	3308      	adds	r3, #8
 8009c9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	e853 3f00 	ldrex	r3, [r3]
 8009ca6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	f023 0301 	bic.w	r3, r3, #1
 8009cae:	66bb      	str	r3, [r7, #104]	; 0x68
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	3308      	adds	r3, #8
 8009cb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009cb8:	623a      	str	r2, [r7, #32]
 8009cba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cbc:	69f9      	ldr	r1, [r7, #28]
 8009cbe:	6a3a      	ldr	r2, [r7, #32]
 8009cc0:	e841 2300 	strex	r3, r2, [r1]
 8009cc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1e5      	bne.n	8009c98 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2220      	movs	r2, #32
 8009cd0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2220      	movs	r2, #32
 8009cd6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2220      	movs	r2, #32
 8009cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	e010      	b.n	8009d0e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	69da      	ldr	r2, [r3, #28]
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	bf0c      	ite	eq
 8009cfc:	2301      	moveq	r3, #1
 8009cfe:	2300      	movne	r3, #0
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	461a      	mov	r2, r3
 8009d04:	79fb      	ldrb	r3, [r7, #7]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	f43f af4a 	beq.w	8009ba0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3770      	adds	r7, #112	; 0x70
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
	...

08009d18 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b087      	sub	sp, #28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d2c:	683a      	ldr	r2, [r7, #0]
 8009d2e:	6812      	ldr	r2, [r2, #0]
 8009d30:	f023 0101 	bic.w	r1, r3, #1
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	2b08      	cmp	r3, #8
 8009d40:	d102      	bne.n	8009d48 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009d42:	2340      	movs	r3, #64	; 0x40
 8009d44:	617b      	str	r3, [r7, #20]
 8009d46:	e001      	b.n	8009d4c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8009d58:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009d5e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009d64:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8009d6a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8009d70:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8009d76:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8009d7c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8009d82:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8009d88:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da0:	693a      	ldr	r2, [r7, #16]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8009da6:	4b19      	ldr	r3, [pc, #100]	; (8009e0c <FMC_NORSRAM_Init+0xf4>)
 8009da8:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009db0:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8009db8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	43db      	mvns	r3, r3
 8009dc8:	ea02 0103 	and.w	r1, r2, r3
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	4319      	orrs	r1, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009de2:	d10c      	bne.n	8009dfe <FMC_NORSRAM_Init+0xe6>
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d008      	beq.n	8009dfe <FMC_NORSRAM_Init+0xe6>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df8:	431a      	orrs	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	371c      	adds	r7, #28
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr
 8009e0c:	0008fb7f 	.word	0x0008fb7f

08009e10 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b087      	sub	sp, #28
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	1c5a      	adds	r2, r3, #1
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e26:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	011b      	lsls	r3, r3, #4
 8009e34:	431a      	orrs	r2, r3
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	021b      	lsls	r3, r3, #8
 8009e3c:	431a      	orrs	r2, r3
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	041b      	lsls	r3, r3, #16
 8009e44:	431a      	orrs	r2, r3
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	695b      	ldr	r3, [r3, #20]
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	051b      	lsls	r3, r3, #20
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	699b      	ldr	r3, [r3, #24]
 8009e54:	3b02      	subs	r3, #2
 8009e56:	061b      	lsls	r3, r3, #24
 8009e58:	431a      	orrs	r2, r3
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	69db      	ldr	r3, [r3, #28]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	3201      	adds	r2, #1
 8009e64:	4319      	orrs	r1, r3
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e78:	d113      	bne.n	8009ea2 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009e82:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	695b      	ldr	r3, [r3, #20]
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	051b      	lsls	r3, r3, #20
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	431a      	orrs	r2, r3
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	371c      	adds	r7, #28
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
 8009ebc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ec4:	d11d      	bne.n	8009f02 <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009ece:	4b13      	ldr	r3, [pc, #76]	; (8009f1c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	6811      	ldr	r1, [r2, #0]
 8009ed6:	68ba      	ldr	r2, [r7, #8]
 8009ed8:	6852      	ldr	r2, [r2, #4]
 8009eda:	0112      	lsls	r2, r2, #4
 8009edc:	4311      	orrs	r1, r2
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	6892      	ldr	r2, [r2, #8]
 8009ee2:	0212      	lsls	r2, r2, #8
 8009ee4:	4311      	orrs	r1, r2
 8009ee6:	68ba      	ldr	r2, [r7, #8]
 8009ee8:	69d2      	ldr	r2, [r2, #28]
 8009eea:	4311      	orrs	r1, r2
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	6912      	ldr	r2, [r2, #16]
 8009ef0:	0412      	lsls	r2, r2, #16
 8009ef2:	430a      	orrs	r2, r1
 8009ef4:	ea43 0102 	orr.w	r1, r3, r2
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009f00:	e005      	b.n	8009f0e <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009f0e:	2300      	movs	r3, #0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3714      	adds	r7, #20
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr
 8009f1c:	cff00000 	.word	0xcff00000

08009f20 <FMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_WriteOperation_Disable(FMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Disable write operation */
  CLEAR_BIT(Device->BTCR[Bank], FMC_WRITE_OPERATION_ENABLE);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	683a      	ldr	r2, [r7, #0]
 8009f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	683a      	ldr	r2, [r7, #0]
 8009f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009f4c:	b084      	sub	sp, #16
 8009f4e:	b480      	push	{r7}
 8009f50:	b085      	sub	sp, #20
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
 8009f56:	f107 001c 	add.w	r0, r7, #28
 8009f5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8009f62:	6a3b      	ldr	r3, [r7, #32]
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8009f6a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8009f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8009f6e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009f72:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009f76:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009f7a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009f8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	431a      	orrs	r2, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3714      	adds	r7, #20
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	b004      	add	sp, #16
 8009fa4:	4770      	bx	lr

08009fa6 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009fa6:	b480      	push	{r7}
 8009fa8:	b083      	sub	sp, #12
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2203      	movs	r2, #3
 8009fcc:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009fce:	2002      	movs	r0, #2
 8009fd0:	f7f7 fed0 	bl	8001d74 <HAL_Delay>

  return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3708      	adds	r7, #8
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b083      	sub	sp, #12
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 0303 	and.w	r3, r3, #3
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	370c      	adds	r7, #12
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr

08009ffa <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009ffa:	b480      	push	{r7}
 8009ffc:	b085      	sub	sp, #20
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
 800a002:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a004:	2300      	movs	r3, #0
 800a006:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a018:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a01e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a024:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	4313      	orrs	r3, r2
 800a02a:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a034:	f023 030f 	bic.w	r3, r3, #15
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	431a      	orrs	r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3714      	adds	r7, #20
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr

0800a04e <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a04e:	b480      	push	{r7}
 800a050:	b083      	sub	sp, #12
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	b2db      	uxtb	r3, r3
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	3314      	adds	r3, #20
 800a076:	461a      	mov	r2, r3
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	4413      	add	r3, r2
 800a07c:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a08e:	b480      	push	{r7}
 800a090:	b085      	sub	sp, #20
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a098:	2300      	movs	r3, #0
 800a09a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	685a      	ldr	r2, [r3, #4]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a0b4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a0ba:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a0c0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a0c2:	68fa      	ldr	r2, [r7, #12]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0cc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	431a      	orrs	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0

}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3714      	adds	r7, #20
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr

0800a0e6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b088      	sub	sp, #32
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
 800a0ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a0f4:	2310      	movs	r3, #16
 800a0f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0f8:	2340      	movs	r3, #64	; 0x40
 800a0fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a104:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a106:	f107 0308 	add.w	r3, r7, #8
 800a10a:	4619      	mov	r1, r3
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f7ff ff74 	bl	8009ffa <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a112:	f241 3288 	movw	r2, #5000	; 0x1388
 800a116:	2110      	movs	r1, #16
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 f94d 	bl	800a3b8 <SDMMC_GetCmdResp1>
 800a11e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a120:	69fb      	ldr	r3, [r7, #28]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3720      	adds	r7, #32
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b08a      	sub	sp, #40	; 0x28
 800a12e:	af00      	add	r7, sp, #0
 800a130:	60f8      	str	r0, [r7, #12]
 800a132:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a13a:	2307      	movs	r3, #7
 800a13c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a13e:	2340      	movs	r3, #64	; 0x40
 800a140:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a142:	2300      	movs	r3, #0
 800a144:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a14a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a14c:	f107 0310 	add.w	r3, r7, #16
 800a150:	4619      	mov	r1, r3
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f7ff ff51 	bl	8009ffa <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a158:	f241 3288 	movw	r2, #5000	; 0x1388
 800a15c:	2107      	movs	r1, #7
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f000 f92a 	bl	800a3b8 <SDMMC_GetCmdResp1>
 800a164:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3728      	adds	r7, #40	; 0x28
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b088      	sub	sp, #32
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a178:	2300      	movs	r3, #0
 800a17a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a17c:	2300      	movs	r3, #0
 800a17e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a180:	2300      	movs	r3, #0
 800a182:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a184:	2300      	movs	r3, #0
 800a186:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a18c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a18e:	f107 0308 	add.w	r3, r7, #8
 800a192:	4619      	mov	r1, r3
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f7ff ff30 	bl	8009ffa <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 fb44 	bl	800a828 <SDMMC_GetCmdError>
 800a1a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1a2:	69fb      	ldr	r3, [r7, #28]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3720      	adds	r7, #32
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b088      	sub	sp, #32
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a1b4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a1b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a1ba:	2308      	movs	r3, #8
 800a1bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a1be:	2340      	movs	r3, #64	; 0x40
 800a1c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1cc:	f107 0308 	add.w	r3, r7, #8
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7ff ff11 	bl	8009ffa <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 fad7 	bl	800a78c <SDMMC_GetCmdResp7>
 800a1de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1e0:	69fb      	ldr	r3, [r7, #28]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3720      	adds	r7, #32
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b088      	sub	sp, #32
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
 800a1f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a1f8:	2337      	movs	r3, #55	; 0x37
 800a1fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a1fc:	2340      	movs	r3, #64	; 0x40
 800a1fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a200:	2300      	movs	r3, #0
 800a202:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a208:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a20a:	f107 0308 	add.w	r3, r7, #8
 800a20e:	4619      	mov	r1, r3
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f7ff fef2 	bl	8009ffa <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a216:	f241 3288 	movw	r2, #5000	; 0x1388
 800a21a:	2137      	movs	r1, #55	; 0x37
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 f8cb 	bl	800a3b8 <SDMMC_GetCmdResp1>
 800a222:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a224:	69fb      	ldr	r3, [r7, #28]
}
 800a226:	4618      	mov	r0, r3
 800a228:	3720      	adds	r7, #32
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a22e:	b580      	push	{r7, lr}
 800a230:	b088      	sub	sp, #32
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
 800a236:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a23e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a242:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a244:	2329      	movs	r3, #41	; 0x29
 800a246:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a248:	2340      	movs	r3, #64	; 0x40
 800a24a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a24c:	2300      	movs	r3, #0
 800a24e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a254:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a256:	f107 0308 	add.w	r3, r7, #8
 800a25a:	4619      	mov	r1, r3
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f7ff fecc 	bl	8009ffa <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f9de 	bl	800a624 <SDMMC_GetCmdResp3>
 800a268:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a26a:	69fb      	ldr	r3, [r7, #28]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3720      	adds	r7, #32
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b088      	sub	sp, #32
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a282:	2306      	movs	r3, #6
 800a284:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a286:	2340      	movs	r3, #64	; 0x40
 800a288:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a28a:	2300      	movs	r3, #0
 800a28c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a28e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a292:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a294:	f107 0308 	add.w	r3, r7, #8
 800a298:	4619      	mov	r1, r3
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f7ff fead 	bl	8009ffa <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a2a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2a4:	2106      	movs	r1, #6
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f886 	bl	800a3b8 <SDMMC_GetCmdResp1>
 800a2ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2ae:	69fb      	ldr	r3, [r7, #28]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3720      	adds	r7, #32
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b088      	sub	sp, #32
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a2c4:	2333      	movs	r3, #51	; 0x33
 800a2c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a2c8:	2340      	movs	r3, #64	; 0x40
 800a2ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2d6:	f107 0308 	add.w	r3, r7, #8
 800a2da:	4619      	mov	r1, r3
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f7ff fe8c 	bl	8009ffa <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a2e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2e6:	2133      	movs	r1, #51	; 0x33
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 f865 	bl	800a3b8 <SDMMC_GetCmdResp1>
 800a2ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2f0:	69fb      	ldr	r3, [r7, #28]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3720      	adds	r7, #32
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b088      	sub	sp, #32
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a302:	2300      	movs	r3, #0
 800a304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a306:	2302      	movs	r3, #2
 800a308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a30a:	23c0      	movs	r3, #192	; 0xc0
 800a30c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a30e:	2300      	movs	r3, #0
 800a310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a316:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a318:	f107 0308 	add.w	r3, r7, #8
 800a31c:	4619      	mov	r1, r3
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7ff fe6b 	bl	8009ffa <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 f935 	bl	800a594 <SDMMC_GetCmdResp2>
 800a32a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a32c:	69fb      	ldr	r3, [r7, #28]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3720      	adds	r7, #32
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b088      	sub	sp, #32
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
 800a33e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a344:	2309      	movs	r3, #9
 800a346:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a348:	23c0      	movs	r3, #192	; 0xc0
 800a34a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a34c:	2300      	movs	r3, #0
 800a34e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a354:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a356:	f107 0308 	add.w	r3, r7, #8
 800a35a:	4619      	mov	r1, r3
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f7ff fe4c 	bl	8009ffa <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 f916 	bl	800a594 <SDMMC_GetCmdResp2>
 800a368:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a36a:	69fb      	ldr	r3, [r7, #28]
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3720      	adds	r7, #32
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b088      	sub	sp, #32
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a37e:	2300      	movs	r3, #0
 800a380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a382:	2303      	movs	r3, #3
 800a384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a386:	2340      	movs	r3, #64	; 0x40
 800a388:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a38a:	2300      	movs	r3, #0
 800a38c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a38e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a392:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a394:	f107 0308 	add.w	r3, r7, #8
 800a398:	4619      	mov	r1, r3
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f7ff fe2d 	bl	8009ffa <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a3a0:	683a      	ldr	r2, [r7, #0]
 800a3a2:	2103      	movs	r1, #3
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f97b 	bl	800a6a0 <SDMMC_GetCmdResp6>
 800a3aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3ac:	69fb      	ldr	r3, [r7, #28]
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3720      	adds	r7, #32
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
	...

0800a3b8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b088      	sub	sp, #32
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	607a      	str	r2, [r7, #4]
 800a3c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a3c6:	4b70      	ldr	r3, [pc, #448]	; (800a588 <SDMMC_GetCmdResp1+0x1d0>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a70      	ldr	r2, [pc, #448]	; (800a58c <SDMMC_GetCmdResp1+0x1d4>)
 800a3cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a3d0:	0a5a      	lsrs	r2, r3, #9
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	fb02 f303 	mul.w	r3, r2, r3
 800a3d8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	1e5a      	subs	r2, r3, #1
 800a3de:	61fa      	str	r2, [r7, #28]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d102      	bne.n	800a3ea <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a3e8:	e0c9      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ee:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d0ef      	beq.n	800a3da <SDMMC_GetCmdResp1+0x22>
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1ea      	bne.n	800a3da <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a408:	f003 0304 	and.w	r3, r3, #4
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d004      	beq.n	800a41a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2204      	movs	r2, #4
 800a414:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a416:	2304      	movs	r3, #4
 800a418:	e0b1      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a41e:	f003 0301 	and.w	r3, r3, #1
 800a422:	2b00      	cmp	r3, #0
 800a424:	d004      	beq.n	800a430 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2201      	movs	r2, #1
 800a42a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e0a6      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	22c5      	movs	r2, #197	; 0xc5
 800a434:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f7ff fe09 	bl	800a04e <SDMMC_GetCommandResponse>
 800a43c:	4603      	mov	r3, r0
 800a43e:	461a      	mov	r2, r3
 800a440:	7afb      	ldrb	r3, [r7, #11]
 800a442:	4293      	cmp	r3, r2
 800a444:	d001      	beq.n	800a44a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a446:	2301      	movs	r3, #1
 800a448:	e099      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a44a:	2100      	movs	r1, #0
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	f7ff fe0b 	bl	800a068 <SDMMC_GetResponse>
 800a452:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a454:	697a      	ldr	r2, [r7, #20]
 800a456:	4b4e      	ldr	r3, [pc, #312]	; (800a590 <SDMMC_GetCmdResp1+0x1d8>)
 800a458:	4013      	ands	r3, r2
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d101      	bne.n	800a462 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a45e:	2300      	movs	r3, #0
 800a460:	e08d      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	2b00      	cmp	r3, #0
 800a466:	da02      	bge.n	800a46e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a468:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a46c:	e087      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a474:	2b00      	cmp	r3, #0
 800a476:	d001      	beq.n	800a47c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a478:	2340      	movs	r3, #64	; 0x40
 800a47a:	e080      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a486:	2380      	movs	r3, #128	; 0x80
 800a488:	e079      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a490:	2b00      	cmp	r3, #0
 800a492:	d002      	beq.n	800a49a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a494:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a498:	e071      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d002      	beq.n	800a4aa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a4a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4a8:	e069      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d002      	beq.n	800a4ba <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a4b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4b8:	e061      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d002      	beq.n	800a4ca <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a4c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4c8:	e059      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d002      	beq.n	800a4da <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a4d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4d8:	e051      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d002      	beq.n	800a4ea <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a4e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a4e8:	e049      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d002      	beq.n	800a4fa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a4f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a4f8:	e041      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a500:	2b00      	cmp	r3, #0
 800a502:	d002      	beq.n	800a50a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a504:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a508:	e039      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a510:	2b00      	cmp	r3, #0
 800a512:	d002      	beq.n	800a51a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a514:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a518:	e031      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a520:	2b00      	cmp	r3, #0
 800a522:	d002      	beq.n	800a52a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a524:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a528:	e029      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a530:	2b00      	cmp	r3, #0
 800a532:	d002      	beq.n	800a53a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a534:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a538:	e021      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a540:	2b00      	cmp	r3, #0
 800a542:	d002      	beq.n	800a54a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a544:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a548:	e019      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a550:	2b00      	cmp	r3, #0
 800a552:	d002      	beq.n	800a55a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a554:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a558:	e011      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a560:	2b00      	cmp	r3, #0
 800a562:	d002      	beq.n	800a56a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a564:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a568:	e009      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	f003 0308 	and.w	r3, r3, #8
 800a570:	2b00      	cmp	r3, #0
 800a572:	d002      	beq.n	800a57a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a574:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a578:	e001      	b.n	800a57e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a57a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3720      	adds	r7, #32
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	20000000 	.word	0x20000000
 800a58c:	10624dd3 	.word	0x10624dd3
 800a590:	fdffe008 	.word	0xfdffe008

0800a594 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a59c:	4b1f      	ldr	r3, [pc, #124]	; (800a61c <SDMMC_GetCmdResp2+0x88>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a1f      	ldr	r2, [pc, #124]	; (800a620 <SDMMC_GetCmdResp2+0x8c>)
 800a5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5a6:	0a5b      	lsrs	r3, r3, #9
 800a5a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5ac:	fb02 f303 	mul.w	r3, r2, r3
 800a5b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	1e5a      	subs	r2, r3, #1
 800a5b6:	60fa      	str	r2, [r7, #12]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d102      	bne.n	800a5c2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a5bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5c0:	e026      	b.n	800a610 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d0ef      	beq.n	800a5b2 <SDMMC_GetCmdResp2+0x1e>
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d1ea      	bne.n	800a5b2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5e0:	f003 0304 	and.w	r3, r3, #4
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d004      	beq.n	800a5f2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2204      	movs	r2, #4
 800a5ec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5ee:	2304      	movs	r3, #4
 800a5f0:	e00e      	b.n	800a610 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5f6:	f003 0301 	and.w	r3, r3, #1
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d004      	beq.n	800a608 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2201      	movs	r2, #1
 800a602:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a604:	2301      	movs	r3, #1
 800a606:	e003      	b.n	800a610 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	22c5      	movs	r2, #197	; 0xc5
 800a60c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3714      	adds	r7, #20
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr
 800a61c:	20000000 	.word	0x20000000
 800a620:	10624dd3 	.word	0x10624dd3

0800a624 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a62c:	4b1a      	ldr	r3, [pc, #104]	; (800a698 <SDMMC_GetCmdResp3+0x74>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a1a      	ldr	r2, [pc, #104]	; (800a69c <SDMMC_GetCmdResp3+0x78>)
 800a632:	fba2 2303 	umull	r2, r3, r2, r3
 800a636:	0a5b      	lsrs	r3, r3, #9
 800a638:	f241 3288 	movw	r2, #5000	; 0x1388
 800a63c:	fb02 f303 	mul.w	r3, r2, r3
 800a640:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	1e5a      	subs	r2, r3, #1
 800a646:	60fa      	str	r2, [r7, #12]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d102      	bne.n	800a652 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a64c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a650:	e01b      	b.n	800a68a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a656:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d0ef      	beq.n	800a642 <SDMMC_GetCmdResp3+0x1e>
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d1ea      	bne.n	800a642 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a670:	f003 0304 	and.w	r3, r3, #4
 800a674:	2b00      	cmp	r3, #0
 800a676:	d004      	beq.n	800a682 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2204      	movs	r2, #4
 800a67c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a67e:	2304      	movs	r3, #4
 800a680:	e003      	b.n	800a68a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	22c5      	movs	r2, #197	; 0xc5
 800a686:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3714      	adds	r7, #20
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	20000000 	.word	0x20000000
 800a69c:	10624dd3 	.word	0x10624dd3

0800a6a0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b088      	sub	sp, #32
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	607a      	str	r2, [r7, #4]
 800a6ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a6ae:	4b35      	ldr	r3, [pc, #212]	; (800a784 <SDMMC_GetCmdResp6+0xe4>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a35      	ldr	r2, [pc, #212]	; (800a788 <SDMMC_GetCmdResp6+0xe8>)
 800a6b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a6b8:	0a5b      	lsrs	r3, r3, #9
 800a6ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6be:	fb02 f303 	mul.w	r3, r2, r3
 800a6c2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	1e5a      	subs	r2, r3, #1
 800a6c8:	61fa      	str	r2, [r7, #28]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d102      	bne.n	800a6d4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a6d2:	e052      	b.n	800a77a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6d8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d0ef      	beq.n	800a6c4 <SDMMC_GetCmdResp6+0x24>
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1ea      	bne.n	800a6c4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6f2:	f003 0304 	and.w	r3, r3, #4
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d004      	beq.n	800a704 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2204      	movs	r2, #4
 800a6fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a700:	2304      	movs	r3, #4
 800a702:	e03a      	b.n	800a77a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d004      	beq.n	800a71a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2201      	movs	r2, #1
 800a714:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a716:	2301      	movs	r3, #1
 800a718:	e02f      	b.n	800a77a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f7ff fc97 	bl	800a04e <SDMMC_GetCommandResponse>
 800a720:	4603      	mov	r3, r0
 800a722:	461a      	mov	r2, r3
 800a724:	7afb      	ldrb	r3, [r7, #11]
 800a726:	4293      	cmp	r3, r2
 800a728:	d001      	beq.n	800a72e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a72a:	2301      	movs	r3, #1
 800a72c:	e025      	b.n	800a77a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	22c5      	movs	r2, #197	; 0xc5
 800a732:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a734:	2100      	movs	r1, #0
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f7ff fc96 	bl	800a068 <SDMMC_GetResponse>
 800a73c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a744:	2b00      	cmp	r3, #0
 800a746:	d106      	bne.n	800a756 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	0c1b      	lsrs	r3, r3, #16
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a752:	2300      	movs	r3, #0
 800a754:	e011      	b.n	800a77a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d002      	beq.n	800a766 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a760:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a764:	e009      	b.n	800a77a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d002      	beq.n	800a776 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a774:	e001      	b.n	800a77a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3720      	adds	r7, #32
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	20000000 	.word	0x20000000
 800a788:	10624dd3 	.word	0x10624dd3

0800a78c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a794:	4b22      	ldr	r3, [pc, #136]	; (800a820 <SDMMC_GetCmdResp7+0x94>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a22      	ldr	r2, [pc, #136]	; (800a824 <SDMMC_GetCmdResp7+0x98>)
 800a79a:	fba2 2303 	umull	r2, r3, r2, r3
 800a79e:	0a5b      	lsrs	r3, r3, #9
 800a7a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7a4:	fb02 f303 	mul.w	r3, r2, r3
 800a7a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	1e5a      	subs	r2, r3, #1
 800a7ae:	60fa      	str	r2, [r7, #12]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d102      	bne.n	800a7ba <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a7b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a7b8:	e02c      	b.n	800a814 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d0ef      	beq.n	800a7aa <SDMMC_GetCmdResp7+0x1e>
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d1ea      	bne.n	800a7aa <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7d8:	f003 0304 	and.w	r3, r3, #4
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d004      	beq.n	800a7ea <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2204      	movs	r2, #4
 800a7e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a7e6:	2304      	movs	r3, #4
 800a7e8:	e014      	b.n	800a814 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ee:	f003 0301 	and.w	r3, r3, #1
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d004      	beq.n	800a800 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e009      	b.n	800a814 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d002      	beq.n	800a812 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2240      	movs	r2, #64	; 0x40
 800a810:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a812:	2300      	movs	r3, #0

}
 800a814:	4618      	mov	r0, r3
 800a816:	3714      	adds	r7, #20
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	20000000 	.word	0x20000000
 800a824:	10624dd3 	.word	0x10624dd3

0800a828 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a830:	4b11      	ldr	r3, [pc, #68]	; (800a878 <SDMMC_GetCmdError+0x50>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a11      	ldr	r2, [pc, #68]	; (800a87c <SDMMC_GetCmdError+0x54>)
 800a836:	fba2 2303 	umull	r2, r3, r2, r3
 800a83a:	0a5b      	lsrs	r3, r3, #9
 800a83c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a840:	fb02 f303 	mul.w	r3, r2, r3
 800a844:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	1e5a      	subs	r2, r3, #1
 800a84a:	60fa      	str	r2, [r7, #12]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d102      	bne.n	800a856 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a850:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a854:	e009      	b.n	800a86a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a85a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d0f1      	beq.n	800a846 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	22c5      	movs	r2, #197	; 0xc5
 800a866:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3714      	adds	r7, #20
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	20000000 	.word	0x20000000
 800a87c:	10624dd3 	.word	0x10624dd3

0800a880 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a880:	b084      	sub	sp, #16
 800a882:	b580      	push	{r7, lr}
 800a884:	b084      	sub	sp, #16
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
 800a88a:	f107 001c 	add.w	r0, r7, #28
 800a88e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f956 	bl	800ab50 <USB_CoreReset>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a8a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d106      	bne.n	800a8bc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	639a      	str	r2, [r3, #56]	; 0x38
 800a8ba:	e005      	b.n	800a8c8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800a8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a8d4:	b004      	add	sp, #16
 800a8d6:	4770      	bx	lr

0800a8d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	f023 0201 	bic.w	r2, r3, #1
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	370c      	adds	r7, #12
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr

0800a8fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b084      	sub	sp, #16
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	460b      	mov	r3, r1
 800a904:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a906:	2300      	movs	r3, #0
 800a908:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a916:	78fb      	ldrb	r3, [r7, #3]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d115      	bne.n	800a948 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a928:	2001      	movs	r0, #1
 800a92a:	f7f7 fa23 	bl	8001d74 <HAL_Delay>
      ms++;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	3301      	adds	r3, #1
 800a932:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 f8fc 	bl	800ab32 <USB_GetMode>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d01e      	beq.n	800a97e <USB_SetCurrentMode+0x84>
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2b31      	cmp	r3, #49	; 0x31
 800a944:	d9f0      	bls.n	800a928 <USB_SetCurrentMode+0x2e>
 800a946:	e01a      	b.n	800a97e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a948:	78fb      	ldrb	r3, [r7, #3]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d115      	bne.n	800a97a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a95a:	2001      	movs	r0, #1
 800a95c:	f7f7 fa0a 	bl	8001d74 <HAL_Delay>
      ms++;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	3301      	adds	r3, #1
 800a964:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f8e3 	bl	800ab32 <USB_GetMode>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d005      	beq.n	800a97e <USB_SetCurrentMode+0x84>
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2b31      	cmp	r3, #49	; 0x31
 800a976:	d9f0      	bls.n	800a95a <USB_SetCurrentMode+0x60>
 800a978:	e001      	b.n	800a97e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a97a:	2301      	movs	r3, #1
 800a97c:	e005      	b.n	800a98a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2b32      	cmp	r3, #50	; 0x32
 800a982:	d101      	bne.n	800a988 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	e000      	b.n	800a98a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
	...

0800a994 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	4a13      	ldr	r2, [pc, #76]	; (800a9f8 <USB_FlushTxFifo+0x64>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d901      	bls.n	800a9b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a9b0:	2303      	movs	r3, #3
 800a9b2:	e01b      	b.n	800a9ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	691b      	ldr	r3, [r3, #16]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	daf2      	bge.n	800a9a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	019b      	lsls	r3, r3, #6
 800a9c4:	f043 0220 	orr.w	r2, r3, #32
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	4a08      	ldr	r2, [pc, #32]	; (800a9f8 <USB_FlushTxFifo+0x64>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d901      	bls.n	800a9de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a9da:	2303      	movs	r3, #3
 800a9dc:	e006      	b.n	800a9ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	f003 0320 	and.w	r3, r3, #32
 800a9e6:	2b20      	cmp	r3, #32
 800a9e8:	d0f0      	beq.n	800a9cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a9ea:	2300      	movs	r3, #0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3714      	adds	r7, #20
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr
 800a9f8:	00030d40 	.word	0x00030d40

0800a9fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b085      	sub	sp, #20
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa04:	2300      	movs	r3, #0
 800aa06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	4a11      	ldr	r2, [pc, #68]	; (800aa58 <USB_FlushRxFifo+0x5c>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d901      	bls.n	800aa1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800aa16:	2303      	movs	r3, #3
 800aa18:	e018      	b.n	800aa4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	691b      	ldr	r3, [r3, #16]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	daf2      	bge.n	800aa08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800aa22:	2300      	movs	r3, #0
 800aa24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2210      	movs	r2, #16
 800aa2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	4a08      	ldr	r2, [pc, #32]	; (800aa58 <USB_FlushRxFifo+0x5c>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d901      	bls.n	800aa3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e006      	b.n	800aa4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	f003 0310 	and.w	r3, r3, #16
 800aa46:	2b10      	cmp	r3, #16
 800aa48:	d0f0      	beq.n	800aa2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3714      	adds	r7, #20
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr
 800aa58:	00030d40 	.word	0x00030d40

0800aa5c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b08b      	sub	sp, #44	; 0x2c
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	4613      	mov	r3, r2
 800aa68:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800aa72:	88fb      	ldrh	r3, [r7, #6]
 800aa74:	089b      	lsrs	r3, r3, #2
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800aa7a:	88fb      	ldrh	r3, [r7, #6]
 800aa7c:	f003 0303 	and.w	r3, r3, #3
 800aa80:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800aa82:	2300      	movs	r3, #0
 800aa84:	623b      	str	r3, [r7, #32]
 800aa86:	e014      	b.n	800aab2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aa88:	69bb      	ldr	r3, [r7, #24]
 800aa8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa92:	601a      	str	r2, [r3, #0]
    pDest++;
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa96:	3301      	adds	r3, #1
 800aa98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aa9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800aaac:	6a3b      	ldr	r3, [r7, #32]
 800aaae:	3301      	adds	r3, #1
 800aab0:	623b      	str	r3, [r7, #32]
 800aab2:	6a3a      	ldr	r2, [r7, #32]
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d3e6      	bcc.n	800aa88 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aaba:	8bfb      	ldrh	r3, [r7, #30]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d01e      	beq.n	800aafe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aac0:	2300      	movs	r3, #0
 800aac2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaca:	461a      	mov	r2, r3
 800aacc:	f107 0310 	add.w	r3, r7, #16
 800aad0:	6812      	ldr	r2, [r2, #0]
 800aad2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aad4:	693a      	ldr	r2, [r7, #16]
 800aad6:	6a3b      	ldr	r3, [r7, #32]
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	00db      	lsls	r3, r3, #3
 800aadc:	fa22 f303 	lsr.w	r3, r2, r3
 800aae0:	b2da      	uxtb	r2, r3
 800aae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae4:	701a      	strb	r2, [r3, #0]
      i++;
 800aae6:	6a3b      	ldr	r3, [r7, #32]
 800aae8:	3301      	adds	r3, #1
 800aaea:	623b      	str	r3, [r7, #32]
      pDest++;
 800aaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaee:	3301      	adds	r3, #1
 800aaf0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800aaf2:	8bfb      	ldrh	r3, [r7, #30]
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aaf8:	8bfb      	ldrh	r3, [r7, #30]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d1ea      	bne.n	800aad4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	372c      	adds	r7, #44	; 0x2c
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	695b      	ldr	r3, [r3, #20]
 800ab18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	699b      	ldr	r3, [r3, #24]
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	4013      	ands	r3, r2
 800ab22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ab24:	68fb      	ldr	r3, [r7, #12]
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3714      	adds	r7, #20
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr

0800ab32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ab32:	b480      	push	{r7}
 800ab34:	b083      	sub	sp, #12
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	695b      	ldr	r3, [r3, #20]
 800ab3e:	f003 0301 	and.w	r3, r3, #1
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	370c      	adds	r7, #12
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
	...

0800ab50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	4a13      	ldr	r2, [pc, #76]	; (800abb4 <USB_CoreReset+0x64>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d901      	bls.n	800ab6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab6a:	2303      	movs	r3, #3
 800ab6c:	e01b      	b.n	800aba6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	daf2      	bge.n	800ab5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab76:	2300      	movs	r3, #0
 800ab78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	f043 0201 	orr.w	r2, r3, #1
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	4a09      	ldr	r2, [pc, #36]	; (800abb4 <USB_CoreReset+0x64>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d901      	bls.n	800ab98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab94:	2303      	movs	r3, #3
 800ab96:	e006      	b.n	800aba6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	f003 0301 	and.w	r3, r3, #1
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d0f0      	beq.n	800ab86 <USB_CoreReset+0x36>

  return HAL_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3714      	adds	r7, #20
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	00030d40 	.word	0x00030d40

0800abb8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800abb8:	b084      	sub	sp, #16
 800abba:	b580      	push	{r7, lr}
 800abbc:	b086      	sub	sp, #24
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
 800abc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800abc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800abca:	2300      	movs	r3, #0
 800abcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800abd8:	461a      	mov	r2, r3
 800abda:	2300      	movs	r3, #0
 800abdc:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac04:	f023 0304 	bic.w	r3, r3, #4
 800ac08:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ac0a:	2110      	movs	r1, #16
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f7ff fec1 	bl	800a994 <USB_FlushTxFifo>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d001      	beq.n	800ac1c <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f7ff feed 	bl	800a9fc <USB_FlushRxFifo>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d001      	beq.n	800ac2c <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	613b      	str	r3, [r7, #16]
 800ac30:	e015      	b.n	800ac5e <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	015a      	lsls	r2, r3, #5
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	4413      	add	r3, r2
 800ac3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac3e:	461a      	mov	r2, r3
 800ac40:	f04f 33ff 	mov.w	r3, #4294967295
 800ac44:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	015a      	lsls	r2, r3, #5
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac52:	461a      	mov	r2, r3
 800ac54:	2300      	movs	r3, #0
 800ac56:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	613b      	str	r3, [r7, #16]
 800ac5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac60:	693a      	ldr	r2, [r7, #16]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d3e5      	bcc.n	800ac32 <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac72:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2280      	movs	r2, #128	; 0x80
 800ac78:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	4a0c      	ldr	r2, [pc, #48]	; (800acb0 <USB_HostInit+0xf8>)
 800ac7e:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4a0c      	ldr	r2, [pc, #48]	; (800acb4 <USB_HostInit+0xfc>)
 800ac84:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	699b      	ldr	r3, [r3, #24]
 800ac8c:	f043 0210 	orr.w	r2, r3, #16
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	699a      	ldr	r2, [r3, #24]
 800ac98:	4b07      	ldr	r3, [pc, #28]	; (800acb8 <USB_HostInit+0x100>)
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800aca0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3718      	adds	r7, #24
 800aca6:	46bd      	mov	sp, r7
 800aca8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800acac:	b004      	add	sp, #16
 800acae:	4770      	bx	lr
 800acb0:	00600080 	.word	0x00600080
 800acb4:	004000e0 	.word	0x004000e0
 800acb8:	a3200008 	.word	0xa3200008

0800acbc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	460b      	mov	r3, r1
 800acc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800acda:	f023 0303 	bic.w	r3, r3, #3
 800acde:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	78fb      	ldrb	r3, [r7, #3]
 800acea:	f003 0303 	and.w	r3, r3, #3
 800acee:	68f9      	ldr	r1, [r7, #12]
 800acf0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800acf4:	4313      	orrs	r3, r2
 800acf6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800acf8:	78fb      	ldrb	r3, [r7, #3]
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d107      	bne.n	800ad0e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad04:	461a      	mov	r2, r3
 800ad06:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ad0a:	6053      	str	r3, [r2, #4]
 800ad0c:	e009      	b.n	800ad22 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ad0e:	78fb      	ldrb	r3, [r7, #3]
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	d106      	bne.n	800ad22 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	f241 7370 	movw	r3, #6000	; 0x1770
 800ad20:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ad22:	2300      	movs	r3, #0
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3714      	adds	r7, #20
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b085      	sub	sp, #20
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad42:	695b      	ldr	r3, [r3, #20]
 800ad44:	b29b      	uxth	r3, r3
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3714      	adds	r7, #20
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr

0800ad52 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ad52:	b480      	push	{r7}
 800ad54:	b089      	sub	sp, #36	; 0x24
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800ad62:	78fb      	ldrb	r3, [r7, #3]
 800ad64:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800ad66:	2300      	movs	r3, #0
 800ad68:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ad6a:	69bb      	ldr	r3, [r7, #24]
 800ad6c:	015a      	lsls	r2, r3, #5
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	4413      	add	r3, r2
 800ad72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	0c9b      	lsrs	r3, r3, #18
 800ad7a:	f003 0303 	and.w	r3, r3, #3
 800ad7e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	015a      	lsls	r2, r3, #5
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	4413      	add	r3, r2
 800ad88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	0fdb      	lsrs	r3, r3, #31
 800ad90:	f003 0301 	and.w	r3, r3, #1
 800ad94:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	f003 0320 	and.w	r3, r3, #32
 800ad9e:	2b20      	cmp	r3, #32
 800ada0:	d104      	bne.n	800adac <USB_HC_Halt+0x5a>
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d101      	bne.n	800adac <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800ada8:	2300      	movs	r3, #0
 800adaa:	e0c8      	b.n	800af3e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d002      	beq.n	800adb8 <USB_HC_Halt+0x66>
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	d163      	bne.n	800ae80 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	015a      	lsls	r2, r3, #5
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	4413      	add	r3, r2
 800adc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	69ba      	ldr	r2, [r7, #24]
 800adc8:	0151      	lsls	r1, r2, #5
 800adca:	69fa      	ldr	r2, [r7, #28]
 800adcc:	440a      	add	r2, r1
 800adce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800add2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800add6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	f003 0320 	and.w	r3, r3, #32
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f040 80ab 	bne.w	800af3c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d133      	bne.n	800ae5a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	015a      	lsls	r2, r3, #5
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	4413      	add	r3, r2
 800adfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	69ba      	ldr	r2, [r7, #24]
 800ae02:	0151      	lsls	r1, r2, #5
 800ae04:	69fa      	ldr	r2, [r7, #28]
 800ae06:	440a      	add	r2, r1
 800ae08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae10:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	015a      	lsls	r2, r3, #5
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	4413      	add	r3, r2
 800ae1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	69ba      	ldr	r2, [r7, #24]
 800ae22:	0151      	lsls	r1, r2, #5
 800ae24:	69fa      	ldr	r2, [r7, #28]
 800ae26:	440a      	add	r2, r1
 800ae28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae30:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	3301      	adds	r3, #1
 800ae36:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae3e:	d81d      	bhi.n	800ae7c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	015a      	lsls	r2, r3, #5
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	4413      	add	r3, r2
 800ae48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae56:	d0ec      	beq.n	800ae32 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae58:	e070      	b.n	800af3c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	015a      	lsls	r2, r3, #5
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	4413      	add	r3, r2
 800ae62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	69ba      	ldr	r2, [r7, #24]
 800ae6a:	0151      	lsls	r1, r2, #5
 800ae6c:	69fa      	ldr	r2, [r7, #28]
 800ae6e:	440a      	add	r2, r1
 800ae70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae78:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae7a:	e05f      	b.n	800af3c <USB_HC_Halt+0x1ea>
            break;
 800ae7c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae7e:	e05d      	b.n	800af3c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ae80:	69bb      	ldr	r3, [r7, #24]
 800ae82:	015a      	lsls	r2, r3, #5
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	4413      	add	r3, r2
 800ae88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	69ba      	ldr	r2, [r7, #24]
 800ae90:	0151      	lsls	r1, r2, #5
 800ae92:	69fa      	ldr	r2, [r7, #28]
 800ae94:	440a      	add	r2, r1
 800ae96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae9e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d133      	bne.n	800af18 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800aeb0:	69bb      	ldr	r3, [r7, #24]
 800aeb2:	015a      	lsls	r2, r3, #5
 800aeb4:	69fb      	ldr	r3, [r7, #28]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	69ba      	ldr	r2, [r7, #24]
 800aec0:	0151      	lsls	r1, r2, #5
 800aec2:	69fa      	ldr	r2, [r7, #28]
 800aec4:	440a      	add	r2, r1
 800aec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aeca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aece:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	015a      	lsls	r2, r3, #5
 800aed4:	69fb      	ldr	r3, [r7, #28]
 800aed6:	4413      	add	r3, r2
 800aed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	69ba      	ldr	r2, [r7, #24]
 800aee0:	0151      	lsls	r1, r2, #5
 800aee2:	69fa      	ldr	r2, [r7, #28]
 800aee4:	440a      	add	r2, r1
 800aee6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aeea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aeee:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	3301      	adds	r3, #1
 800aef4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aefc:	d81d      	bhi.n	800af3a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	015a      	lsls	r2, r3, #5
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	4413      	add	r3, r2
 800af06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af14:	d0ec      	beq.n	800aef0 <USB_HC_Halt+0x19e>
 800af16:	e011      	b.n	800af3c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	015a      	lsls	r2, r3, #5
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	4413      	add	r3, r2
 800af20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	69ba      	ldr	r2, [r7, #24]
 800af28:	0151      	lsls	r1, r2, #5
 800af2a:	69fa      	ldr	r2, [r7, #28]
 800af2c:	440a      	add	r2, r1
 800af2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af36:	6013      	str	r3, [r2, #0]
 800af38:	e000      	b.n	800af3c <USB_HC_Halt+0x1ea>
          break;
 800af3a:	bf00      	nop
    }
  }

  return HAL_OK;
 800af3c:	2300      	movs	r3, #0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3724      	adds	r7, #36	; 0x24
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr
	...

0800af4c <__NVIC_SetPriority>:
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	4603      	mov	r3, r0
 800af54:	6039      	str	r1, [r7, #0]
 800af56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	db0a      	blt.n	800af76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	b2da      	uxtb	r2, r3
 800af64:	490c      	ldr	r1, [pc, #48]	; (800af98 <__NVIC_SetPriority+0x4c>)
 800af66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af6a:	0112      	lsls	r2, r2, #4
 800af6c:	b2d2      	uxtb	r2, r2
 800af6e:	440b      	add	r3, r1
 800af70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800af74:	e00a      	b.n	800af8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	b2da      	uxtb	r2, r3
 800af7a:	4908      	ldr	r1, [pc, #32]	; (800af9c <__NVIC_SetPriority+0x50>)
 800af7c:	79fb      	ldrb	r3, [r7, #7]
 800af7e:	f003 030f 	and.w	r3, r3, #15
 800af82:	3b04      	subs	r3, #4
 800af84:	0112      	lsls	r2, r2, #4
 800af86:	b2d2      	uxtb	r2, r2
 800af88:	440b      	add	r3, r1
 800af8a:	761a      	strb	r2, [r3, #24]
}
 800af8c:	bf00      	nop
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr
 800af98:	e000e100 	.word	0xe000e100
 800af9c:	e000ed00 	.word	0xe000ed00

0800afa0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800afa0:	b580      	push	{r7, lr}
 800afa2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800afa4:	4b05      	ldr	r3, [pc, #20]	; (800afbc <SysTick_Handler+0x1c>)
 800afa6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800afa8:	f001 fcfe 	bl	800c9a8 <xTaskGetSchedulerState>
 800afac:	4603      	mov	r3, r0
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d001      	beq.n	800afb6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800afb2:	f002 fae9 	bl	800d588 <xPortSysTickHandler>
  }
}
 800afb6:	bf00      	nop
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	e000e010 	.word	0xe000e010

0800afc0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800afc0:	b580      	push	{r7, lr}
 800afc2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800afc4:	2100      	movs	r1, #0
 800afc6:	f06f 0004 	mvn.w	r0, #4
 800afca:	f7ff ffbf 	bl	800af4c <__NVIC_SetPriority>
#endif
}
 800afce:	bf00      	nop
 800afd0:	bd80      	pop	{r7, pc}
	...

0800afd4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afda:	f3ef 8305 	mrs	r3, IPSR
 800afde:	603b      	str	r3, [r7, #0]
  return(result);
 800afe0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d003      	beq.n	800afee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800afe6:	f06f 0305 	mvn.w	r3, #5
 800afea:	607b      	str	r3, [r7, #4]
 800afec:	e00c      	b.n	800b008 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800afee:	4b0a      	ldr	r3, [pc, #40]	; (800b018 <osKernelInitialize+0x44>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d105      	bne.n	800b002 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800aff6:	4b08      	ldr	r3, [pc, #32]	; (800b018 <osKernelInitialize+0x44>)
 800aff8:	2201      	movs	r2, #1
 800affa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800affc:	2300      	movs	r3, #0
 800affe:	607b      	str	r3, [r7, #4]
 800b000:	e002      	b.n	800b008 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b002:	f04f 33ff 	mov.w	r3, #4294967295
 800b006:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b008:	687b      	ldr	r3, [r7, #4]
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	370c      	adds	r7, #12
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	20000900 	.word	0x20000900

0800b01c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b022:	f3ef 8305 	mrs	r3, IPSR
 800b026:	603b      	str	r3, [r7, #0]
  return(result);
 800b028:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d003      	beq.n	800b036 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b02e:	f06f 0305 	mvn.w	r3, #5
 800b032:	607b      	str	r3, [r7, #4]
 800b034:	e010      	b.n	800b058 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b036:	4b0b      	ldr	r3, [pc, #44]	; (800b064 <osKernelStart+0x48>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d109      	bne.n	800b052 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b03e:	f7ff ffbf 	bl	800afc0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b042:	4b08      	ldr	r3, [pc, #32]	; (800b064 <osKernelStart+0x48>)
 800b044:	2202      	movs	r2, #2
 800b046:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b048:	f001 f866 	bl	800c118 <vTaskStartScheduler>
      stat = osOK;
 800b04c:	2300      	movs	r3, #0
 800b04e:	607b      	str	r3, [r7, #4]
 800b050:	e002      	b.n	800b058 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b052:	f04f 33ff 	mov.w	r3, #4294967295
 800b056:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b058:	687b      	ldr	r3, [r7, #4]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3708      	adds	r7, #8
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	20000900 	.word	0x20000900

0800b068 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b068:	b580      	push	{r7, lr}
 800b06a:	b08e      	sub	sp, #56	; 0x38
 800b06c:	af04      	add	r7, sp, #16
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b074:	2300      	movs	r3, #0
 800b076:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b078:	f3ef 8305 	mrs	r3, IPSR
 800b07c:	617b      	str	r3, [r7, #20]
  return(result);
 800b07e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b080:	2b00      	cmp	r3, #0
 800b082:	d17e      	bne.n	800b182 <osThreadNew+0x11a>
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d07b      	beq.n	800b182 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b08a:	2380      	movs	r3, #128	; 0x80
 800b08c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b08e:	2318      	movs	r3, #24
 800b090:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b092:	2300      	movs	r3, #0
 800b094:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b096:	f04f 33ff 	mov.w	r3, #4294967295
 800b09a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d045      	beq.n	800b12e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d002      	beq.n	800b0b0 <osThreadNew+0x48>
        name = attr->name;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	699b      	ldr	r3, [r3, #24]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d002      	beq.n	800b0be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	699b      	ldr	r3, [r3, #24]
 800b0bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d008      	beq.n	800b0d6 <osThreadNew+0x6e>
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	2b38      	cmp	r3, #56	; 0x38
 800b0c8:	d805      	bhi.n	800b0d6 <osThreadNew+0x6e>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	f003 0301 	and.w	r3, r3, #1
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d001      	beq.n	800b0da <osThreadNew+0x72>
        return (NULL);
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	e054      	b.n	800b184 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	695b      	ldr	r3, [r3, #20]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d003      	beq.n	800b0ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	695b      	ldr	r3, [r3, #20]
 800b0e6:	089b      	lsrs	r3, r3, #2
 800b0e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00e      	beq.n	800b110 <osThreadNew+0xa8>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	2b5b      	cmp	r3, #91	; 0x5b
 800b0f8:	d90a      	bls.n	800b110 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d006      	beq.n	800b110 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	695b      	ldr	r3, [r3, #20]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d002      	beq.n	800b110 <osThreadNew+0xa8>
        mem = 1;
 800b10a:	2301      	movs	r3, #1
 800b10c:	61bb      	str	r3, [r7, #24]
 800b10e:	e010      	b.n	800b132 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d10c      	bne.n	800b132 <osThreadNew+0xca>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d108      	bne.n	800b132 <osThreadNew+0xca>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	691b      	ldr	r3, [r3, #16]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d104      	bne.n	800b132 <osThreadNew+0xca>
          mem = 0;
 800b128:	2300      	movs	r3, #0
 800b12a:	61bb      	str	r3, [r7, #24]
 800b12c:	e001      	b.n	800b132 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b12e:	2300      	movs	r3, #0
 800b130:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	2b01      	cmp	r3, #1
 800b136:	d110      	bne.n	800b15a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b140:	9202      	str	r2, [sp, #8]
 800b142:	9301      	str	r3, [sp, #4]
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	9300      	str	r3, [sp, #0]
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	6a3a      	ldr	r2, [r7, #32]
 800b14c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b14e:	68f8      	ldr	r0, [r7, #12]
 800b150:	f000 fe0c 	bl	800bd6c <xTaskCreateStatic>
 800b154:	4603      	mov	r3, r0
 800b156:	613b      	str	r3, [r7, #16]
 800b158:	e013      	b.n	800b182 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d110      	bne.n	800b182 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b160:	6a3b      	ldr	r3, [r7, #32]
 800b162:	b29a      	uxth	r2, r3
 800b164:	f107 0310 	add.w	r3, r7, #16
 800b168:	9301      	str	r3, [sp, #4]
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	9300      	str	r3, [sp, #0]
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b172:	68f8      	ldr	r0, [r7, #12]
 800b174:	f000 fe57 	bl	800be26 <xTaskCreate>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d001      	beq.n	800b182 <osThreadNew+0x11a>
            hTask = NULL;
 800b17e:	2300      	movs	r3, #0
 800b180:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b182:	693b      	ldr	r3, [r7, #16]
}
 800b184:	4618      	mov	r0, r3
 800b186:	3728      	adds	r7, #40	; 0x28
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b194:	f3ef 8305 	mrs	r3, IPSR
 800b198:	60bb      	str	r3, [r7, #8]
  return(result);
 800b19a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d003      	beq.n	800b1a8 <osDelay+0x1c>
    stat = osErrorISR;
 800b1a0:	f06f 0305 	mvn.w	r3, #5
 800b1a4:	60fb      	str	r3, [r7, #12]
 800b1a6:	e007      	b.n	800b1b8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d002      	beq.n	800b1b8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 ff7c 	bl	800c0b0 <vTaskDelay>
    }
  }

  return (stat);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
	...

0800b1c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	60b9      	str	r1, [r7, #8]
 800b1ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	4a07      	ldr	r2, [pc, #28]	; (800b1f0 <vApplicationGetIdleTaskMemory+0x2c>)
 800b1d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	4a06      	ldr	r2, [pc, #24]	; (800b1f4 <vApplicationGetIdleTaskMemory+0x30>)
 800b1da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2280      	movs	r2, #128	; 0x80
 800b1e0:	601a      	str	r2, [r3, #0]
}
 800b1e2:	bf00      	nop
 800b1e4:	3714      	adds	r7, #20
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop
 800b1f0:	20000904 	.word	0x20000904
 800b1f4:	20000960 	.word	0x20000960

0800b1f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b1f8:	b480      	push	{r7}
 800b1fa:	b085      	sub	sp, #20
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	60b9      	str	r1, [r7, #8]
 800b202:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	4a07      	ldr	r2, [pc, #28]	; (800b224 <vApplicationGetTimerTaskMemory+0x2c>)
 800b208:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	4a06      	ldr	r2, [pc, #24]	; (800b228 <vApplicationGetTimerTaskMemory+0x30>)
 800b20e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b216:	601a      	str	r2, [r3, #0]
}
 800b218:	bf00      	nop
 800b21a:	3714      	adds	r7, #20
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr
 800b224:	20000b60 	.word	0x20000b60
 800b228:	20000bbc 	.word	0x20000bbc

0800b22c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f103 0208 	add.w	r2, r3, #8
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f04f 32ff 	mov.w	r2, #4294967295
 800b244:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f103 0208 	add.w	r2, r3, #8
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f103 0208 	add.w	r2, r3, #8
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b260:	bf00      	nop
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b27a:	bf00      	nop
 800b27c:	370c      	adds	r7, #12
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr

0800b286 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b286:	b480      	push	{r7}
 800b288:	b085      	sub	sp, #20
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	689a      	ldr	r2, [r3, #8]
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	683a      	ldr	r2, [r7, #0]
 800b2aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	683a      	ldr	r2, [r7, #0]
 800b2b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	1c5a      	adds	r2, r3, #1
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	601a      	str	r2, [r3, #0]
}
 800b2c2:	bf00      	nop
 800b2c4:	3714      	adds	r7, #20
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr

0800b2ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b2ce:	b480      	push	{r7}
 800b2d0:	b085      	sub	sp, #20
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
 800b2d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e4:	d103      	bne.n	800b2ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	691b      	ldr	r3, [r3, #16]
 800b2ea:	60fb      	str	r3, [r7, #12]
 800b2ec:	e00c      	b.n	800b308 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	3308      	adds	r3, #8
 800b2f2:	60fb      	str	r3, [r7, #12]
 800b2f4:	e002      	b.n	800b2fc <vListInsert+0x2e>
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	60fb      	str	r3, [r7, #12]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	68ba      	ldr	r2, [r7, #8]
 800b304:	429a      	cmp	r2, r3
 800b306:	d2f6      	bcs.n	800b2f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	685a      	ldr	r2, [r3, #4]
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	683a      	ldr	r2, [r7, #0]
 800b316:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	68fa      	ldr	r2, [r7, #12]
 800b31c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	683a      	ldr	r2, [r7, #0]
 800b322:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	1c5a      	adds	r2, r3, #1
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	601a      	str	r2, [r3, #0]
}
 800b334:	bf00      	nop
 800b336:	3714      	adds	r7, #20
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	691b      	ldr	r3, [r3, #16]
 800b34c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	6892      	ldr	r2, [r2, #8]
 800b356:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	6852      	ldr	r2, [r2, #4]
 800b360:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d103      	bne.n	800b374 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	689a      	ldr	r2, [r3, #8]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	1e5a      	subs	r2, r3, #1
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3714      	adds	r7, #20
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d10a      	bne.n	800b3be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ac:	f383 8811 	msr	BASEPRI, r3
 800b3b0:	f3bf 8f6f 	isb	sy
 800b3b4:	f3bf 8f4f 	dsb	sy
 800b3b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b3ba:	bf00      	nop
 800b3bc:	e7fe      	b.n	800b3bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b3be:	f002 f851 	bl	800d464 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ca:	68f9      	ldr	r1, [r7, #12]
 800b3cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3ce:	fb01 f303 	mul.w	r3, r1, r3
 800b3d2:	441a      	add	r2, r3
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ee:	3b01      	subs	r3, #1
 800b3f0:	68f9      	ldr	r1, [r7, #12]
 800b3f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3f4:	fb01 f303 	mul.w	r3, r1, r3
 800b3f8:	441a      	add	r2, r3
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	22ff      	movs	r2, #255	; 0xff
 800b402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	22ff      	movs	r2, #255	; 0xff
 800b40a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d114      	bne.n	800b43e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	691b      	ldr	r3, [r3, #16]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d01a      	beq.n	800b452 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	3310      	adds	r3, #16
 800b420:	4618      	mov	r0, r3
 800b422:	f001 f903 	bl	800c62c <xTaskRemoveFromEventList>
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d012      	beq.n	800b452 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b42c:	4b0c      	ldr	r3, [pc, #48]	; (800b460 <xQueueGenericReset+0xcc>)
 800b42e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b432:	601a      	str	r2, [r3, #0]
 800b434:	f3bf 8f4f 	dsb	sy
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	e009      	b.n	800b452 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	3310      	adds	r3, #16
 800b442:	4618      	mov	r0, r3
 800b444:	f7ff fef2 	bl	800b22c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3324      	adds	r3, #36	; 0x24
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7ff feed 	bl	800b22c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b452:	f002 f837 	bl	800d4c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b456:	2301      	movs	r3, #1
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3710      	adds	r7, #16
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	e000ed04 	.word	0xe000ed04

0800b464 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b464:	b580      	push	{r7, lr}
 800b466:	b08e      	sub	sp, #56	; 0x38
 800b468:	af02      	add	r7, sp, #8
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]
 800b470:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10a      	bne.n	800b48e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47c:	f383 8811 	msr	BASEPRI, r3
 800b480:	f3bf 8f6f 	isb	sy
 800b484:	f3bf 8f4f 	dsb	sy
 800b488:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b48a:	bf00      	nop
 800b48c:	e7fe      	b.n	800b48c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d10a      	bne.n	800b4aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b498:	f383 8811 	msr	BASEPRI, r3
 800b49c:	f3bf 8f6f 	isb	sy
 800b4a0:	f3bf 8f4f 	dsb	sy
 800b4a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4a6:	bf00      	nop
 800b4a8:	e7fe      	b.n	800b4a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d002      	beq.n	800b4b6 <xQueueGenericCreateStatic+0x52>
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d001      	beq.n	800b4ba <xQueueGenericCreateStatic+0x56>
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	e000      	b.n	800b4bc <xQueueGenericCreateStatic+0x58>
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d10a      	bne.n	800b4d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c4:	f383 8811 	msr	BASEPRI, r3
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	623b      	str	r3, [r7, #32]
}
 800b4d2:	bf00      	nop
 800b4d4:	e7fe      	b.n	800b4d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d102      	bne.n	800b4e2 <xQueueGenericCreateStatic+0x7e>
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d101      	bne.n	800b4e6 <xQueueGenericCreateStatic+0x82>
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e000      	b.n	800b4e8 <xQueueGenericCreateStatic+0x84>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d10a      	bne.n	800b502 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f0:	f383 8811 	msr	BASEPRI, r3
 800b4f4:	f3bf 8f6f 	isb	sy
 800b4f8:	f3bf 8f4f 	dsb	sy
 800b4fc:	61fb      	str	r3, [r7, #28]
}
 800b4fe:	bf00      	nop
 800b500:	e7fe      	b.n	800b500 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b502:	2350      	movs	r3, #80	; 0x50
 800b504:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	2b50      	cmp	r3, #80	; 0x50
 800b50a:	d00a      	beq.n	800b522 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b510:	f383 8811 	msr	BASEPRI, r3
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	61bb      	str	r3, [r7, #24]
}
 800b51e:	bf00      	nop
 800b520:	e7fe      	b.n	800b520 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b522:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00d      	beq.n	800b54a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b530:	2201      	movs	r2, #1
 800b532:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b536:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b53c:	9300      	str	r3, [sp, #0]
 800b53e:	4613      	mov	r3, r2
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	68b9      	ldr	r1, [r7, #8]
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f000 f805 	bl	800b554 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3730      	adds	r7, #48	; 0x30
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	607a      	str	r2, [r7, #4]
 800b560:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d103      	bne.n	800b570 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	69ba      	ldr	r2, [r7, #24]
 800b56c:	601a      	str	r2, [r3, #0]
 800b56e:	e002      	b.n	800b576 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b570:	69bb      	ldr	r3, [r7, #24]
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b582:	2101      	movs	r1, #1
 800b584:	69b8      	ldr	r0, [r7, #24]
 800b586:	f7ff ff05 	bl	800b394 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	78fa      	ldrb	r2, [r7, #3]
 800b58e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b592:	bf00      	nop
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
	...

0800b59c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b08e      	sub	sp, #56	; 0x38
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	607a      	str	r2, [r7, #4]
 800b5a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10a      	bne.n	800b5ce <xQueueGenericSend+0x32>
	__asm volatile
 800b5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5bc:	f383 8811 	msr	BASEPRI, r3
 800b5c0:	f3bf 8f6f 	isb	sy
 800b5c4:	f3bf 8f4f 	dsb	sy
 800b5c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b5ca:	bf00      	nop
 800b5cc:	e7fe      	b.n	800b5cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d103      	bne.n	800b5dc <xQueueGenericSend+0x40>
 800b5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d101      	bne.n	800b5e0 <xQueueGenericSend+0x44>
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e000      	b.n	800b5e2 <xQueueGenericSend+0x46>
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d10a      	bne.n	800b5fc <xQueueGenericSend+0x60>
	__asm volatile
 800b5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ea:	f383 8811 	msr	BASEPRI, r3
 800b5ee:	f3bf 8f6f 	isb	sy
 800b5f2:	f3bf 8f4f 	dsb	sy
 800b5f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b5f8:	bf00      	nop
 800b5fa:	e7fe      	b.n	800b5fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	2b02      	cmp	r3, #2
 800b600:	d103      	bne.n	800b60a <xQueueGenericSend+0x6e>
 800b602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b606:	2b01      	cmp	r3, #1
 800b608:	d101      	bne.n	800b60e <xQueueGenericSend+0x72>
 800b60a:	2301      	movs	r3, #1
 800b60c:	e000      	b.n	800b610 <xQueueGenericSend+0x74>
 800b60e:	2300      	movs	r3, #0
 800b610:	2b00      	cmp	r3, #0
 800b612:	d10a      	bne.n	800b62a <xQueueGenericSend+0x8e>
	__asm volatile
 800b614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b618:	f383 8811 	msr	BASEPRI, r3
 800b61c:	f3bf 8f6f 	isb	sy
 800b620:	f3bf 8f4f 	dsb	sy
 800b624:	623b      	str	r3, [r7, #32]
}
 800b626:	bf00      	nop
 800b628:	e7fe      	b.n	800b628 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b62a:	f001 f9bd 	bl	800c9a8 <xTaskGetSchedulerState>
 800b62e:	4603      	mov	r3, r0
 800b630:	2b00      	cmp	r3, #0
 800b632:	d102      	bne.n	800b63a <xQueueGenericSend+0x9e>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d101      	bne.n	800b63e <xQueueGenericSend+0xa2>
 800b63a:	2301      	movs	r3, #1
 800b63c:	e000      	b.n	800b640 <xQueueGenericSend+0xa4>
 800b63e:	2300      	movs	r3, #0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d10a      	bne.n	800b65a <xQueueGenericSend+0xbe>
	__asm volatile
 800b644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b648:	f383 8811 	msr	BASEPRI, r3
 800b64c:	f3bf 8f6f 	isb	sy
 800b650:	f3bf 8f4f 	dsb	sy
 800b654:	61fb      	str	r3, [r7, #28]
}
 800b656:	bf00      	nop
 800b658:	e7fe      	b.n	800b658 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b65a:	f001 ff03 	bl	800d464 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b666:	429a      	cmp	r2, r3
 800b668:	d302      	bcc.n	800b670 <xQueueGenericSend+0xd4>
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	2b02      	cmp	r3, #2
 800b66e:	d129      	bne.n	800b6c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b670:	683a      	ldr	r2, [r7, #0]
 800b672:	68b9      	ldr	r1, [r7, #8]
 800b674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b676:	f000 fa0b 	bl	800ba90 <prvCopyDataToQueue>
 800b67a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b680:	2b00      	cmp	r3, #0
 800b682:	d010      	beq.n	800b6a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b686:	3324      	adds	r3, #36	; 0x24
 800b688:	4618      	mov	r0, r3
 800b68a:	f000 ffcf 	bl	800c62c <xTaskRemoveFromEventList>
 800b68e:	4603      	mov	r3, r0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d013      	beq.n	800b6bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b694:	4b3f      	ldr	r3, [pc, #252]	; (800b794 <xQueueGenericSend+0x1f8>)
 800b696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b69a:	601a      	str	r2, [r3, #0]
 800b69c:	f3bf 8f4f 	dsb	sy
 800b6a0:	f3bf 8f6f 	isb	sy
 800b6a4:	e00a      	b.n	800b6bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d007      	beq.n	800b6bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b6ac:	4b39      	ldr	r3, [pc, #228]	; (800b794 <xQueueGenericSend+0x1f8>)
 800b6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6b2:	601a      	str	r2, [r3, #0]
 800b6b4:	f3bf 8f4f 	dsb	sy
 800b6b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b6bc:	f001 ff02 	bl	800d4c4 <vPortExitCritical>
				return pdPASS;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	e063      	b.n	800b78c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d103      	bne.n	800b6d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6ca:	f001 fefb 	bl	800d4c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	e05c      	b.n	800b78c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d106      	bne.n	800b6e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6d8:	f107 0314 	add.w	r3, r7, #20
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f001 f809 	bl	800c6f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6e6:	f001 feed 	bl	800d4c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6ea:	f000 fd7b 	bl	800c1e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6ee:	f001 feb9 	bl	800d464 <vPortEnterCritical>
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6f8:	b25b      	sxtb	r3, r3
 800b6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6fe:	d103      	bne.n	800b708 <xQueueGenericSend+0x16c>
 800b700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b702:	2200      	movs	r2, #0
 800b704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b70e:	b25b      	sxtb	r3, r3
 800b710:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b714:	d103      	bne.n	800b71e <xQueueGenericSend+0x182>
 800b716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b718:	2200      	movs	r2, #0
 800b71a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b71e:	f001 fed1 	bl	800d4c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b722:	1d3a      	adds	r2, r7, #4
 800b724:	f107 0314 	add.w	r3, r7, #20
 800b728:	4611      	mov	r1, r2
 800b72a:	4618      	mov	r0, r3
 800b72c:	f000 fff8 	bl	800c720 <xTaskCheckForTimeOut>
 800b730:	4603      	mov	r3, r0
 800b732:	2b00      	cmp	r3, #0
 800b734:	d124      	bne.n	800b780 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b736:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b738:	f000 faa2 	bl	800bc80 <prvIsQueueFull>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d018      	beq.n	800b774 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b744:	3310      	adds	r3, #16
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	4611      	mov	r1, r2
 800b74a:	4618      	mov	r0, r3
 800b74c:	f000 ff1e 	bl	800c58c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b752:	f000 fa2d 	bl	800bbb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b756:	f000 fd53 	bl	800c200 <xTaskResumeAll>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f47f af7c 	bne.w	800b65a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b762:	4b0c      	ldr	r3, [pc, #48]	; (800b794 <xQueueGenericSend+0x1f8>)
 800b764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b768:	601a      	str	r2, [r3, #0]
 800b76a:	f3bf 8f4f 	dsb	sy
 800b76e:	f3bf 8f6f 	isb	sy
 800b772:	e772      	b.n	800b65a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b776:	f000 fa1b 	bl	800bbb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b77a:	f000 fd41 	bl	800c200 <xTaskResumeAll>
 800b77e:	e76c      	b.n	800b65a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b782:	f000 fa15 	bl	800bbb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b786:	f000 fd3b 	bl	800c200 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b78a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3738      	adds	r7, #56	; 0x38
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	e000ed04 	.word	0xe000ed04

0800b798 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b090      	sub	sp, #64	; 0x40
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	607a      	str	r2, [r7, #4]
 800b7a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d10a      	bne.n	800b7c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b4:	f383 8811 	msr	BASEPRI, r3
 800b7b8:	f3bf 8f6f 	isb	sy
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b7c2:	bf00      	nop
 800b7c4:	e7fe      	b.n	800b7c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d103      	bne.n	800b7d4 <xQueueGenericSendFromISR+0x3c>
 800b7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d101      	bne.n	800b7d8 <xQueueGenericSendFromISR+0x40>
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	e000      	b.n	800b7da <xQueueGenericSendFromISR+0x42>
 800b7d8:	2300      	movs	r3, #0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d10a      	bne.n	800b7f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e2:	f383 8811 	msr	BASEPRI, r3
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	f3bf 8f4f 	dsb	sy
 800b7ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b7f0:	bf00      	nop
 800b7f2:	e7fe      	b.n	800b7f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	2b02      	cmp	r3, #2
 800b7f8:	d103      	bne.n	800b802 <xQueueGenericSendFromISR+0x6a>
 800b7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d101      	bne.n	800b806 <xQueueGenericSendFromISR+0x6e>
 800b802:	2301      	movs	r3, #1
 800b804:	e000      	b.n	800b808 <xQueueGenericSendFromISR+0x70>
 800b806:	2300      	movs	r3, #0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d10a      	bne.n	800b822 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b810:	f383 8811 	msr	BASEPRI, r3
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	623b      	str	r3, [r7, #32]
}
 800b81e:	bf00      	nop
 800b820:	e7fe      	b.n	800b820 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b822:	f001 ff01 	bl	800d628 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b826:	f3ef 8211 	mrs	r2, BASEPRI
 800b82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82e:	f383 8811 	msr	BASEPRI, r3
 800b832:	f3bf 8f6f 	isb	sy
 800b836:	f3bf 8f4f 	dsb	sy
 800b83a:	61fa      	str	r2, [r7, #28]
 800b83c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b83e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b840:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d302      	bcc.n	800b854 <xQueueGenericSendFromISR+0xbc>
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	2b02      	cmp	r3, #2
 800b852:	d12f      	bne.n	800b8b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b856:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b85a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b862:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b864:	683a      	ldr	r2, [r7, #0]
 800b866:	68b9      	ldr	r1, [r7, #8]
 800b868:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b86a:	f000 f911 	bl	800ba90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b86e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b876:	d112      	bne.n	800b89e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d016      	beq.n	800b8ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b882:	3324      	adds	r3, #36	; 0x24
 800b884:	4618      	mov	r0, r3
 800b886:	f000 fed1 	bl	800c62c <xTaskRemoveFromEventList>
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00e      	beq.n	800b8ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d00b      	beq.n	800b8ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2201      	movs	r2, #1
 800b89a:	601a      	str	r2, [r3, #0]
 800b89c:	e007      	b.n	800b8ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b89e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	b25a      	sxtb	r2, r3
 800b8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b8b2:	e001      	b.n	800b8b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b8c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3740      	adds	r7, #64	; 0x40
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
	...

0800b8d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b08c      	sub	sp, #48	; 0x30
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d10a      	bne.n	800b900 <xQueueReceive+0x30>
	__asm volatile
 800b8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ee:	f383 8811 	msr	BASEPRI, r3
 800b8f2:	f3bf 8f6f 	isb	sy
 800b8f6:	f3bf 8f4f 	dsb	sy
 800b8fa:	623b      	str	r3, [r7, #32]
}
 800b8fc:	bf00      	nop
 800b8fe:	e7fe      	b.n	800b8fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d103      	bne.n	800b90e <xQueueReceive+0x3e>
 800b906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d101      	bne.n	800b912 <xQueueReceive+0x42>
 800b90e:	2301      	movs	r3, #1
 800b910:	e000      	b.n	800b914 <xQueueReceive+0x44>
 800b912:	2300      	movs	r3, #0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d10a      	bne.n	800b92e <xQueueReceive+0x5e>
	__asm volatile
 800b918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b91c:	f383 8811 	msr	BASEPRI, r3
 800b920:	f3bf 8f6f 	isb	sy
 800b924:	f3bf 8f4f 	dsb	sy
 800b928:	61fb      	str	r3, [r7, #28]
}
 800b92a:	bf00      	nop
 800b92c:	e7fe      	b.n	800b92c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b92e:	f001 f83b 	bl	800c9a8 <xTaskGetSchedulerState>
 800b932:	4603      	mov	r3, r0
 800b934:	2b00      	cmp	r3, #0
 800b936:	d102      	bne.n	800b93e <xQueueReceive+0x6e>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d101      	bne.n	800b942 <xQueueReceive+0x72>
 800b93e:	2301      	movs	r3, #1
 800b940:	e000      	b.n	800b944 <xQueueReceive+0x74>
 800b942:	2300      	movs	r3, #0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d10a      	bne.n	800b95e <xQueueReceive+0x8e>
	__asm volatile
 800b948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94c:	f383 8811 	msr	BASEPRI, r3
 800b950:	f3bf 8f6f 	isb	sy
 800b954:	f3bf 8f4f 	dsb	sy
 800b958:	61bb      	str	r3, [r7, #24]
}
 800b95a:	bf00      	nop
 800b95c:	e7fe      	b.n	800b95c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b95e:	f001 fd81 	bl	800d464 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b966:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d01f      	beq.n	800b9ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b96e:	68b9      	ldr	r1, [r7, #8]
 800b970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b972:	f000 f8f7 	bl	800bb64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b978:	1e5a      	subs	r2, r3, #1
 800b97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b980:	691b      	ldr	r3, [r3, #16]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00f      	beq.n	800b9a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b988:	3310      	adds	r3, #16
 800b98a:	4618      	mov	r0, r3
 800b98c:	f000 fe4e 	bl	800c62c <xTaskRemoveFromEventList>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d007      	beq.n	800b9a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b996:	4b3d      	ldr	r3, [pc, #244]	; (800ba8c <xQueueReceive+0x1bc>)
 800b998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b99c:	601a      	str	r2, [r3, #0]
 800b99e:	f3bf 8f4f 	dsb	sy
 800b9a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b9a6:	f001 fd8d 	bl	800d4c4 <vPortExitCritical>
				return pdPASS;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e069      	b.n	800ba82 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d103      	bne.n	800b9bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b9b4:	f001 fd86 	bl	800d4c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	e062      	b.n	800ba82 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d106      	bne.n	800b9d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b9c2:	f107 0310 	add.w	r3, r7, #16
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f000 fe94 	bl	800c6f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b9d0:	f001 fd78 	bl	800d4c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b9d4:	f000 fc06 	bl	800c1e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b9d8:	f001 fd44 	bl	800d464 <vPortEnterCritical>
 800b9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9e2:	b25b      	sxtb	r3, r3
 800b9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9e8:	d103      	bne.n	800b9f2 <xQueueReceive+0x122>
 800b9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9f8:	b25b      	sxtb	r3, r3
 800b9fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9fe:	d103      	bne.n	800ba08 <xQueueReceive+0x138>
 800ba00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba02:	2200      	movs	r2, #0
 800ba04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba08:	f001 fd5c 	bl	800d4c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba0c:	1d3a      	adds	r2, r7, #4
 800ba0e:	f107 0310 	add.w	r3, r7, #16
 800ba12:	4611      	mov	r1, r2
 800ba14:	4618      	mov	r0, r3
 800ba16:	f000 fe83 	bl	800c720 <xTaskCheckForTimeOut>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d123      	bne.n	800ba68 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba22:	f000 f917 	bl	800bc54 <prvIsQueueEmpty>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d017      	beq.n	800ba5c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ba2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2e:	3324      	adds	r3, #36	; 0x24
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	4611      	mov	r1, r2
 800ba34:	4618      	mov	r0, r3
 800ba36:	f000 fda9 	bl	800c58c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ba3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba3c:	f000 f8b8 	bl	800bbb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ba40:	f000 fbde 	bl	800c200 <xTaskResumeAll>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d189      	bne.n	800b95e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ba4a:	4b10      	ldr	r3, [pc, #64]	; (800ba8c <xQueueReceive+0x1bc>)
 800ba4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba50:	601a      	str	r2, [r3, #0]
 800ba52:	f3bf 8f4f 	dsb	sy
 800ba56:	f3bf 8f6f 	isb	sy
 800ba5a:	e780      	b.n	800b95e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ba5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba5e:	f000 f8a7 	bl	800bbb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba62:	f000 fbcd 	bl	800c200 <xTaskResumeAll>
 800ba66:	e77a      	b.n	800b95e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ba68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba6a:	f000 f8a1 	bl	800bbb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba6e:	f000 fbc7 	bl	800c200 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba74:	f000 f8ee 	bl	800bc54 <prvIsQueueEmpty>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	f43f af6f 	beq.w	800b95e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ba80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3730      	adds	r7, #48	; 0x30
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	e000ed04 	.word	0xe000ed04

0800ba90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b086      	sub	sp, #24
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baa4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d10d      	bne.n	800baca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d14d      	bne.n	800bb52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	4618      	mov	r0, r3
 800babc:	f000 ff92 	bl	800c9e4 <xTaskPriorityDisinherit>
 800bac0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2200      	movs	r2, #0
 800bac6:	609a      	str	r2, [r3, #8]
 800bac8:	e043      	b.n	800bb52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d119      	bne.n	800bb04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6858      	ldr	r0, [r3, #4]
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bad8:	461a      	mov	r2, r3
 800bada:	68b9      	ldr	r1, [r7, #8]
 800badc:	f001 fff2 	bl	800dac4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	685a      	ldr	r2, [r3, #4]
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bae8:	441a      	add	r2, r3
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	685a      	ldr	r2, [r3, #4]
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d32b      	bcc.n	800bb52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681a      	ldr	r2, [r3, #0]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	605a      	str	r2, [r3, #4]
 800bb02:	e026      	b.n	800bb52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	68d8      	ldr	r0, [r3, #12]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	68b9      	ldr	r1, [r7, #8]
 800bb10:	f001 ffd8 	bl	800dac4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	68da      	ldr	r2, [r3, #12]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb1c:	425b      	negs	r3, r3
 800bb1e:	441a      	add	r2, r3
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	68da      	ldr	r2, [r3, #12]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d207      	bcs.n	800bb40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	689a      	ldr	r2, [r3, #8]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb38:	425b      	negs	r3, r3
 800bb3a:	441a      	add	r2, r3
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2b02      	cmp	r3, #2
 800bb44:	d105      	bne.n	800bb52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d002      	beq.n	800bb52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	3b01      	subs	r3, #1
 800bb50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	1c5a      	adds	r2, r3, #1
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bb5a:	697b      	ldr	r3, [r7, #20]
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3718      	adds	r7, #24
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d018      	beq.n	800bba8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	68da      	ldr	r2, [r3, #12]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb7e:	441a      	add	r2, r3
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	68da      	ldr	r2, [r3, #12]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d303      	bcc.n	800bb98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	68d9      	ldr	r1, [r3, #12]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba0:	461a      	mov	r2, r3
 800bba2:	6838      	ldr	r0, [r7, #0]
 800bba4:	f001 ff8e 	bl	800dac4 <memcpy>
	}
}
 800bba8:	bf00      	nop
 800bbaa:	3708      	adds	r7, #8
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bbb8:	f001 fc54 	bl	800d464 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbc4:	e011      	b.n	800bbea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d012      	beq.n	800bbf4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	3324      	adds	r3, #36	; 0x24
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f000 fd2a 	bl	800c62c <xTaskRemoveFromEventList>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d001      	beq.n	800bbe2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bbde:	f000 fe01 	bl	800c7e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bbe2:	7bfb      	ldrb	r3, [r7, #15]
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	dce9      	bgt.n	800bbc6 <prvUnlockQueue+0x16>
 800bbf2:	e000      	b.n	800bbf6 <prvUnlockQueue+0x46>
					break;
 800bbf4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	22ff      	movs	r2, #255	; 0xff
 800bbfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bbfe:	f001 fc61 	bl	800d4c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bc02:	f001 fc2f 	bl	800d464 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc0e:	e011      	b.n	800bc34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	691b      	ldr	r3, [r3, #16]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d012      	beq.n	800bc3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	3310      	adds	r3, #16
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f000 fd05 	bl	800c62c <xTaskRemoveFromEventList>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d001      	beq.n	800bc2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bc28:	f000 fddc 	bl	800c7e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bc2c:	7bbb      	ldrb	r3, [r7, #14]
 800bc2e:	3b01      	subs	r3, #1
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	dce9      	bgt.n	800bc10 <prvUnlockQueue+0x60>
 800bc3c:	e000      	b.n	800bc40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bc3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	22ff      	movs	r2, #255	; 0xff
 800bc44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bc48:	f001 fc3c 	bl	800d4c4 <vPortExitCritical>
}
 800bc4c:	bf00      	nop
 800bc4e:	3710      	adds	r7, #16
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc5c:	f001 fc02 	bl	800d464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d102      	bne.n	800bc6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	60fb      	str	r3, [r7, #12]
 800bc6c:	e001      	b.n	800bc72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc72:	f001 fc27 	bl	800d4c4 <vPortExitCritical>

	return xReturn;
 800bc76:	68fb      	ldr	r3, [r7, #12]
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3710      	adds	r7, #16
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc88:	f001 fbec 	bl	800d464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d102      	bne.n	800bc9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	60fb      	str	r3, [r7, #12]
 800bc9c:	e001      	b.n	800bca2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bca2:	f001 fc0f 	bl	800d4c4 <vPortExitCritical>

	return xReturn;
 800bca6:	68fb      	ldr	r3, [r7, #12]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3710      	adds	r7, #16
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b085      	sub	sp, #20
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bcba:	2300      	movs	r3, #0
 800bcbc:	60fb      	str	r3, [r7, #12]
 800bcbe:	e014      	b.n	800bcea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bcc0:	4a0f      	ldr	r2, [pc, #60]	; (800bd00 <vQueueAddToRegistry+0x50>)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d10b      	bne.n	800bce4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bccc:	490c      	ldr	r1, [pc, #48]	; (800bd00 <vQueueAddToRegistry+0x50>)
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	683a      	ldr	r2, [r7, #0]
 800bcd2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bcd6:	4a0a      	ldr	r2, [pc, #40]	; (800bd00 <vQueueAddToRegistry+0x50>)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	00db      	lsls	r3, r3, #3
 800bcdc:	4413      	add	r3, r2
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bce2:	e006      	b.n	800bcf2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	3301      	adds	r3, #1
 800bce8:	60fb      	str	r3, [r7, #12]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2b07      	cmp	r3, #7
 800bcee:	d9e7      	bls.n	800bcc0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bcf0:	bf00      	nop
 800bcf2:	bf00      	nop
 800bcf4:	3714      	adds	r7, #20
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr
 800bcfe:	bf00      	nop
 800bd00:	20000fbc 	.word	0x20000fbc

0800bd04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b086      	sub	sp, #24
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bd14:	f001 fba6 	bl	800d464 <vPortEnterCritical>
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd1e:	b25b      	sxtb	r3, r3
 800bd20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd24:	d103      	bne.n	800bd2e <vQueueWaitForMessageRestricted+0x2a>
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd34:	b25b      	sxtb	r3, r3
 800bd36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd3a:	d103      	bne.n	800bd44 <vQueueWaitForMessageRestricted+0x40>
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd44:	f001 fbbe 	bl	800d4c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d106      	bne.n	800bd5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	3324      	adds	r3, #36	; 0x24
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	68b9      	ldr	r1, [r7, #8]
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f000 fc3b 	bl	800c5d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bd5e:	6978      	ldr	r0, [r7, #20]
 800bd60:	f7ff ff26 	bl	800bbb0 <prvUnlockQueue>
	}
 800bd64:	bf00      	nop
 800bd66:	3718      	adds	r7, #24
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b08e      	sub	sp, #56	; 0x38
 800bd70:	af04      	add	r7, sp, #16
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	607a      	str	r2, [r7, #4]
 800bd78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bd7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d10a      	bne.n	800bd96 <xTaskCreateStatic+0x2a>
	__asm volatile
 800bd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd84:	f383 8811 	msr	BASEPRI, r3
 800bd88:	f3bf 8f6f 	isb	sy
 800bd8c:	f3bf 8f4f 	dsb	sy
 800bd90:	623b      	str	r3, [r7, #32]
}
 800bd92:	bf00      	nop
 800bd94:	e7fe      	b.n	800bd94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d10a      	bne.n	800bdb2 <xTaskCreateStatic+0x46>
	__asm volatile
 800bd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda0:	f383 8811 	msr	BASEPRI, r3
 800bda4:	f3bf 8f6f 	isb	sy
 800bda8:	f3bf 8f4f 	dsb	sy
 800bdac:	61fb      	str	r3, [r7, #28]
}
 800bdae:	bf00      	nop
 800bdb0:	e7fe      	b.n	800bdb0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bdb2:	235c      	movs	r3, #92	; 0x5c
 800bdb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	2b5c      	cmp	r3, #92	; 0x5c
 800bdba:	d00a      	beq.n	800bdd2 <xTaskCreateStatic+0x66>
	__asm volatile
 800bdbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc0:	f383 8811 	msr	BASEPRI, r3
 800bdc4:	f3bf 8f6f 	isb	sy
 800bdc8:	f3bf 8f4f 	dsb	sy
 800bdcc:	61bb      	str	r3, [r7, #24]
}
 800bdce:	bf00      	nop
 800bdd0:	e7fe      	b.n	800bdd0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bdd2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bdd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d01e      	beq.n	800be18 <xTaskCreateStatic+0xac>
 800bdda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d01b      	beq.n	800be18 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bde8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdec:	2202      	movs	r2, #2
 800bdee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	9303      	str	r3, [sp, #12]
 800bdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf8:	9302      	str	r3, [sp, #8]
 800bdfa:	f107 0314 	add.w	r3, r7, #20
 800bdfe:	9301      	str	r3, [sp, #4]
 800be00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be02:	9300      	str	r3, [sp, #0]
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	68b9      	ldr	r1, [r7, #8]
 800be0a:	68f8      	ldr	r0, [r7, #12]
 800be0c:	f000 f850 	bl	800beb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be12:	f000 f8dd 	bl	800bfd0 <prvAddNewTaskToReadyList>
 800be16:	e001      	b.n	800be1c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800be18:	2300      	movs	r3, #0
 800be1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800be1c:	697b      	ldr	r3, [r7, #20]
	}
 800be1e:	4618      	mov	r0, r3
 800be20:	3728      	adds	r7, #40	; 0x28
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800be26:	b580      	push	{r7, lr}
 800be28:	b08c      	sub	sp, #48	; 0x30
 800be2a:	af04      	add	r7, sp, #16
 800be2c:	60f8      	str	r0, [r7, #12]
 800be2e:	60b9      	str	r1, [r7, #8]
 800be30:	603b      	str	r3, [r7, #0]
 800be32:	4613      	mov	r3, r2
 800be34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800be36:	88fb      	ldrh	r3, [r7, #6]
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	4618      	mov	r0, r3
 800be3c:	f001 fc34 	bl	800d6a8 <pvPortMalloc>
 800be40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00e      	beq.n	800be66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800be48:	205c      	movs	r0, #92	; 0x5c
 800be4a:	f001 fc2d 	bl	800d6a8 <pvPortMalloc>
 800be4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800be50:	69fb      	ldr	r3, [r7, #28]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d003      	beq.n	800be5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	697a      	ldr	r2, [r7, #20]
 800be5a:	631a      	str	r2, [r3, #48]	; 0x30
 800be5c:	e005      	b.n	800be6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800be5e:	6978      	ldr	r0, [r7, #20]
 800be60:	f001 fcee 	bl	800d840 <vPortFree>
 800be64:	e001      	b.n	800be6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800be66:	2300      	movs	r3, #0
 800be68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d017      	beq.n	800bea0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800be70:	69fb      	ldr	r3, [r7, #28]
 800be72:	2200      	movs	r2, #0
 800be74:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800be78:	88fa      	ldrh	r2, [r7, #6]
 800be7a:	2300      	movs	r3, #0
 800be7c:	9303      	str	r3, [sp, #12]
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	9302      	str	r3, [sp, #8]
 800be82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be84:	9301      	str	r3, [sp, #4]
 800be86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be88:	9300      	str	r3, [sp, #0]
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	68b9      	ldr	r1, [r7, #8]
 800be8e:	68f8      	ldr	r0, [r7, #12]
 800be90:	f000 f80e 	bl	800beb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be94:	69f8      	ldr	r0, [r7, #28]
 800be96:	f000 f89b 	bl	800bfd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800be9a:	2301      	movs	r3, #1
 800be9c:	61bb      	str	r3, [r7, #24]
 800be9e:	e002      	b.n	800bea6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bea0:	f04f 33ff 	mov.w	r3, #4294967295
 800bea4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bea6:	69bb      	ldr	r3, [r7, #24]
	}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3720      	adds	r7, #32
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b088      	sub	sp, #32
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
 800bebc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	461a      	mov	r2, r3
 800bec8:	21a5      	movs	r1, #165	; 0xa5
 800beca:	f001 fe09 	bl	800dae0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bed8:	3b01      	subs	r3, #1
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	4413      	add	r3, r2
 800bede:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	f023 0307 	bic.w	r3, r3, #7
 800bee6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	f003 0307 	and.w	r3, r3, #7
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00a      	beq.n	800bf08 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef6:	f383 8811 	msr	BASEPRI, r3
 800befa:	f3bf 8f6f 	isb	sy
 800befe:	f3bf 8f4f 	dsb	sy
 800bf02:	617b      	str	r3, [r7, #20]
}
 800bf04:	bf00      	nop
 800bf06:	e7fe      	b.n	800bf06 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d01f      	beq.n	800bf4e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf0e:	2300      	movs	r3, #0
 800bf10:	61fb      	str	r3, [r7, #28]
 800bf12:	e012      	b.n	800bf3a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bf14:	68ba      	ldr	r2, [r7, #8]
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	4413      	add	r3, r2
 800bf1a:	7819      	ldrb	r1, [r3, #0]
 800bf1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	4413      	add	r3, r2
 800bf22:	3334      	adds	r3, #52	; 0x34
 800bf24:	460a      	mov	r2, r1
 800bf26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bf28:	68ba      	ldr	r2, [r7, #8]
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d006      	beq.n	800bf42 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	3301      	adds	r3, #1
 800bf38:	61fb      	str	r3, [r7, #28]
 800bf3a:	69fb      	ldr	r3, [r7, #28]
 800bf3c:	2b0f      	cmp	r3, #15
 800bf3e:	d9e9      	bls.n	800bf14 <prvInitialiseNewTask+0x64>
 800bf40:	e000      	b.n	800bf44 <prvInitialiseNewTask+0x94>
			{
				break;
 800bf42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf46:	2200      	movs	r2, #0
 800bf48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bf4c:	e003      	b.n	800bf56 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf50:	2200      	movs	r2, #0
 800bf52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bf56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf58:	2b37      	cmp	r3, #55	; 0x37
 800bf5a:	d901      	bls.n	800bf60 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bf5c:	2337      	movs	r3, #55	; 0x37
 800bf5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bf60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf6a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bf6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6e:	2200      	movs	r2, #0
 800bf70:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bf72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf74:	3304      	adds	r3, #4
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7ff f978 	bl	800b26c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7e:	3318      	adds	r3, #24
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7ff f973 	bl	800b26c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bf9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bfaa:	683a      	ldr	r2, [r7, #0]
 800bfac:	68f9      	ldr	r1, [r7, #12]
 800bfae:	69b8      	ldr	r0, [r7, #24]
 800bfb0:	f001 f928 	bl	800d204 <pxPortInitialiseStack>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bfba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d002      	beq.n	800bfc6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfc6:	bf00      	nop
 800bfc8:	3720      	adds	r7, #32
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
	...

0800bfd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bfd8:	f001 fa44 	bl	800d464 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bfdc:	4b2d      	ldr	r3, [pc, #180]	; (800c094 <prvAddNewTaskToReadyList+0xc4>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	4a2c      	ldr	r2, [pc, #176]	; (800c094 <prvAddNewTaskToReadyList+0xc4>)
 800bfe4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bfe6:	4b2c      	ldr	r3, [pc, #176]	; (800c098 <prvAddNewTaskToReadyList+0xc8>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d109      	bne.n	800c002 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bfee:	4a2a      	ldr	r2, [pc, #168]	; (800c098 <prvAddNewTaskToReadyList+0xc8>)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bff4:	4b27      	ldr	r3, [pc, #156]	; (800c094 <prvAddNewTaskToReadyList+0xc4>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d110      	bne.n	800c01e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bffc:	f000 fc16 	bl	800c82c <prvInitialiseTaskLists>
 800c000:	e00d      	b.n	800c01e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c002:	4b26      	ldr	r3, [pc, #152]	; (800c09c <prvAddNewTaskToReadyList+0xcc>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d109      	bne.n	800c01e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c00a:	4b23      	ldr	r3, [pc, #140]	; (800c098 <prvAddNewTaskToReadyList+0xc8>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c014:	429a      	cmp	r2, r3
 800c016:	d802      	bhi.n	800c01e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c018:	4a1f      	ldr	r2, [pc, #124]	; (800c098 <prvAddNewTaskToReadyList+0xc8>)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c01e:	4b20      	ldr	r3, [pc, #128]	; (800c0a0 <prvAddNewTaskToReadyList+0xd0>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	3301      	adds	r3, #1
 800c024:	4a1e      	ldr	r2, [pc, #120]	; (800c0a0 <prvAddNewTaskToReadyList+0xd0>)
 800c026:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c028:	4b1d      	ldr	r3, [pc, #116]	; (800c0a0 <prvAddNewTaskToReadyList+0xd0>)
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c034:	4b1b      	ldr	r3, [pc, #108]	; (800c0a4 <prvAddNewTaskToReadyList+0xd4>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	429a      	cmp	r2, r3
 800c03a:	d903      	bls.n	800c044 <prvAddNewTaskToReadyList+0x74>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c040:	4a18      	ldr	r2, [pc, #96]	; (800c0a4 <prvAddNewTaskToReadyList+0xd4>)
 800c042:	6013      	str	r3, [r2, #0]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c048:	4613      	mov	r3, r2
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	4413      	add	r3, r2
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	4a15      	ldr	r2, [pc, #84]	; (800c0a8 <prvAddNewTaskToReadyList+0xd8>)
 800c052:	441a      	add	r2, r3
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	3304      	adds	r3, #4
 800c058:	4619      	mov	r1, r3
 800c05a:	4610      	mov	r0, r2
 800c05c:	f7ff f913 	bl	800b286 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c060:	f001 fa30 	bl	800d4c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c064:	4b0d      	ldr	r3, [pc, #52]	; (800c09c <prvAddNewTaskToReadyList+0xcc>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00e      	beq.n	800c08a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c06c:	4b0a      	ldr	r3, [pc, #40]	; (800c098 <prvAddNewTaskToReadyList+0xc8>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c076:	429a      	cmp	r2, r3
 800c078:	d207      	bcs.n	800c08a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c07a:	4b0c      	ldr	r3, [pc, #48]	; (800c0ac <prvAddNewTaskToReadyList+0xdc>)
 800c07c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c080:	601a      	str	r2, [r3, #0]
 800c082:	f3bf 8f4f 	dsb	sy
 800c086:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c08a:	bf00      	nop
 800c08c:	3708      	adds	r7, #8
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	200014d0 	.word	0x200014d0
 800c098:	20000ffc 	.word	0x20000ffc
 800c09c:	200014dc 	.word	0x200014dc
 800c0a0:	200014ec 	.word	0x200014ec
 800c0a4:	200014d8 	.word	0x200014d8
 800c0a8:	20001000 	.word	0x20001000
 800c0ac:	e000ed04 	.word	0xe000ed04

0800c0b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d017      	beq.n	800c0f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c0c2:	4b13      	ldr	r3, [pc, #76]	; (800c110 <vTaskDelay+0x60>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d00a      	beq.n	800c0e0 <vTaskDelay+0x30>
	__asm volatile
 800c0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ce:	f383 8811 	msr	BASEPRI, r3
 800c0d2:	f3bf 8f6f 	isb	sy
 800c0d6:	f3bf 8f4f 	dsb	sy
 800c0da:	60bb      	str	r3, [r7, #8]
}
 800c0dc:	bf00      	nop
 800c0de:	e7fe      	b.n	800c0de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c0e0:	f000 f880 	bl	800c1e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c0e4:	2100      	movs	r1, #0
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 fcea 	bl	800cac0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c0ec:	f000 f888 	bl	800c200 <xTaskResumeAll>
 800c0f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d107      	bne.n	800c108 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c0f8:	4b06      	ldr	r3, [pc, #24]	; (800c114 <vTaskDelay+0x64>)
 800c0fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0fe:	601a      	str	r2, [r3, #0]
 800c100:	f3bf 8f4f 	dsb	sy
 800c104:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c108:	bf00      	nop
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	200014f8 	.word	0x200014f8
 800c114:	e000ed04 	.word	0xe000ed04

0800c118 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b08a      	sub	sp, #40	; 0x28
 800c11c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c11e:	2300      	movs	r3, #0
 800c120:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c122:	2300      	movs	r3, #0
 800c124:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c126:	463a      	mov	r2, r7
 800c128:	1d39      	adds	r1, r7, #4
 800c12a:	f107 0308 	add.w	r3, r7, #8
 800c12e:	4618      	mov	r0, r3
 800c130:	f7ff f848 	bl	800b1c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c134:	6839      	ldr	r1, [r7, #0]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	68ba      	ldr	r2, [r7, #8]
 800c13a:	9202      	str	r2, [sp, #8]
 800c13c:	9301      	str	r3, [sp, #4]
 800c13e:	2300      	movs	r3, #0
 800c140:	9300      	str	r3, [sp, #0]
 800c142:	2300      	movs	r3, #0
 800c144:	460a      	mov	r2, r1
 800c146:	4921      	ldr	r1, [pc, #132]	; (800c1cc <vTaskStartScheduler+0xb4>)
 800c148:	4821      	ldr	r0, [pc, #132]	; (800c1d0 <vTaskStartScheduler+0xb8>)
 800c14a:	f7ff fe0f 	bl	800bd6c <xTaskCreateStatic>
 800c14e:	4603      	mov	r3, r0
 800c150:	4a20      	ldr	r2, [pc, #128]	; (800c1d4 <vTaskStartScheduler+0xbc>)
 800c152:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c154:	4b1f      	ldr	r3, [pc, #124]	; (800c1d4 <vTaskStartScheduler+0xbc>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d002      	beq.n	800c162 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c15c:	2301      	movs	r3, #1
 800c15e:	617b      	str	r3, [r7, #20]
 800c160:	e001      	b.n	800c166 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c162:	2300      	movs	r3, #0
 800c164:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d102      	bne.n	800c172 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c16c:	f000 fcfc 	bl	800cb68 <xTimerCreateTimerTask>
 800c170:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	2b01      	cmp	r3, #1
 800c176:	d116      	bne.n	800c1a6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17c:	f383 8811 	msr	BASEPRI, r3
 800c180:	f3bf 8f6f 	isb	sy
 800c184:	f3bf 8f4f 	dsb	sy
 800c188:	613b      	str	r3, [r7, #16]
}
 800c18a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c18c:	4b12      	ldr	r3, [pc, #72]	; (800c1d8 <vTaskStartScheduler+0xc0>)
 800c18e:	f04f 32ff 	mov.w	r2, #4294967295
 800c192:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c194:	4b11      	ldr	r3, [pc, #68]	; (800c1dc <vTaskStartScheduler+0xc4>)
 800c196:	2201      	movs	r2, #1
 800c198:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c19a:	4b11      	ldr	r3, [pc, #68]	; (800c1e0 <vTaskStartScheduler+0xc8>)
 800c19c:	2200      	movs	r2, #0
 800c19e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c1a0:	f001 f8be 	bl	800d320 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c1a4:	e00e      	b.n	800c1c4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ac:	d10a      	bne.n	800c1c4 <vTaskStartScheduler+0xac>
	__asm volatile
 800c1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b2:	f383 8811 	msr	BASEPRI, r3
 800c1b6:	f3bf 8f6f 	isb	sy
 800c1ba:	f3bf 8f4f 	dsb	sy
 800c1be:	60fb      	str	r3, [r7, #12]
}
 800c1c0:	bf00      	nop
 800c1c2:	e7fe      	b.n	800c1c2 <vTaskStartScheduler+0xaa>
}
 800c1c4:	bf00      	nop
 800c1c6:	3718      	adds	r7, #24
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	0800db18 	.word	0x0800db18
 800c1d0:	0800c7fd 	.word	0x0800c7fd
 800c1d4:	200014f4 	.word	0x200014f4
 800c1d8:	200014f0 	.word	0x200014f0
 800c1dc:	200014dc 	.word	0x200014dc
 800c1e0:	200014d4 	.word	0x200014d4

0800c1e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c1e8:	4b04      	ldr	r3, [pc, #16]	; (800c1fc <vTaskSuspendAll+0x18>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	4a03      	ldr	r2, [pc, #12]	; (800c1fc <vTaskSuspendAll+0x18>)
 800c1f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c1f2:	bf00      	nop
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr
 800c1fc:	200014f8 	.word	0x200014f8

0800c200 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c206:	2300      	movs	r3, #0
 800c208:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c20a:	2300      	movs	r3, #0
 800c20c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c20e:	4b42      	ldr	r3, [pc, #264]	; (800c318 <xTaskResumeAll+0x118>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d10a      	bne.n	800c22c <xTaskResumeAll+0x2c>
	__asm volatile
 800c216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21a:	f383 8811 	msr	BASEPRI, r3
 800c21e:	f3bf 8f6f 	isb	sy
 800c222:	f3bf 8f4f 	dsb	sy
 800c226:	603b      	str	r3, [r7, #0]
}
 800c228:	bf00      	nop
 800c22a:	e7fe      	b.n	800c22a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c22c:	f001 f91a 	bl	800d464 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c230:	4b39      	ldr	r3, [pc, #228]	; (800c318 <xTaskResumeAll+0x118>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	3b01      	subs	r3, #1
 800c236:	4a38      	ldr	r2, [pc, #224]	; (800c318 <xTaskResumeAll+0x118>)
 800c238:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c23a:	4b37      	ldr	r3, [pc, #220]	; (800c318 <xTaskResumeAll+0x118>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d162      	bne.n	800c308 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c242:	4b36      	ldr	r3, [pc, #216]	; (800c31c <xTaskResumeAll+0x11c>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d05e      	beq.n	800c308 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c24a:	e02f      	b.n	800c2ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c24c:	4b34      	ldr	r3, [pc, #208]	; (800c320 <xTaskResumeAll+0x120>)
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	3318      	adds	r3, #24
 800c258:	4618      	mov	r0, r3
 800c25a:	f7ff f871 	bl	800b340 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	3304      	adds	r3, #4
 800c262:	4618      	mov	r0, r3
 800c264:	f7ff f86c 	bl	800b340 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c26c:	4b2d      	ldr	r3, [pc, #180]	; (800c324 <xTaskResumeAll+0x124>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	429a      	cmp	r2, r3
 800c272:	d903      	bls.n	800c27c <xTaskResumeAll+0x7c>
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c278:	4a2a      	ldr	r2, [pc, #168]	; (800c324 <xTaskResumeAll+0x124>)
 800c27a:	6013      	str	r3, [r2, #0]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c280:	4613      	mov	r3, r2
 800c282:	009b      	lsls	r3, r3, #2
 800c284:	4413      	add	r3, r2
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	4a27      	ldr	r2, [pc, #156]	; (800c328 <xTaskResumeAll+0x128>)
 800c28a:	441a      	add	r2, r3
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	3304      	adds	r3, #4
 800c290:	4619      	mov	r1, r3
 800c292:	4610      	mov	r0, r2
 800c294:	f7fe fff7 	bl	800b286 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c29c:	4b23      	ldr	r3, [pc, #140]	; (800c32c <xTaskResumeAll+0x12c>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d302      	bcc.n	800c2ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c2a6:	4b22      	ldr	r3, [pc, #136]	; (800c330 <xTaskResumeAll+0x130>)
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c2ac:	4b1c      	ldr	r3, [pc, #112]	; (800c320 <xTaskResumeAll+0x120>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d1cb      	bne.n	800c24c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d001      	beq.n	800c2be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c2ba:	f000 fb55 	bl	800c968 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c2be:	4b1d      	ldr	r3, [pc, #116]	; (800c334 <xTaskResumeAll+0x134>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d010      	beq.n	800c2ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c2ca:	f000 f847 	bl	800c35c <xTaskIncrementTick>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d002      	beq.n	800c2da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c2d4:	4b16      	ldr	r3, [pc, #88]	; (800c330 <xTaskResumeAll+0x130>)
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	3b01      	subs	r3, #1
 800c2de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d1f1      	bne.n	800c2ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c2e6:	4b13      	ldr	r3, [pc, #76]	; (800c334 <xTaskResumeAll+0x134>)
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c2ec:	4b10      	ldr	r3, [pc, #64]	; (800c330 <xTaskResumeAll+0x130>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d009      	beq.n	800c308 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c2f8:	4b0f      	ldr	r3, [pc, #60]	; (800c338 <xTaskResumeAll+0x138>)
 800c2fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2fe:	601a      	str	r2, [r3, #0]
 800c300:	f3bf 8f4f 	dsb	sy
 800c304:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c308:	f001 f8dc 	bl	800d4c4 <vPortExitCritical>

	return xAlreadyYielded;
 800c30c:	68bb      	ldr	r3, [r7, #8]
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3710      	adds	r7, #16
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	200014f8 	.word	0x200014f8
 800c31c:	200014d0 	.word	0x200014d0
 800c320:	20001490 	.word	0x20001490
 800c324:	200014d8 	.word	0x200014d8
 800c328:	20001000 	.word	0x20001000
 800c32c:	20000ffc 	.word	0x20000ffc
 800c330:	200014e4 	.word	0x200014e4
 800c334:	200014e0 	.word	0x200014e0
 800c338:	e000ed04 	.word	0xe000ed04

0800c33c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c342:	4b05      	ldr	r3, [pc, #20]	; (800c358 <xTaskGetTickCount+0x1c>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c348:	687b      	ldr	r3, [r7, #4]
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	370c      	adds	r7, #12
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr
 800c356:	bf00      	nop
 800c358:	200014d4 	.word	0x200014d4

0800c35c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b086      	sub	sp, #24
 800c360:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c362:	2300      	movs	r3, #0
 800c364:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c366:	4b4f      	ldr	r3, [pc, #316]	; (800c4a4 <xTaskIncrementTick+0x148>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f040 808f 	bne.w	800c48e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c370:	4b4d      	ldr	r3, [pc, #308]	; (800c4a8 <xTaskIncrementTick+0x14c>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	3301      	adds	r3, #1
 800c376:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c378:	4a4b      	ldr	r2, [pc, #300]	; (800c4a8 <xTaskIncrementTick+0x14c>)
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d120      	bne.n	800c3c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c384:	4b49      	ldr	r3, [pc, #292]	; (800c4ac <xTaskIncrementTick+0x150>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00a      	beq.n	800c3a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800c38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c392:	f383 8811 	msr	BASEPRI, r3
 800c396:	f3bf 8f6f 	isb	sy
 800c39a:	f3bf 8f4f 	dsb	sy
 800c39e:	603b      	str	r3, [r7, #0]
}
 800c3a0:	bf00      	nop
 800c3a2:	e7fe      	b.n	800c3a2 <xTaskIncrementTick+0x46>
 800c3a4:	4b41      	ldr	r3, [pc, #260]	; (800c4ac <xTaskIncrementTick+0x150>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	60fb      	str	r3, [r7, #12]
 800c3aa:	4b41      	ldr	r3, [pc, #260]	; (800c4b0 <xTaskIncrementTick+0x154>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4a3f      	ldr	r2, [pc, #252]	; (800c4ac <xTaskIncrementTick+0x150>)
 800c3b0:	6013      	str	r3, [r2, #0]
 800c3b2:	4a3f      	ldr	r2, [pc, #252]	; (800c4b0 <xTaskIncrementTick+0x154>)
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6013      	str	r3, [r2, #0]
 800c3b8:	4b3e      	ldr	r3, [pc, #248]	; (800c4b4 <xTaskIncrementTick+0x158>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	3301      	adds	r3, #1
 800c3be:	4a3d      	ldr	r2, [pc, #244]	; (800c4b4 <xTaskIncrementTick+0x158>)
 800c3c0:	6013      	str	r3, [r2, #0]
 800c3c2:	f000 fad1 	bl	800c968 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c3c6:	4b3c      	ldr	r3, [pc, #240]	; (800c4b8 <xTaskIncrementTick+0x15c>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	693a      	ldr	r2, [r7, #16]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d349      	bcc.n	800c464 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3d0:	4b36      	ldr	r3, [pc, #216]	; (800c4ac <xTaskIncrementTick+0x150>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d104      	bne.n	800c3e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3da:	4b37      	ldr	r3, [pc, #220]	; (800c4b8 <xTaskIncrementTick+0x15c>)
 800c3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c3e0:	601a      	str	r2, [r3, #0]
					break;
 800c3e2:	e03f      	b.n	800c464 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3e4:	4b31      	ldr	r3, [pc, #196]	; (800c4ac <xTaskIncrementTick+0x150>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c3f4:	693a      	ldr	r2, [r7, #16]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d203      	bcs.n	800c404 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c3fc:	4a2e      	ldr	r2, [pc, #184]	; (800c4b8 <xTaskIncrementTick+0x15c>)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c402:	e02f      	b.n	800c464 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	3304      	adds	r3, #4
 800c408:	4618      	mov	r0, r3
 800c40a:	f7fe ff99 	bl	800b340 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c412:	2b00      	cmp	r3, #0
 800c414:	d004      	beq.n	800c420 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	3318      	adds	r3, #24
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7fe ff90 	bl	800b340 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c424:	4b25      	ldr	r3, [pc, #148]	; (800c4bc <xTaskIncrementTick+0x160>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d903      	bls.n	800c434 <xTaskIncrementTick+0xd8>
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c430:	4a22      	ldr	r2, [pc, #136]	; (800c4bc <xTaskIncrementTick+0x160>)
 800c432:	6013      	str	r3, [r2, #0]
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c438:	4613      	mov	r3, r2
 800c43a:	009b      	lsls	r3, r3, #2
 800c43c:	4413      	add	r3, r2
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	4a1f      	ldr	r2, [pc, #124]	; (800c4c0 <xTaskIncrementTick+0x164>)
 800c442:	441a      	add	r2, r3
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	3304      	adds	r3, #4
 800c448:	4619      	mov	r1, r3
 800c44a:	4610      	mov	r0, r2
 800c44c:	f7fe ff1b 	bl	800b286 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c454:	4b1b      	ldr	r3, [pc, #108]	; (800c4c4 <xTaskIncrementTick+0x168>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d3b8      	bcc.n	800c3d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c45e:	2301      	movs	r3, #1
 800c460:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c462:	e7b5      	b.n	800c3d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c464:	4b17      	ldr	r3, [pc, #92]	; (800c4c4 <xTaskIncrementTick+0x168>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c46a:	4915      	ldr	r1, [pc, #84]	; (800c4c0 <xTaskIncrementTick+0x164>)
 800c46c:	4613      	mov	r3, r2
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	4413      	add	r3, r2
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	440b      	add	r3, r1
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d901      	bls.n	800c480 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c47c:	2301      	movs	r3, #1
 800c47e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c480:	4b11      	ldr	r3, [pc, #68]	; (800c4c8 <xTaskIncrementTick+0x16c>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d007      	beq.n	800c498 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c488:	2301      	movs	r3, #1
 800c48a:	617b      	str	r3, [r7, #20]
 800c48c:	e004      	b.n	800c498 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c48e:	4b0f      	ldr	r3, [pc, #60]	; (800c4cc <xTaskIncrementTick+0x170>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	3301      	adds	r3, #1
 800c494:	4a0d      	ldr	r2, [pc, #52]	; (800c4cc <xTaskIncrementTick+0x170>)
 800c496:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c498:	697b      	ldr	r3, [r7, #20]
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3718      	adds	r7, #24
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	200014f8 	.word	0x200014f8
 800c4a8:	200014d4 	.word	0x200014d4
 800c4ac:	20001488 	.word	0x20001488
 800c4b0:	2000148c 	.word	0x2000148c
 800c4b4:	200014e8 	.word	0x200014e8
 800c4b8:	200014f0 	.word	0x200014f0
 800c4bc:	200014d8 	.word	0x200014d8
 800c4c0:	20001000 	.word	0x20001000
 800c4c4:	20000ffc 	.word	0x20000ffc
 800c4c8:	200014e4 	.word	0x200014e4
 800c4cc:	200014e0 	.word	0x200014e0

0800c4d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b085      	sub	sp, #20
 800c4d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c4d6:	4b28      	ldr	r3, [pc, #160]	; (800c578 <vTaskSwitchContext+0xa8>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d003      	beq.n	800c4e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c4de:	4b27      	ldr	r3, [pc, #156]	; (800c57c <vTaskSwitchContext+0xac>)
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c4e4:	e041      	b.n	800c56a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c4e6:	4b25      	ldr	r3, [pc, #148]	; (800c57c <vTaskSwitchContext+0xac>)
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4ec:	4b24      	ldr	r3, [pc, #144]	; (800c580 <vTaskSwitchContext+0xb0>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	60fb      	str	r3, [r7, #12]
 800c4f2:	e010      	b.n	800c516 <vTaskSwitchContext+0x46>
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d10a      	bne.n	800c510 <vTaskSwitchContext+0x40>
	__asm volatile
 800c4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fe:	f383 8811 	msr	BASEPRI, r3
 800c502:	f3bf 8f6f 	isb	sy
 800c506:	f3bf 8f4f 	dsb	sy
 800c50a:	607b      	str	r3, [r7, #4]
}
 800c50c:	bf00      	nop
 800c50e:	e7fe      	b.n	800c50e <vTaskSwitchContext+0x3e>
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	3b01      	subs	r3, #1
 800c514:	60fb      	str	r3, [r7, #12]
 800c516:	491b      	ldr	r1, [pc, #108]	; (800c584 <vTaskSwitchContext+0xb4>)
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	4613      	mov	r3, r2
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	4413      	add	r3, r2
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	440b      	add	r3, r1
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d0e4      	beq.n	800c4f4 <vTaskSwitchContext+0x24>
 800c52a:	68fa      	ldr	r2, [r7, #12]
 800c52c:	4613      	mov	r3, r2
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	4413      	add	r3, r2
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	4a13      	ldr	r2, [pc, #76]	; (800c584 <vTaskSwitchContext+0xb4>)
 800c536:	4413      	add	r3, r2
 800c538:	60bb      	str	r3, [r7, #8]
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	685a      	ldr	r2, [r3, #4]
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	605a      	str	r2, [r3, #4]
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	685a      	ldr	r2, [r3, #4]
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	3308      	adds	r3, #8
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d104      	bne.n	800c55a <vTaskSwitchContext+0x8a>
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	685a      	ldr	r2, [r3, #4]
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	605a      	str	r2, [r3, #4]
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	4a09      	ldr	r2, [pc, #36]	; (800c588 <vTaskSwitchContext+0xb8>)
 800c562:	6013      	str	r3, [r2, #0]
 800c564:	4a06      	ldr	r2, [pc, #24]	; (800c580 <vTaskSwitchContext+0xb0>)
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	6013      	str	r3, [r2, #0]
}
 800c56a:	bf00      	nop
 800c56c:	3714      	adds	r7, #20
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr
 800c576:	bf00      	nop
 800c578:	200014f8 	.word	0x200014f8
 800c57c:	200014e4 	.word	0x200014e4
 800c580:	200014d8 	.word	0x200014d8
 800c584:	20001000 	.word	0x20001000
 800c588:	20000ffc 	.word	0x20000ffc

0800c58c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b084      	sub	sp, #16
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d10a      	bne.n	800c5b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a0:	f383 8811 	msr	BASEPRI, r3
 800c5a4:	f3bf 8f6f 	isb	sy
 800c5a8:	f3bf 8f4f 	dsb	sy
 800c5ac:	60fb      	str	r3, [r7, #12]
}
 800c5ae:	bf00      	nop
 800c5b0:	e7fe      	b.n	800c5b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c5b2:	4b07      	ldr	r3, [pc, #28]	; (800c5d0 <vTaskPlaceOnEventList+0x44>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	3318      	adds	r3, #24
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f7fe fe87 	bl	800b2ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c5c0:	2101      	movs	r1, #1
 800c5c2:	6838      	ldr	r0, [r7, #0]
 800c5c4:	f000 fa7c 	bl	800cac0 <prvAddCurrentTaskToDelayedList>
}
 800c5c8:	bf00      	nop
 800c5ca:	3710      	adds	r7, #16
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}
 800c5d0:	20000ffc 	.word	0x20000ffc

0800c5d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b086      	sub	sp, #24
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d10a      	bne.n	800c5fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ea:	f383 8811 	msr	BASEPRI, r3
 800c5ee:	f3bf 8f6f 	isb	sy
 800c5f2:	f3bf 8f4f 	dsb	sy
 800c5f6:	617b      	str	r3, [r7, #20]
}
 800c5f8:	bf00      	nop
 800c5fa:	e7fe      	b.n	800c5fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c5fc:	4b0a      	ldr	r3, [pc, #40]	; (800c628 <vTaskPlaceOnEventListRestricted+0x54>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	3318      	adds	r3, #24
 800c602:	4619      	mov	r1, r3
 800c604:	68f8      	ldr	r0, [r7, #12]
 800c606:	f7fe fe3e 	bl	800b286 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d002      	beq.n	800c616 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c610:	f04f 33ff 	mov.w	r3, #4294967295
 800c614:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c616:	6879      	ldr	r1, [r7, #4]
 800c618:	68b8      	ldr	r0, [r7, #8]
 800c61a:	f000 fa51 	bl	800cac0 <prvAddCurrentTaskToDelayedList>
	}
 800c61e:	bf00      	nop
 800c620:	3718      	adds	r7, #24
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	20000ffc 	.word	0x20000ffc

0800c62c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b086      	sub	sp, #24
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	68db      	ldr	r3, [r3, #12]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d10a      	bne.n	800c658 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c646:	f383 8811 	msr	BASEPRI, r3
 800c64a:	f3bf 8f6f 	isb	sy
 800c64e:	f3bf 8f4f 	dsb	sy
 800c652:	60fb      	str	r3, [r7, #12]
}
 800c654:	bf00      	nop
 800c656:	e7fe      	b.n	800c656 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	3318      	adds	r3, #24
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7fe fe6f 	bl	800b340 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c662:	4b1e      	ldr	r3, [pc, #120]	; (800c6dc <xTaskRemoveFromEventList+0xb0>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d11d      	bne.n	800c6a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	3304      	adds	r3, #4
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fe fe66 	bl	800b340 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c678:	4b19      	ldr	r3, [pc, #100]	; (800c6e0 <xTaskRemoveFromEventList+0xb4>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d903      	bls.n	800c688 <xTaskRemoveFromEventList+0x5c>
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c684:	4a16      	ldr	r2, [pc, #88]	; (800c6e0 <xTaskRemoveFromEventList+0xb4>)
 800c686:	6013      	str	r3, [r2, #0]
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c68c:	4613      	mov	r3, r2
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	4413      	add	r3, r2
 800c692:	009b      	lsls	r3, r3, #2
 800c694:	4a13      	ldr	r2, [pc, #76]	; (800c6e4 <xTaskRemoveFromEventList+0xb8>)
 800c696:	441a      	add	r2, r3
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	3304      	adds	r3, #4
 800c69c:	4619      	mov	r1, r3
 800c69e:	4610      	mov	r0, r2
 800c6a0:	f7fe fdf1 	bl	800b286 <vListInsertEnd>
 800c6a4:	e005      	b.n	800c6b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	3318      	adds	r3, #24
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	480e      	ldr	r0, [pc, #56]	; (800c6e8 <xTaskRemoveFromEventList+0xbc>)
 800c6ae:	f7fe fdea 	bl	800b286 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6b6:	4b0d      	ldr	r3, [pc, #52]	; (800c6ec <xTaskRemoveFromEventList+0xc0>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d905      	bls.n	800c6cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c6c4:	4b0a      	ldr	r3, [pc, #40]	; (800c6f0 <xTaskRemoveFromEventList+0xc4>)
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	601a      	str	r2, [r3, #0]
 800c6ca:	e001      	b.n	800c6d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c6d0:	697b      	ldr	r3, [r7, #20]
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3718      	adds	r7, #24
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	200014f8 	.word	0x200014f8
 800c6e0:	200014d8 	.word	0x200014d8
 800c6e4:	20001000 	.word	0x20001000
 800c6e8:	20001490 	.word	0x20001490
 800c6ec:	20000ffc 	.word	0x20000ffc
 800c6f0:	200014e4 	.word	0x200014e4

0800c6f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c6fc:	4b06      	ldr	r3, [pc, #24]	; (800c718 <vTaskInternalSetTimeOutState+0x24>)
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c704:	4b05      	ldr	r3, [pc, #20]	; (800c71c <vTaskInternalSetTimeOutState+0x28>)
 800c706:	681a      	ldr	r2, [r3, #0]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	605a      	str	r2, [r3, #4]
}
 800c70c:	bf00      	nop
 800c70e:	370c      	adds	r7, #12
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr
 800c718:	200014e8 	.word	0x200014e8
 800c71c:	200014d4 	.word	0x200014d4

0800c720 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b088      	sub	sp, #32
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d10a      	bne.n	800c746 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c734:	f383 8811 	msr	BASEPRI, r3
 800c738:	f3bf 8f6f 	isb	sy
 800c73c:	f3bf 8f4f 	dsb	sy
 800c740:	613b      	str	r3, [r7, #16]
}
 800c742:	bf00      	nop
 800c744:	e7fe      	b.n	800c744 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d10a      	bne.n	800c762 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c750:	f383 8811 	msr	BASEPRI, r3
 800c754:	f3bf 8f6f 	isb	sy
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	60fb      	str	r3, [r7, #12]
}
 800c75e:	bf00      	nop
 800c760:	e7fe      	b.n	800c760 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c762:	f000 fe7f 	bl	800d464 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c766:	4b1d      	ldr	r3, [pc, #116]	; (800c7dc <xTaskCheckForTimeOut+0xbc>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	69ba      	ldr	r2, [r7, #24]
 800c772:	1ad3      	subs	r3, r2, r3
 800c774:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c77e:	d102      	bne.n	800c786 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c780:	2300      	movs	r3, #0
 800c782:	61fb      	str	r3, [r7, #28]
 800c784:	e023      	b.n	800c7ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	4b15      	ldr	r3, [pc, #84]	; (800c7e0 <xTaskCheckForTimeOut+0xc0>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d007      	beq.n	800c7a2 <xTaskCheckForTimeOut+0x82>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	69ba      	ldr	r2, [r7, #24]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d302      	bcc.n	800c7a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c79c:	2301      	movs	r3, #1
 800c79e:	61fb      	str	r3, [r7, #28]
 800c7a0:	e015      	b.n	800c7ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	697a      	ldr	r2, [r7, #20]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d20b      	bcs.n	800c7c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	1ad2      	subs	r2, r2, r3
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f7ff ff9b 	bl	800c6f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	61fb      	str	r3, [r7, #28]
 800c7c2:	e004      	b.n	800c7ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c7ce:	f000 fe79 	bl	800d4c4 <vPortExitCritical>

	return xReturn;
 800c7d2:	69fb      	ldr	r3, [r7, #28]
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3720      	adds	r7, #32
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	200014d4 	.word	0x200014d4
 800c7e0:	200014e8 	.word	0x200014e8

0800c7e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c7e8:	4b03      	ldr	r3, [pc, #12]	; (800c7f8 <vTaskMissedYield+0x14>)
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	601a      	str	r2, [r3, #0]
}
 800c7ee:	bf00      	nop
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr
 800c7f8:	200014e4 	.word	0x200014e4

0800c7fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c804:	f000 f852 	bl	800c8ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c808:	4b06      	ldr	r3, [pc, #24]	; (800c824 <prvIdleTask+0x28>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d9f9      	bls.n	800c804 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c810:	4b05      	ldr	r3, [pc, #20]	; (800c828 <prvIdleTask+0x2c>)
 800c812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c816:	601a      	str	r2, [r3, #0]
 800c818:	f3bf 8f4f 	dsb	sy
 800c81c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c820:	e7f0      	b.n	800c804 <prvIdleTask+0x8>
 800c822:	bf00      	nop
 800c824:	20001000 	.word	0x20001000
 800c828:	e000ed04 	.word	0xe000ed04

0800c82c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c832:	2300      	movs	r3, #0
 800c834:	607b      	str	r3, [r7, #4]
 800c836:	e00c      	b.n	800c852 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	4613      	mov	r3, r2
 800c83c:	009b      	lsls	r3, r3, #2
 800c83e:	4413      	add	r3, r2
 800c840:	009b      	lsls	r3, r3, #2
 800c842:	4a12      	ldr	r2, [pc, #72]	; (800c88c <prvInitialiseTaskLists+0x60>)
 800c844:	4413      	add	r3, r2
 800c846:	4618      	mov	r0, r3
 800c848:	f7fe fcf0 	bl	800b22c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	3301      	adds	r3, #1
 800c850:	607b      	str	r3, [r7, #4]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2b37      	cmp	r3, #55	; 0x37
 800c856:	d9ef      	bls.n	800c838 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c858:	480d      	ldr	r0, [pc, #52]	; (800c890 <prvInitialiseTaskLists+0x64>)
 800c85a:	f7fe fce7 	bl	800b22c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c85e:	480d      	ldr	r0, [pc, #52]	; (800c894 <prvInitialiseTaskLists+0x68>)
 800c860:	f7fe fce4 	bl	800b22c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c864:	480c      	ldr	r0, [pc, #48]	; (800c898 <prvInitialiseTaskLists+0x6c>)
 800c866:	f7fe fce1 	bl	800b22c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c86a:	480c      	ldr	r0, [pc, #48]	; (800c89c <prvInitialiseTaskLists+0x70>)
 800c86c:	f7fe fcde 	bl	800b22c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c870:	480b      	ldr	r0, [pc, #44]	; (800c8a0 <prvInitialiseTaskLists+0x74>)
 800c872:	f7fe fcdb 	bl	800b22c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c876:	4b0b      	ldr	r3, [pc, #44]	; (800c8a4 <prvInitialiseTaskLists+0x78>)
 800c878:	4a05      	ldr	r2, [pc, #20]	; (800c890 <prvInitialiseTaskLists+0x64>)
 800c87a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c87c:	4b0a      	ldr	r3, [pc, #40]	; (800c8a8 <prvInitialiseTaskLists+0x7c>)
 800c87e:	4a05      	ldr	r2, [pc, #20]	; (800c894 <prvInitialiseTaskLists+0x68>)
 800c880:	601a      	str	r2, [r3, #0]
}
 800c882:	bf00      	nop
 800c884:	3708      	adds	r7, #8
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
 800c88a:	bf00      	nop
 800c88c:	20001000 	.word	0x20001000
 800c890:	20001460 	.word	0x20001460
 800c894:	20001474 	.word	0x20001474
 800c898:	20001490 	.word	0x20001490
 800c89c:	200014a4 	.word	0x200014a4
 800c8a0:	200014bc 	.word	0x200014bc
 800c8a4:	20001488 	.word	0x20001488
 800c8a8:	2000148c 	.word	0x2000148c

0800c8ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c8b2:	e019      	b.n	800c8e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c8b4:	f000 fdd6 	bl	800d464 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8b8:	4b10      	ldr	r3, [pc, #64]	; (800c8fc <prvCheckTasksWaitingTermination+0x50>)
 800c8ba:	68db      	ldr	r3, [r3, #12]
 800c8bc:	68db      	ldr	r3, [r3, #12]
 800c8be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	3304      	adds	r3, #4
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7fe fd3b 	bl	800b340 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c8ca:	4b0d      	ldr	r3, [pc, #52]	; (800c900 <prvCheckTasksWaitingTermination+0x54>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	3b01      	subs	r3, #1
 800c8d0:	4a0b      	ldr	r2, [pc, #44]	; (800c900 <prvCheckTasksWaitingTermination+0x54>)
 800c8d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c8d4:	4b0b      	ldr	r3, [pc, #44]	; (800c904 <prvCheckTasksWaitingTermination+0x58>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	4a0a      	ldr	r2, [pc, #40]	; (800c904 <prvCheckTasksWaitingTermination+0x58>)
 800c8dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c8de:	f000 fdf1 	bl	800d4c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 f810 	bl	800c908 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c8e8:	4b06      	ldr	r3, [pc, #24]	; (800c904 <prvCheckTasksWaitingTermination+0x58>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d1e1      	bne.n	800c8b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c8f0:	bf00      	nop
 800c8f2:	bf00      	nop
 800c8f4:	3708      	adds	r7, #8
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	200014a4 	.word	0x200014a4
 800c900:	200014d0 	.word	0x200014d0
 800c904:	200014b8 	.word	0x200014b8

0800c908 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c916:	2b00      	cmp	r3, #0
 800c918:	d108      	bne.n	800c92c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c91e:	4618      	mov	r0, r3
 800c920:	f000 ff8e 	bl	800d840 <vPortFree>
				vPortFree( pxTCB );
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f000 ff8b 	bl	800d840 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c92a:	e018      	b.n	800c95e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c932:	2b01      	cmp	r3, #1
 800c934:	d103      	bne.n	800c93e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 ff82 	bl	800d840 <vPortFree>
	}
 800c93c:	e00f      	b.n	800c95e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c944:	2b02      	cmp	r3, #2
 800c946:	d00a      	beq.n	800c95e <prvDeleteTCB+0x56>
	__asm volatile
 800c948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94c:	f383 8811 	msr	BASEPRI, r3
 800c950:	f3bf 8f6f 	isb	sy
 800c954:	f3bf 8f4f 	dsb	sy
 800c958:	60fb      	str	r3, [r7, #12]
}
 800c95a:	bf00      	nop
 800c95c:	e7fe      	b.n	800c95c <prvDeleteTCB+0x54>
	}
 800c95e:	bf00      	nop
 800c960:	3710      	adds	r7, #16
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
	...

0800c968 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c968:	b480      	push	{r7}
 800c96a:	b083      	sub	sp, #12
 800c96c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c96e:	4b0c      	ldr	r3, [pc, #48]	; (800c9a0 <prvResetNextTaskUnblockTime+0x38>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d104      	bne.n	800c982 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c978:	4b0a      	ldr	r3, [pc, #40]	; (800c9a4 <prvResetNextTaskUnblockTime+0x3c>)
 800c97a:	f04f 32ff 	mov.w	r2, #4294967295
 800c97e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c980:	e008      	b.n	800c994 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c982:	4b07      	ldr	r3, [pc, #28]	; (800c9a0 <prvResetNextTaskUnblockTime+0x38>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	68db      	ldr	r3, [r3, #12]
 800c988:	68db      	ldr	r3, [r3, #12]
 800c98a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	4a04      	ldr	r2, [pc, #16]	; (800c9a4 <prvResetNextTaskUnblockTime+0x3c>)
 800c992:	6013      	str	r3, [r2, #0]
}
 800c994:	bf00      	nop
 800c996:	370c      	adds	r7, #12
 800c998:	46bd      	mov	sp, r7
 800c99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99e:	4770      	bx	lr
 800c9a0:	20001488 	.word	0x20001488
 800c9a4:	200014f0 	.word	0x200014f0

0800c9a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b083      	sub	sp, #12
 800c9ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c9ae:	4b0b      	ldr	r3, [pc, #44]	; (800c9dc <xTaskGetSchedulerState+0x34>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d102      	bne.n	800c9bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	607b      	str	r3, [r7, #4]
 800c9ba:	e008      	b.n	800c9ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9bc:	4b08      	ldr	r3, [pc, #32]	; (800c9e0 <xTaskGetSchedulerState+0x38>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d102      	bne.n	800c9ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c9c4:	2302      	movs	r3, #2
 800c9c6:	607b      	str	r3, [r7, #4]
 800c9c8:	e001      	b.n	800c9ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c9ce:	687b      	ldr	r3, [r7, #4]
	}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	370c      	adds	r7, #12
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr
 800c9dc:	200014dc 	.word	0x200014dc
 800c9e0:	200014f8 	.word	0x200014f8

0800c9e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b086      	sub	sp, #24
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d056      	beq.n	800caa8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c9fa:	4b2e      	ldr	r3, [pc, #184]	; (800cab4 <xTaskPriorityDisinherit+0xd0>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	693a      	ldr	r2, [r7, #16]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d00a      	beq.n	800ca1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ca04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca08:	f383 8811 	msr	BASEPRI, r3
 800ca0c:	f3bf 8f6f 	isb	sy
 800ca10:	f3bf 8f4f 	dsb	sy
 800ca14:	60fb      	str	r3, [r7, #12]
}
 800ca16:	bf00      	nop
 800ca18:	e7fe      	b.n	800ca18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d10a      	bne.n	800ca38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ca22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca26:	f383 8811 	msr	BASEPRI, r3
 800ca2a:	f3bf 8f6f 	isb	sy
 800ca2e:	f3bf 8f4f 	dsb	sy
 800ca32:	60bb      	str	r3, [r7, #8]
}
 800ca34:	bf00      	nop
 800ca36:	e7fe      	b.n	800ca36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca3c:	1e5a      	subs	r2, r3, #1
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d02c      	beq.n	800caa8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d128      	bne.n	800caa8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	3304      	adds	r3, #4
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7fe fc70 	bl	800b340 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca78:	4b0f      	ldr	r3, [pc, #60]	; (800cab8 <xTaskPriorityDisinherit+0xd4>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d903      	bls.n	800ca88 <xTaskPriorityDisinherit+0xa4>
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca84:	4a0c      	ldr	r2, [pc, #48]	; (800cab8 <xTaskPriorityDisinherit+0xd4>)
 800ca86:	6013      	str	r3, [r2, #0]
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca8c:	4613      	mov	r3, r2
 800ca8e:	009b      	lsls	r3, r3, #2
 800ca90:	4413      	add	r3, r2
 800ca92:	009b      	lsls	r3, r3, #2
 800ca94:	4a09      	ldr	r2, [pc, #36]	; (800cabc <xTaskPriorityDisinherit+0xd8>)
 800ca96:	441a      	add	r2, r3
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	3304      	adds	r3, #4
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	4610      	mov	r0, r2
 800caa0:	f7fe fbf1 	bl	800b286 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800caa4:	2301      	movs	r3, #1
 800caa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800caa8:	697b      	ldr	r3, [r7, #20]
	}
 800caaa:	4618      	mov	r0, r3
 800caac:	3718      	adds	r7, #24
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	20000ffc 	.word	0x20000ffc
 800cab8:	200014d8 	.word	0x200014d8
 800cabc:	20001000 	.word	0x20001000

0800cac0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800caca:	4b21      	ldr	r3, [pc, #132]	; (800cb50 <prvAddCurrentTaskToDelayedList+0x90>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cad0:	4b20      	ldr	r3, [pc, #128]	; (800cb54 <prvAddCurrentTaskToDelayedList+0x94>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	3304      	adds	r3, #4
 800cad6:	4618      	mov	r0, r3
 800cad8:	f7fe fc32 	bl	800b340 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cae2:	d10a      	bne.n	800cafa <prvAddCurrentTaskToDelayedList+0x3a>
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d007      	beq.n	800cafa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800caea:	4b1a      	ldr	r3, [pc, #104]	; (800cb54 <prvAddCurrentTaskToDelayedList+0x94>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	3304      	adds	r3, #4
 800caf0:	4619      	mov	r1, r3
 800caf2:	4819      	ldr	r0, [pc, #100]	; (800cb58 <prvAddCurrentTaskToDelayedList+0x98>)
 800caf4:	f7fe fbc7 	bl	800b286 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800caf8:	e026      	b.n	800cb48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cafa:	68fa      	ldr	r2, [r7, #12]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	4413      	add	r3, r2
 800cb00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cb02:	4b14      	ldr	r3, [pc, #80]	; (800cb54 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	68ba      	ldr	r2, [r7, #8]
 800cb08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cb0a:	68ba      	ldr	r2, [r7, #8]
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d209      	bcs.n	800cb26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb12:	4b12      	ldr	r3, [pc, #72]	; (800cb5c <prvAddCurrentTaskToDelayedList+0x9c>)
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	4b0f      	ldr	r3, [pc, #60]	; (800cb54 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	3304      	adds	r3, #4
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	4610      	mov	r0, r2
 800cb20:	f7fe fbd5 	bl	800b2ce <vListInsert>
}
 800cb24:	e010      	b.n	800cb48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb26:	4b0e      	ldr	r3, [pc, #56]	; (800cb60 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	4b0a      	ldr	r3, [pc, #40]	; (800cb54 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	3304      	adds	r3, #4
 800cb30:	4619      	mov	r1, r3
 800cb32:	4610      	mov	r0, r2
 800cb34:	f7fe fbcb 	bl	800b2ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cb38:	4b0a      	ldr	r3, [pc, #40]	; (800cb64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	68ba      	ldr	r2, [r7, #8]
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d202      	bcs.n	800cb48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cb42:	4a08      	ldr	r2, [pc, #32]	; (800cb64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	6013      	str	r3, [r2, #0]
}
 800cb48:	bf00      	nop
 800cb4a:	3710      	adds	r7, #16
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}
 800cb50:	200014d4 	.word	0x200014d4
 800cb54:	20000ffc 	.word	0x20000ffc
 800cb58:	200014bc 	.word	0x200014bc
 800cb5c:	2000148c 	.word	0x2000148c
 800cb60:	20001488 	.word	0x20001488
 800cb64:	200014f0 	.word	0x200014f0

0800cb68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b08a      	sub	sp, #40	; 0x28
 800cb6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cb72:	f000 fb07 	bl	800d184 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cb76:	4b1c      	ldr	r3, [pc, #112]	; (800cbe8 <xTimerCreateTimerTask+0x80>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d021      	beq.n	800cbc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cb82:	2300      	movs	r3, #0
 800cb84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cb86:	1d3a      	adds	r2, r7, #4
 800cb88:	f107 0108 	add.w	r1, r7, #8
 800cb8c:	f107 030c 	add.w	r3, r7, #12
 800cb90:	4618      	mov	r0, r3
 800cb92:	f7fe fb31 	bl	800b1f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cb96:	6879      	ldr	r1, [r7, #4]
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	68fa      	ldr	r2, [r7, #12]
 800cb9c:	9202      	str	r2, [sp, #8]
 800cb9e:	9301      	str	r3, [sp, #4]
 800cba0:	2302      	movs	r3, #2
 800cba2:	9300      	str	r3, [sp, #0]
 800cba4:	2300      	movs	r3, #0
 800cba6:	460a      	mov	r2, r1
 800cba8:	4910      	ldr	r1, [pc, #64]	; (800cbec <xTimerCreateTimerTask+0x84>)
 800cbaa:	4811      	ldr	r0, [pc, #68]	; (800cbf0 <xTimerCreateTimerTask+0x88>)
 800cbac:	f7ff f8de 	bl	800bd6c <xTaskCreateStatic>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	4a10      	ldr	r2, [pc, #64]	; (800cbf4 <xTimerCreateTimerTask+0x8c>)
 800cbb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cbb6:	4b0f      	ldr	r3, [pc, #60]	; (800cbf4 <xTimerCreateTimerTask+0x8c>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d001      	beq.n	800cbc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d10a      	bne.n	800cbde <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbcc:	f383 8811 	msr	BASEPRI, r3
 800cbd0:	f3bf 8f6f 	isb	sy
 800cbd4:	f3bf 8f4f 	dsb	sy
 800cbd8:	613b      	str	r3, [r7, #16]
}
 800cbda:	bf00      	nop
 800cbdc:	e7fe      	b.n	800cbdc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cbde:	697b      	ldr	r3, [r7, #20]
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3718      	adds	r7, #24
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	2000152c 	.word	0x2000152c
 800cbec:	0800db20 	.word	0x0800db20
 800cbf0:	0800cd2d 	.word	0x0800cd2d
 800cbf4:	20001530 	.word	0x20001530

0800cbf8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b08a      	sub	sp, #40	; 0x28
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	607a      	str	r2, [r7, #4]
 800cc04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cc06:	2300      	movs	r3, #0
 800cc08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d10a      	bne.n	800cc26 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	623b      	str	r3, [r7, #32]
}
 800cc22:	bf00      	nop
 800cc24:	e7fe      	b.n	800cc24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cc26:	4b1a      	ldr	r3, [pc, #104]	; (800cc90 <xTimerGenericCommand+0x98>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d02a      	beq.n	800cc84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	2b05      	cmp	r3, #5
 800cc3e:	dc18      	bgt.n	800cc72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cc40:	f7ff feb2 	bl	800c9a8 <xTaskGetSchedulerState>
 800cc44:	4603      	mov	r3, r0
 800cc46:	2b02      	cmp	r3, #2
 800cc48:	d109      	bne.n	800cc5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cc4a:	4b11      	ldr	r3, [pc, #68]	; (800cc90 <xTimerGenericCommand+0x98>)
 800cc4c:	6818      	ldr	r0, [r3, #0]
 800cc4e:	f107 0110 	add.w	r1, r7, #16
 800cc52:	2300      	movs	r3, #0
 800cc54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc56:	f7fe fca1 	bl	800b59c <xQueueGenericSend>
 800cc5a:	6278      	str	r0, [r7, #36]	; 0x24
 800cc5c:	e012      	b.n	800cc84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cc5e:	4b0c      	ldr	r3, [pc, #48]	; (800cc90 <xTimerGenericCommand+0x98>)
 800cc60:	6818      	ldr	r0, [r3, #0]
 800cc62:	f107 0110 	add.w	r1, r7, #16
 800cc66:	2300      	movs	r3, #0
 800cc68:	2200      	movs	r2, #0
 800cc6a:	f7fe fc97 	bl	800b59c <xQueueGenericSend>
 800cc6e:	6278      	str	r0, [r7, #36]	; 0x24
 800cc70:	e008      	b.n	800cc84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cc72:	4b07      	ldr	r3, [pc, #28]	; (800cc90 <xTimerGenericCommand+0x98>)
 800cc74:	6818      	ldr	r0, [r3, #0]
 800cc76:	f107 0110 	add.w	r1, r7, #16
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	683a      	ldr	r2, [r7, #0]
 800cc7e:	f7fe fd8b 	bl	800b798 <xQueueGenericSendFromISR>
 800cc82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3728      	adds	r7, #40	; 0x28
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	2000152c 	.word	0x2000152c

0800cc94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b088      	sub	sp, #32
 800cc98:	af02      	add	r7, sp, #8
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc9e:	4b22      	ldr	r3, [pc, #136]	; (800cd28 <prvProcessExpiredTimer+0x94>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	68db      	ldr	r3, [r3, #12]
 800cca6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	3304      	adds	r3, #4
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7fe fb47 	bl	800b340 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccb8:	f003 0304 	and.w	r3, r3, #4
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d022      	beq.n	800cd06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	699a      	ldr	r2, [r3, #24]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	18d1      	adds	r1, r2, r3
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	683a      	ldr	r2, [r7, #0]
 800cccc:	6978      	ldr	r0, [r7, #20]
 800ccce:	f000 f8d1 	bl	800ce74 <prvInsertTimerInActiveList>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d01f      	beq.n	800cd18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ccd8:	2300      	movs	r3, #0
 800ccda:	9300      	str	r3, [sp, #0]
 800ccdc:	2300      	movs	r3, #0
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	2100      	movs	r1, #0
 800cce2:	6978      	ldr	r0, [r7, #20]
 800cce4:	f7ff ff88 	bl	800cbf8 <xTimerGenericCommand>
 800cce8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d113      	bne.n	800cd18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ccf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf4:	f383 8811 	msr	BASEPRI, r3
 800ccf8:	f3bf 8f6f 	isb	sy
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	60fb      	str	r3, [r7, #12]
}
 800cd02:	bf00      	nop
 800cd04:	e7fe      	b.n	800cd04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd0c:	f023 0301 	bic.w	r3, r3, #1
 800cd10:	b2da      	uxtb	r2, r3
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	6a1b      	ldr	r3, [r3, #32]
 800cd1c:	6978      	ldr	r0, [r7, #20]
 800cd1e:	4798      	blx	r3
}
 800cd20:	bf00      	nop
 800cd22:	3718      	adds	r7, #24
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	20001524 	.word	0x20001524

0800cd2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cd34:	f107 0308 	add.w	r3, r7, #8
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f000 f857 	bl	800cdec <prvGetNextExpireTime>
 800cd3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	4619      	mov	r1, r3
 800cd44:	68f8      	ldr	r0, [r7, #12]
 800cd46:	f000 f803 	bl	800cd50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cd4a:	f000 f8d5 	bl	800cef8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cd4e:	e7f1      	b.n	800cd34 <prvTimerTask+0x8>

0800cd50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cd5a:	f7ff fa43 	bl	800c1e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd5e:	f107 0308 	add.w	r3, r7, #8
 800cd62:	4618      	mov	r0, r3
 800cd64:	f000 f866 	bl	800ce34 <prvSampleTimeNow>
 800cd68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d130      	bne.n	800cdd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d10a      	bne.n	800cd8c <prvProcessTimerOrBlockTask+0x3c>
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d806      	bhi.n	800cd8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cd7e:	f7ff fa3f 	bl	800c200 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cd82:	68f9      	ldr	r1, [r7, #12]
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f7ff ff85 	bl	800cc94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cd8a:	e024      	b.n	800cdd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d008      	beq.n	800cda4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cd92:	4b13      	ldr	r3, [pc, #76]	; (800cde0 <prvProcessTimerOrBlockTask+0x90>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d101      	bne.n	800cda0 <prvProcessTimerOrBlockTask+0x50>
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	e000      	b.n	800cda2 <prvProcessTimerOrBlockTask+0x52>
 800cda0:	2300      	movs	r3, #0
 800cda2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cda4:	4b0f      	ldr	r3, [pc, #60]	; (800cde4 <prvProcessTimerOrBlockTask+0x94>)
 800cda6:	6818      	ldr	r0, [r3, #0]
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	1ad3      	subs	r3, r2, r3
 800cdae:	683a      	ldr	r2, [r7, #0]
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	f7fe ffa7 	bl	800bd04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cdb6:	f7ff fa23 	bl	800c200 <xTaskResumeAll>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d10a      	bne.n	800cdd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cdc0:	4b09      	ldr	r3, [pc, #36]	; (800cde8 <prvProcessTimerOrBlockTask+0x98>)
 800cdc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdc6:	601a      	str	r2, [r3, #0]
 800cdc8:	f3bf 8f4f 	dsb	sy
 800cdcc:	f3bf 8f6f 	isb	sy
}
 800cdd0:	e001      	b.n	800cdd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cdd2:	f7ff fa15 	bl	800c200 <xTaskResumeAll>
}
 800cdd6:	bf00      	nop
 800cdd8:	3710      	adds	r7, #16
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
 800cdde:	bf00      	nop
 800cde0:	20001528 	.word	0x20001528
 800cde4:	2000152c 	.word	0x2000152c
 800cde8:	e000ed04 	.word	0xe000ed04

0800cdec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cdec:	b480      	push	{r7}
 800cdee:	b085      	sub	sp, #20
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cdf4:	4b0e      	ldr	r3, [pc, #56]	; (800ce30 <prvGetNextExpireTime+0x44>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d101      	bne.n	800ce02 <prvGetNextExpireTime+0x16>
 800cdfe:	2201      	movs	r2, #1
 800ce00:	e000      	b.n	800ce04 <prvGetNextExpireTime+0x18>
 800ce02:	2200      	movs	r2, #0
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d105      	bne.n	800ce1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce10:	4b07      	ldr	r3, [pc, #28]	; (800ce30 <prvGetNextExpireTime+0x44>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	68db      	ldr	r3, [r3, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	60fb      	str	r3, [r7, #12]
 800ce1a:	e001      	b.n	800ce20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ce20:	68fb      	ldr	r3, [r7, #12]
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3714      	adds	r7, #20
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr
 800ce2e:	bf00      	nop
 800ce30:	20001524 	.word	0x20001524

0800ce34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ce3c:	f7ff fa7e 	bl	800c33c <xTaskGetTickCount>
 800ce40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ce42:	4b0b      	ldr	r3, [pc, #44]	; (800ce70 <prvSampleTimeNow+0x3c>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	68fa      	ldr	r2, [r7, #12]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d205      	bcs.n	800ce58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ce4c:	f000 f936 	bl	800d0bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2201      	movs	r2, #1
 800ce54:	601a      	str	r2, [r3, #0]
 800ce56:	e002      	b.n	800ce5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ce5e:	4a04      	ldr	r2, [pc, #16]	; (800ce70 <prvSampleTimeNow+0x3c>)
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ce64:	68fb      	ldr	r3, [r7, #12]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3710      	adds	r7, #16
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	20001534 	.word	0x20001534

0800ce74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b086      	sub	sp, #24
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
 800ce80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ce82:	2300      	movs	r3, #0
 800ce84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	68ba      	ldr	r2, [r7, #8]
 800ce8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	68fa      	ldr	r2, [r7, #12]
 800ce90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ce92:	68ba      	ldr	r2, [r7, #8]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d812      	bhi.n	800cec0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	1ad2      	subs	r2, r2, r3
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	699b      	ldr	r3, [r3, #24]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d302      	bcc.n	800ceae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cea8:	2301      	movs	r3, #1
 800ceaa:	617b      	str	r3, [r7, #20]
 800ceac:	e01b      	b.n	800cee6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ceae:	4b10      	ldr	r3, [pc, #64]	; (800cef0 <prvInsertTimerInActiveList+0x7c>)
 800ceb0:	681a      	ldr	r2, [r3, #0]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	3304      	adds	r3, #4
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	4610      	mov	r0, r2
 800ceba:	f7fe fa08 	bl	800b2ce <vListInsert>
 800cebe:	e012      	b.n	800cee6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d206      	bcs.n	800ced6 <prvInsertTimerInActiveList+0x62>
 800cec8:	68ba      	ldr	r2, [r7, #8]
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d302      	bcc.n	800ced6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ced0:	2301      	movs	r3, #1
 800ced2:	617b      	str	r3, [r7, #20]
 800ced4:	e007      	b.n	800cee6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ced6:	4b07      	ldr	r3, [pc, #28]	; (800cef4 <prvInsertTimerInActiveList+0x80>)
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	3304      	adds	r3, #4
 800cede:	4619      	mov	r1, r3
 800cee0:	4610      	mov	r0, r2
 800cee2:	f7fe f9f4 	bl	800b2ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cee6:	697b      	ldr	r3, [r7, #20]
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3718      	adds	r7, #24
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	20001528 	.word	0x20001528
 800cef4:	20001524 	.word	0x20001524

0800cef8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b08e      	sub	sp, #56	; 0x38
 800cefc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cefe:	e0ca      	b.n	800d096 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	da18      	bge.n	800cf38 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cf06:	1d3b      	adds	r3, r7, #4
 800cf08:	3304      	adds	r3, #4
 800cf0a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cf0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d10a      	bne.n	800cf28 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cf12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf16:	f383 8811 	msr	BASEPRI, r3
 800cf1a:	f3bf 8f6f 	isb	sy
 800cf1e:	f3bf 8f4f 	dsb	sy
 800cf22:	61fb      	str	r3, [r7, #28]
}
 800cf24:	bf00      	nop
 800cf26:	e7fe      	b.n	800cf26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf2e:	6850      	ldr	r0, [r2, #4]
 800cf30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf32:	6892      	ldr	r2, [r2, #8]
 800cf34:	4611      	mov	r1, r2
 800cf36:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	f2c0 80aa 	blt.w	800d094 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf46:	695b      	ldr	r3, [r3, #20]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d004      	beq.n	800cf56 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4e:	3304      	adds	r3, #4
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7fe f9f5 	bl	800b340 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cf56:	463b      	mov	r3, r7
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7ff ff6b 	bl	800ce34 <prvSampleTimeNow>
 800cf5e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2b09      	cmp	r3, #9
 800cf64:	f200 8097 	bhi.w	800d096 <prvProcessReceivedCommands+0x19e>
 800cf68:	a201      	add	r2, pc, #4	; (adr r2, 800cf70 <prvProcessReceivedCommands+0x78>)
 800cf6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf6e:	bf00      	nop
 800cf70:	0800cf99 	.word	0x0800cf99
 800cf74:	0800cf99 	.word	0x0800cf99
 800cf78:	0800cf99 	.word	0x0800cf99
 800cf7c:	0800d00d 	.word	0x0800d00d
 800cf80:	0800d021 	.word	0x0800d021
 800cf84:	0800d06b 	.word	0x0800d06b
 800cf88:	0800cf99 	.word	0x0800cf99
 800cf8c:	0800cf99 	.word	0x0800cf99
 800cf90:	0800d00d 	.word	0x0800d00d
 800cf94:	0800d021 	.word	0x0800d021
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf9e:	f043 0301 	orr.w	r3, r3, #1
 800cfa2:	b2da      	uxtb	r2, r3
 800cfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cfaa:	68ba      	ldr	r2, [r7, #8]
 800cfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfae:	699b      	ldr	r3, [r3, #24]
 800cfb0:	18d1      	adds	r1, r2, r3
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfb8:	f7ff ff5c 	bl	800ce74 <prvInsertTimerInActiveList>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d069      	beq.n	800d096 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc4:	6a1b      	ldr	r3, [r3, #32]
 800cfc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cfca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfd0:	f003 0304 	and.w	r3, r3, #4
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d05e      	beq.n	800d096 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cfd8:	68ba      	ldr	r2, [r7, #8]
 800cfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfdc:	699b      	ldr	r3, [r3, #24]
 800cfde:	441a      	add	r2, r3
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	9300      	str	r3, [sp, #0]
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	2100      	movs	r1, #0
 800cfe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfea:	f7ff fe05 	bl	800cbf8 <xTimerGenericCommand>
 800cfee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cff0:	6a3b      	ldr	r3, [r7, #32]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d14f      	bne.n	800d096 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffa:	f383 8811 	msr	BASEPRI, r3
 800cffe:	f3bf 8f6f 	isb	sy
 800d002:	f3bf 8f4f 	dsb	sy
 800d006:	61bb      	str	r3, [r7, #24]
}
 800d008:	bf00      	nop
 800d00a:	e7fe      	b.n	800d00a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d00e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d012:	f023 0301 	bic.w	r3, r3, #1
 800d016:	b2da      	uxtb	r2, r3
 800d018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d01e:	e03a      	b.n	800d096 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d022:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d026:	f043 0301 	orr.w	r3, r3, #1
 800d02a:	b2da      	uxtb	r2, r3
 800d02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d032:	68ba      	ldr	r2, [r7, #8]
 800d034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d036:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03a:	699b      	ldr	r3, [r3, #24]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d10a      	bne.n	800d056 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d044:	f383 8811 	msr	BASEPRI, r3
 800d048:	f3bf 8f6f 	isb	sy
 800d04c:	f3bf 8f4f 	dsb	sy
 800d050:	617b      	str	r3, [r7, #20]
}
 800d052:	bf00      	nop
 800d054:	e7fe      	b.n	800d054 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d058:	699a      	ldr	r2, [r3, #24]
 800d05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05c:	18d1      	adds	r1, r2, r3
 800d05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d064:	f7ff ff06 	bl	800ce74 <prvInsertTimerInActiveList>
					break;
 800d068:	e015      	b.n	800d096 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d070:	f003 0302 	and.w	r3, r3, #2
 800d074:	2b00      	cmp	r3, #0
 800d076:	d103      	bne.n	800d080 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d07a:	f000 fbe1 	bl	800d840 <vPortFree>
 800d07e:	e00a      	b.n	800d096 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d082:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d086:	f023 0301 	bic.w	r3, r3, #1
 800d08a:	b2da      	uxtb	r2, r3
 800d08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d092:	e000      	b.n	800d096 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d094:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d096:	4b08      	ldr	r3, [pc, #32]	; (800d0b8 <prvProcessReceivedCommands+0x1c0>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	1d39      	adds	r1, r7, #4
 800d09c:	2200      	movs	r2, #0
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7fe fc16 	bl	800b8d0 <xQueueReceive>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	f47f af2a 	bne.w	800cf00 <prvProcessReceivedCommands+0x8>
	}
}
 800d0ac:	bf00      	nop
 800d0ae:	bf00      	nop
 800d0b0:	3730      	adds	r7, #48	; 0x30
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
 800d0b6:	bf00      	nop
 800d0b8:	2000152c 	.word	0x2000152c

0800d0bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b088      	sub	sp, #32
 800d0c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d0c2:	e048      	b.n	800d156 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d0c4:	4b2d      	ldr	r3, [pc, #180]	; (800d17c <prvSwitchTimerLists+0xc0>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	68db      	ldr	r3, [r3, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0ce:	4b2b      	ldr	r3, [pc, #172]	; (800d17c <prvSwitchTimerLists+0xc0>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	68db      	ldr	r3, [r3, #12]
 800d0d4:	68db      	ldr	r3, [r3, #12]
 800d0d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	3304      	adds	r3, #4
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7fe f92f 	bl	800b340 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	6a1b      	ldr	r3, [r3, #32]
 800d0e6:	68f8      	ldr	r0, [r7, #12]
 800d0e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0f0:	f003 0304 	and.w	r3, r3, #4
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d02e      	beq.n	800d156 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	699b      	ldr	r3, [r3, #24]
 800d0fc:	693a      	ldr	r2, [r7, #16]
 800d0fe:	4413      	add	r3, r2
 800d100:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d102:	68ba      	ldr	r2, [r7, #8]
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	429a      	cmp	r2, r3
 800d108:	d90e      	bls.n	800d128 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	68ba      	ldr	r2, [r7, #8]
 800d10e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	68fa      	ldr	r2, [r7, #12]
 800d114:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d116:	4b19      	ldr	r3, [pc, #100]	; (800d17c <prvSwitchTimerLists+0xc0>)
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	3304      	adds	r3, #4
 800d11e:	4619      	mov	r1, r3
 800d120:	4610      	mov	r0, r2
 800d122:	f7fe f8d4 	bl	800b2ce <vListInsert>
 800d126:	e016      	b.n	800d156 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d128:	2300      	movs	r3, #0
 800d12a:	9300      	str	r3, [sp, #0]
 800d12c:	2300      	movs	r3, #0
 800d12e:	693a      	ldr	r2, [r7, #16]
 800d130:	2100      	movs	r1, #0
 800d132:	68f8      	ldr	r0, [r7, #12]
 800d134:	f7ff fd60 	bl	800cbf8 <xTimerGenericCommand>
 800d138:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d10a      	bne.n	800d156 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d144:	f383 8811 	msr	BASEPRI, r3
 800d148:	f3bf 8f6f 	isb	sy
 800d14c:	f3bf 8f4f 	dsb	sy
 800d150:	603b      	str	r3, [r7, #0]
}
 800d152:	bf00      	nop
 800d154:	e7fe      	b.n	800d154 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d156:	4b09      	ldr	r3, [pc, #36]	; (800d17c <prvSwitchTimerLists+0xc0>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d1b1      	bne.n	800d0c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d160:	4b06      	ldr	r3, [pc, #24]	; (800d17c <prvSwitchTimerLists+0xc0>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d166:	4b06      	ldr	r3, [pc, #24]	; (800d180 <prvSwitchTimerLists+0xc4>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a04      	ldr	r2, [pc, #16]	; (800d17c <prvSwitchTimerLists+0xc0>)
 800d16c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d16e:	4a04      	ldr	r2, [pc, #16]	; (800d180 <prvSwitchTimerLists+0xc4>)
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	6013      	str	r3, [r2, #0]
}
 800d174:	bf00      	nop
 800d176:	3718      	adds	r7, #24
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	20001524 	.word	0x20001524
 800d180:	20001528 	.word	0x20001528

0800d184 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b082      	sub	sp, #8
 800d188:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d18a:	f000 f96b 	bl	800d464 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d18e:	4b15      	ldr	r3, [pc, #84]	; (800d1e4 <prvCheckForValidListAndQueue+0x60>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d120      	bne.n	800d1d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d196:	4814      	ldr	r0, [pc, #80]	; (800d1e8 <prvCheckForValidListAndQueue+0x64>)
 800d198:	f7fe f848 	bl	800b22c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d19c:	4813      	ldr	r0, [pc, #76]	; (800d1ec <prvCheckForValidListAndQueue+0x68>)
 800d19e:	f7fe f845 	bl	800b22c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d1a2:	4b13      	ldr	r3, [pc, #76]	; (800d1f0 <prvCheckForValidListAndQueue+0x6c>)
 800d1a4:	4a10      	ldr	r2, [pc, #64]	; (800d1e8 <prvCheckForValidListAndQueue+0x64>)
 800d1a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d1a8:	4b12      	ldr	r3, [pc, #72]	; (800d1f4 <prvCheckForValidListAndQueue+0x70>)
 800d1aa:	4a10      	ldr	r2, [pc, #64]	; (800d1ec <prvCheckForValidListAndQueue+0x68>)
 800d1ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	9300      	str	r3, [sp, #0]
 800d1b2:	4b11      	ldr	r3, [pc, #68]	; (800d1f8 <prvCheckForValidListAndQueue+0x74>)
 800d1b4:	4a11      	ldr	r2, [pc, #68]	; (800d1fc <prvCheckForValidListAndQueue+0x78>)
 800d1b6:	2110      	movs	r1, #16
 800d1b8:	200a      	movs	r0, #10
 800d1ba:	f7fe f953 	bl	800b464 <xQueueGenericCreateStatic>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	4a08      	ldr	r2, [pc, #32]	; (800d1e4 <prvCheckForValidListAndQueue+0x60>)
 800d1c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d1c4:	4b07      	ldr	r3, [pc, #28]	; (800d1e4 <prvCheckForValidListAndQueue+0x60>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d005      	beq.n	800d1d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d1cc:	4b05      	ldr	r3, [pc, #20]	; (800d1e4 <prvCheckForValidListAndQueue+0x60>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	490b      	ldr	r1, [pc, #44]	; (800d200 <prvCheckForValidListAndQueue+0x7c>)
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7fe fd6c 	bl	800bcb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d1d8:	f000 f974 	bl	800d4c4 <vPortExitCritical>
}
 800d1dc:	bf00      	nop
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	2000152c 	.word	0x2000152c
 800d1e8:	200014fc 	.word	0x200014fc
 800d1ec:	20001510 	.word	0x20001510
 800d1f0:	20001524 	.word	0x20001524
 800d1f4:	20001528 	.word	0x20001528
 800d1f8:	200015d8 	.word	0x200015d8
 800d1fc:	20001538 	.word	0x20001538
 800d200:	0800db28 	.word	0x0800db28

0800d204 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d204:	b480      	push	{r7}
 800d206:	b085      	sub	sp, #20
 800d208:	af00      	add	r7, sp, #0
 800d20a:	60f8      	str	r0, [r7, #12]
 800d20c:	60b9      	str	r1, [r7, #8]
 800d20e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	3b04      	subs	r3, #4
 800d214:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d21c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	3b04      	subs	r3, #4
 800d222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	f023 0201 	bic.w	r2, r3, #1
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	3b04      	subs	r3, #4
 800d232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d234:	4a0c      	ldr	r2, [pc, #48]	; (800d268 <pxPortInitialiseStack+0x64>)
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	3b14      	subs	r3, #20
 800d23e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d240:	687a      	ldr	r2, [r7, #4]
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	3b04      	subs	r3, #4
 800d24a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	f06f 0202 	mvn.w	r2, #2
 800d252:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	3b20      	subs	r3, #32
 800d258:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d25a:	68fb      	ldr	r3, [r7, #12]
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3714      	adds	r7, #20
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr
 800d268:	0800d26d 	.word	0x0800d26d

0800d26c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d26c:	b480      	push	{r7}
 800d26e:	b085      	sub	sp, #20
 800d270:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d272:	2300      	movs	r3, #0
 800d274:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d276:	4b12      	ldr	r3, [pc, #72]	; (800d2c0 <prvTaskExitError+0x54>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d27e:	d00a      	beq.n	800d296 <prvTaskExitError+0x2a>
	__asm volatile
 800d280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d284:	f383 8811 	msr	BASEPRI, r3
 800d288:	f3bf 8f6f 	isb	sy
 800d28c:	f3bf 8f4f 	dsb	sy
 800d290:	60fb      	str	r3, [r7, #12]
}
 800d292:	bf00      	nop
 800d294:	e7fe      	b.n	800d294 <prvTaskExitError+0x28>
	__asm volatile
 800d296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29a:	f383 8811 	msr	BASEPRI, r3
 800d29e:	f3bf 8f6f 	isb	sy
 800d2a2:	f3bf 8f4f 	dsb	sy
 800d2a6:	60bb      	str	r3, [r7, #8]
}
 800d2a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d2aa:	bf00      	nop
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d0fc      	beq.n	800d2ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d2b2:	bf00      	nop
 800d2b4:	bf00      	nop
 800d2b6:	3714      	adds	r7, #20
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr
 800d2c0:	2000000c 	.word	0x2000000c
	...

0800d2d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d2d0:	4b07      	ldr	r3, [pc, #28]	; (800d2f0 <pxCurrentTCBConst2>)
 800d2d2:	6819      	ldr	r1, [r3, #0]
 800d2d4:	6808      	ldr	r0, [r1, #0]
 800d2d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2da:	f380 8809 	msr	PSP, r0
 800d2de:	f3bf 8f6f 	isb	sy
 800d2e2:	f04f 0000 	mov.w	r0, #0
 800d2e6:	f380 8811 	msr	BASEPRI, r0
 800d2ea:	4770      	bx	lr
 800d2ec:	f3af 8000 	nop.w

0800d2f0 <pxCurrentTCBConst2>:
 800d2f0:	20000ffc 	.word	0x20000ffc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d2f4:	bf00      	nop
 800d2f6:	bf00      	nop

0800d2f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d2f8:	4808      	ldr	r0, [pc, #32]	; (800d31c <prvPortStartFirstTask+0x24>)
 800d2fa:	6800      	ldr	r0, [r0, #0]
 800d2fc:	6800      	ldr	r0, [r0, #0]
 800d2fe:	f380 8808 	msr	MSP, r0
 800d302:	f04f 0000 	mov.w	r0, #0
 800d306:	f380 8814 	msr	CONTROL, r0
 800d30a:	b662      	cpsie	i
 800d30c:	b661      	cpsie	f
 800d30e:	f3bf 8f4f 	dsb	sy
 800d312:	f3bf 8f6f 	isb	sy
 800d316:	df00      	svc	0
 800d318:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d31a:	bf00      	nop
 800d31c:	e000ed08 	.word	0xe000ed08

0800d320 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b086      	sub	sp, #24
 800d324:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d326:	4b46      	ldr	r3, [pc, #280]	; (800d440 <xPortStartScheduler+0x120>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4a46      	ldr	r2, [pc, #280]	; (800d444 <xPortStartScheduler+0x124>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d10a      	bne.n	800d346 <xPortStartScheduler+0x26>
	__asm volatile
 800d330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d334:	f383 8811 	msr	BASEPRI, r3
 800d338:	f3bf 8f6f 	isb	sy
 800d33c:	f3bf 8f4f 	dsb	sy
 800d340:	613b      	str	r3, [r7, #16]
}
 800d342:	bf00      	nop
 800d344:	e7fe      	b.n	800d344 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d346:	4b3e      	ldr	r3, [pc, #248]	; (800d440 <xPortStartScheduler+0x120>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4a3f      	ldr	r2, [pc, #252]	; (800d448 <xPortStartScheduler+0x128>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d10a      	bne.n	800d366 <xPortStartScheduler+0x46>
	__asm volatile
 800d350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d354:	f383 8811 	msr	BASEPRI, r3
 800d358:	f3bf 8f6f 	isb	sy
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	60fb      	str	r3, [r7, #12]
}
 800d362:	bf00      	nop
 800d364:	e7fe      	b.n	800d364 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d366:	4b39      	ldr	r3, [pc, #228]	; (800d44c <xPortStartScheduler+0x12c>)
 800d368:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	781b      	ldrb	r3, [r3, #0]
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	22ff      	movs	r2, #255	; 0xff
 800d376:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	b2db      	uxtb	r3, r3
 800d37e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d380:	78fb      	ldrb	r3, [r7, #3]
 800d382:	b2db      	uxtb	r3, r3
 800d384:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d388:	b2da      	uxtb	r2, r3
 800d38a:	4b31      	ldr	r3, [pc, #196]	; (800d450 <xPortStartScheduler+0x130>)
 800d38c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d38e:	4b31      	ldr	r3, [pc, #196]	; (800d454 <xPortStartScheduler+0x134>)
 800d390:	2207      	movs	r2, #7
 800d392:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d394:	e009      	b.n	800d3aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d396:	4b2f      	ldr	r3, [pc, #188]	; (800d454 <xPortStartScheduler+0x134>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	3b01      	subs	r3, #1
 800d39c:	4a2d      	ldr	r2, [pc, #180]	; (800d454 <xPortStartScheduler+0x134>)
 800d39e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d3a0:	78fb      	ldrb	r3, [r7, #3]
 800d3a2:	b2db      	uxtb	r3, r3
 800d3a4:	005b      	lsls	r3, r3, #1
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d3aa:	78fb      	ldrb	r3, [r7, #3]
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3b2:	2b80      	cmp	r3, #128	; 0x80
 800d3b4:	d0ef      	beq.n	800d396 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d3b6:	4b27      	ldr	r3, [pc, #156]	; (800d454 <xPortStartScheduler+0x134>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f1c3 0307 	rsb	r3, r3, #7
 800d3be:	2b04      	cmp	r3, #4
 800d3c0:	d00a      	beq.n	800d3d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c6:	f383 8811 	msr	BASEPRI, r3
 800d3ca:	f3bf 8f6f 	isb	sy
 800d3ce:	f3bf 8f4f 	dsb	sy
 800d3d2:	60bb      	str	r3, [r7, #8]
}
 800d3d4:	bf00      	nop
 800d3d6:	e7fe      	b.n	800d3d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d3d8:	4b1e      	ldr	r3, [pc, #120]	; (800d454 <xPortStartScheduler+0x134>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	021b      	lsls	r3, r3, #8
 800d3de:	4a1d      	ldr	r2, [pc, #116]	; (800d454 <xPortStartScheduler+0x134>)
 800d3e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d3e2:	4b1c      	ldr	r3, [pc, #112]	; (800d454 <xPortStartScheduler+0x134>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d3ea:	4a1a      	ldr	r2, [pc, #104]	; (800d454 <xPortStartScheduler+0x134>)
 800d3ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	b2da      	uxtb	r2, r3
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d3f6:	4b18      	ldr	r3, [pc, #96]	; (800d458 <xPortStartScheduler+0x138>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4a17      	ldr	r2, [pc, #92]	; (800d458 <xPortStartScheduler+0x138>)
 800d3fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d400:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d402:	4b15      	ldr	r3, [pc, #84]	; (800d458 <xPortStartScheduler+0x138>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4a14      	ldr	r2, [pc, #80]	; (800d458 <xPortStartScheduler+0x138>)
 800d408:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d40c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d40e:	f000 f8dd 	bl	800d5cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d412:	4b12      	ldr	r3, [pc, #72]	; (800d45c <xPortStartScheduler+0x13c>)
 800d414:	2200      	movs	r2, #0
 800d416:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d418:	f000 f8fc 	bl	800d614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d41c:	4b10      	ldr	r3, [pc, #64]	; (800d460 <xPortStartScheduler+0x140>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a0f      	ldr	r2, [pc, #60]	; (800d460 <xPortStartScheduler+0x140>)
 800d422:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d426:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d428:	f7ff ff66 	bl	800d2f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d42c:	f7ff f850 	bl	800c4d0 <vTaskSwitchContext>
	prvTaskExitError();
 800d430:	f7ff ff1c 	bl	800d26c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d434:	2300      	movs	r3, #0
}
 800d436:	4618      	mov	r0, r3
 800d438:	3718      	adds	r7, #24
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	e000ed00 	.word	0xe000ed00
 800d444:	410fc271 	.word	0x410fc271
 800d448:	410fc270 	.word	0x410fc270
 800d44c:	e000e400 	.word	0xe000e400
 800d450:	20001628 	.word	0x20001628
 800d454:	2000162c 	.word	0x2000162c
 800d458:	e000ed20 	.word	0xe000ed20
 800d45c:	2000000c 	.word	0x2000000c
 800d460:	e000ef34 	.word	0xe000ef34

0800d464 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
	__asm volatile
 800d46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46e:	f383 8811 	msr	BASEPRI, r3
 800d472:	f3bf 8f6f 	isb	sy
 800d476:	f3bf 8f4f 	dsb	sy
 800d47a:	607b      	str	r3, [r7, #4]
}
 800d47c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d47e:	4b0f      	ldr	r3, [pc, #60]	; (800d4bc <vPortEnterCritical+0x58>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	3301      	adds	r3, #1
 800d484:	4a0d      	ldr	r2, [pc, #52]	; (800d4bc <vPortEnterCritical+0x58>)
 800d486:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d488:	4b0c      	ldr	r3, [pc, #48]	; (800d4bc <vPortEnterCritical+0x58>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	2b01      	cmp	r3, #1
 800d48e:	d10f      	bne.n	800d4b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d490:	4b0b      	ldr	r3, [pc, #44]	; (800d4c0 <vPortEnterCritical+0x5c>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	b2db      	uxtb	r3, r3
 800d496:	2b00      	cmp	r3, #0
 800d498:	d00a      	beq.n	800d4b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49e:	f383 8811 	msr	BASEPRI, r3
 800d4a2:	f3bf 8f6f 	isb	sy
 800d4a6:	f3bf 8f4f 	dsb	sy
 800d4aa:	603b      	str	r3, [r7, #0]
}
 800d4ac:	bf00      	nop
 800d4ae:	e7fe      	b.n	800d4ae <vPortEnterCritical+0x4a>
	}
}
 800d4b0:	bf00      	nop
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr
 800d4bc:	2000000c 	.word	0x2000000c
 800d4c0:	e000ed04 	.word	0xe000ed04

0800d4c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d4ca:	4b12      	ldr	r3, [pc, #72]	; (800d514 <vPortExitCritical+0x50>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d10a      	bne.n	800d4e8 <vPortExitCritical+0x24>
	__asm volatile
 800d4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d6:	f383 8811 	msr	BASEPRI, r3
 800d4da:	f3bf 8f6f 	isb	sy
 800d4de:	f3bf 8f4f 	dsb	sy
 800d4e2:	607b      	str	r3, [r7, #4]
}
 800d4e4:	bf00      	nop
 800d4e6:	e7fe      	b.n	800d4e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d4e8:	4b0a      	ldr	r3, [pc, #40]	; (800d514 <vPortExitCritical+0x50>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	3b01      	subs	r3, #1
 800d4ee:	4a09      	ldr	r2, [pc, #36]	; (800d514 <vPortExitCritical+0x50>)
 800d4f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d4f2:	4b08      	ldr	r3, [pc, #32]	; (800d514 <vPortExitCritical+0x50>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d105      	bne.n	800d506 <vPortExitCritical+0x42>
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	f383 8811 	msr	BASEPRI, r3
}
 800d504:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d506:	bf00      	nop
 800d508:	370c      	adds	r7, #12
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr
 800d512:	bf00      	nop
 800d514:	2000000c 	.word	0x2000000c
	...

0800d520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d520:	f3ef 8009 	mrs	r0, PSP
 800d524:	f3bf 8f6f 	isb	sy
 800d528:	4b15      	ldr	r3, [pc, #84]	; (800d580 <pxCurrentTCBConst>)
 800d52a:	681a      	ldr	r2, [r3, #0]
 800d52c:	f01e 0f10 	tst.w	lr, #16
 800d530:	bf08      	it	eq
 800d532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d53a:	6010      	str	r0, [r2, #0]
 800d53c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d540:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d544:	f380 8811 	msr	BASEPRI, r0
 800d548:	f3bf 8f4f 	dsb	sy
 800d54c:	f3bf 8f6f 	isb	sy
 800d550:	f7fe ffbe 	bl	800c4d0 <vTaskSwitchContext>
 800d554:	f04f 0000 	mov.w	r0, #0
 800d558:	f380 8811 	msr	BASEPRI, r0
 800d55c:	bc09      	pop	{r0, r3}
 800d55e:	6819      	ldr	r1, [r3, #0]
 800d560:	6808      	ldr	r0, [r1, #0]
 800d562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d566:	f01e 0f10 	tst.w	lr, #16
 800d56a:	bf08      	it	eq
 800d56c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d570:	f380 8809 	msr	PSP, r0
 800d574:	f3bf 8f6f 	isb	sy
 800d578:	4770      	bx	lr
 800d57a:	bf00      	nop
 800d57c:	f3af 8000 	nop.w

0800d580 <pxCurrentTCBConst>:
 800d580:	20000ffc 	.word	0x20000ffc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d584:	bf00      	nop
 800d586:	bf00      	nop

0800d588 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
	__asm volatile
 800d58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d592:	f383 8811 	msr	BASEPRI, r3
 800d596:	f3bf 8f6f 	isb	sy
 800d59a:	f3bf 8f4f 	dsb	sy
 800d59e:	607b      	str	r3, [r7, #4]
}
 800d5a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d5a2:	f7fe fedb 	bl	800c35c <xTaskIncrementTick>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d003      	beq.n	800d5b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d5ac:	4b06      	ldr	r3, [pc, #24]	; (800d5c8 <xPortSysTickHandler+0x40>)
 800d5ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5b2:	601a      	str	r2, [r3, #0]
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	f383 8811 	msr	BASEPRI, r3
}
 800d5be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d5c0:	bf00      	nop
 800d5c2:	3708      	adds	r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	e000ed04 	.word	0xe000ed04

0800d5cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d5d0:	4b0b      	ldr	r3, [pc, #44]	; (800d600 <vPortSetupTimerInterrupt+0x34>)
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d5d6:	4b0b      	ldr	r3, [pc, #44]	; (800d604 <vPortSetupTimerInterrupt+0x38>)
 800d5d8:	2200      	movs	r2, #0
 800d5da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d5dc:	4b0a      	ldr	r3, [pc, #40]	; (800d608 <vPortSetupTimerInterrupt+0x3c>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a0a      	ldr	r2, [pc, #40]	; (800d60c <vPortSetupTimerInterrupt+0x40>)
 800d5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d5e6:	099b      	lsrs	r3, r3, #6
 800d5e8:	4a09      	ldr	r2, [pc, #36]	; (800d610 <vPortSetupTimerInterrupt+0x44>)
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d5ee:	4b04      	ldr	r3, [pc, #16]	; (800d600 <vPortSetupTimerInterrupt+0x34>)
 800d5f0:	2207      	movs	r2, #7
 800d5f2:	601a      	str	r2, [r3, #0]
}
 800d5f4:	bf00      	nop
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	e000e010 	.word	0xe000e010
 800d604:	e000e018 	.word	0xe000e018
 800d608:	20000000 	.word	0x20000000
 800d60c:	10624dd3 	.word	0x10624dd3
 800d610:	e000e014 	.word	0xe000e014

0800d614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d624 <vPortEnableVFP+0x10>
 800d618:	6801      	ldr	r1, [r0, #0]
 800d61a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d61e:	6001      	str	r1, [r0, #0]
 800d620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d622:	bf00      	nop
 800d624:	e000ed88 	.word	0xe000ed88

0800d628 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d628:	b480      	push	{r7}
 800d62a:	b085      	sub	sp, #20
 800d62c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d62e:	f3ef 8305 	mrs	r3, IPSR
 800d632:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2b0f      	cmp	r3, #15
 800d638:	d914      	bls.n	800d664 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d63a:	4a17      	ldr	r2, [pc, #92]	; (800d698 <vPortValidateInterruptPriority+0x70>)
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	4413      	add	r3, r2
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d644:	4b15      	ldr	r3, [pc, #84]	; (800d69c <vPortValidateInterruptPriority+0x74>)
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	7afa      	ldrb	r2, [r7, #11]
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d20a      	bcs.n	800d664 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d652:	f383 8811 	msr	BASEPRI, r3
 800d656:	f3bf 8f6f 	isb	sy
 800d65a:	f3bf 8f4f 	dsb	sy
 800d65e:	607b      	str	r3, [r7, #4]
}
 800d660:	bf00      	nop
 800d662:	e7fe      	b.n	800d662 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d664:	4b0e      	ldr	r3, [pc, #56]	; (800d6a0 <vPortValidateInterruptPriority+0x78>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d66c:	4b0d      	ldr	r3, [pc, #52]	; (800d6a4 <vPortValidateInterruptPriority+0x7c>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	429a      	cmp	r2, r3
 800d672:	d90a      	bls.n	800d68a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d678:	f383 8811 	msr	BASEPRI, r3
 800d67c:	f3bf 8f6f 	isb	sy
 800d680:	f3bf 8f4f 	dsb	sy
 800d684:	603b      	str	r3, [r7, #0]
}
 800d686:	bf00      	nop
 800d688:	e7fe      	b.n	800d688 <vPortValidateInterruptPriority+0x60>
	}
 800d68a:	bf00      	nop
 800d68c:	3714      	adds	r7, #20
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr
 800d696:	bf00      	nop
 800d698:	e000e3f0 	.word	0xe000e3f0
 800d69c:	20001628 	.word	0x20001628
 800d6a0:	e000ed0c 	.word	0xe000ed0c
 800d6a4:	2000162c 	.word	0x2000162c

0800d6a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b08a      	sub	sp, #40	; 0x28
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d6b4:	f7fe fd96 	bl	800c1e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d6b8:	4b5b      	ldr	r3, [pc, #364]	; (800d828 <pvPortMalloc+0x180>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d101      	bne.n	800d6c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d6c0:	f000 f920 	bl	800d904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d6c4:	4b59      	ldr	r3, [pc, #356]	; (800d82c <pvPortMalloc+0x184>)
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	4013      	ands	r3, r2
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	f040 8093 	bne.w	800d7f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d01d      	beq.n	800d714 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d6d8:	2208      	movs	r2, #8
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	4413      	add	r3, r2
 800d6de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f003 0307 	and.w	r3, r3, #7
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d014      	beq.n	800d714 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f023 0307 	bic.w	r3, r3, #7
 800d6f0:	3308      	adds	r3, #8
 800d6f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f003 0307 	and.w	r3, r3, #7
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d00a      	beq.n	800d714 <pvPortMalloc+0x6c>
	__asm volatile
 800d6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d702:	f383 8811 	msr	BASEPRI, r3
 800d706:	f3bf 8f6f 	isb	sy
 800d70a:	f3bf 8f4f 	dsb	sy
 800d70e:	617b      	str	r3, [r7, #20]
}
 800d710:	bf00      	nop
 800d712:	e7fe      	b.n	800d712 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d06e      	beq.n	800d7f8 <pvPortMalloc+0x150>
 800d71a:	4b45      	ldr	r3, [pc, #276]	; (800d830 <pvPortMalloc+0x188>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	429a      	cmp	r2, r3
 800d722:	d869      	bhi.n	800d7f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d724:	4b43      	ldr	r3, [pc, #268]	; (800d834 <pvPortMalloc+0x18c>)
 800d726:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d728:	4b42      	ldr	r3, [pc, #264]	; (800d834 <pvPortMalloc+0x18c>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d72e:	e004      	b.n	800d73a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d732:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	429a      	cmp	r2, r3
 800d742:	d903      	bls.n	800d74c <pvPortMalloc+0xa4>
 800d744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d1f1      	bne.n	800d730 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d74c:	4b36      	ldr	r3, [pc, #216]	; (800d828 <pvPortMalloc+0x180>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d752:	429a      	cmp	r2, r3
 800d754:	d050      	beq.n	800d7f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d756:	6a3b      	ldr	r3, [r7, #32]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	2208      	movs	r2, #8
 800d75c:	4413      	add	r3, r2
 800d75e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d762:	681a      	ldr	r2, [r3, #0]
 800d764:	6a3b      	ldr	r3, [r7, #32]
 800d766:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76a:	685a      	ldr	r2, [r3, #4]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	1ad2      	subs	r2, r2, r3
 800d770:	2308      	movs	r3, #8
 800d772:	005b      	lsls	r3, r3, #1
 800d774:	429a      	cmp	r2, r3
 800d776:	d91f      	bls.n	800d7b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	4413      	add	r3, r2
 800d77e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	f003 0307 	and.w	r3, r3, #7
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00a      	beq.n	800d7a0 <pvPortMalloc+0xf8>
	__asm volatile
 800d78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d78e:	f383 8811 	msr	BASEPRI, r3
 800d792:	f3bf 8f6f 	isb	sy
 800d796:	f3bf 8f4f 	dsb	sy
 800d79a:	613b      	str	r3, [r7, #16]
}
 800d79c:	bf00      	nop
 800d79e:	e7fe      	b.n	800d79e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a2:	685a      	ldr	r2, [r3, #4]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	1ad2      	subs	r2, r2, r3
 800d7a8:	69bb      	ldr	r3, [r7, #24]
 800d7aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d7b2:	69b8      	ldr	r0, [r7, #24]
 800d7b4:	f000 f908 	bl	800d9c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d7b8:	4b1d      	ldr	r3, [pc, #116]	; (800d830 <pvPortMalloc+0x188>)
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7be:	685b      	ldr	r3, [r3, #4]
 800d7c0:	1ad3      	subs	r3, r2, r3
 800d7c2:	4a1b      	ldr	r2, [pc, #108]	; (800d830 <pvPortMalloc+0x188>)
 800d7c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d7c6:	4b1a      	ldr	r3, [pc, #104]	; (800d830 <pvPortMalloc+0x188>)
 800d7c8:	681a      	ldr	r2, [r3, #0]
 800d7ca:	4b1b      	ldr	r3, [pc, #108]	; (800d838 <pvPortMalloc+0x190>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d203      	bcs.n	800d7da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d7d2:	4b17      	ldr	r3, [pc, #92]	; (800d830 <pvPortMalloc+0x188>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	4a18      	ldr	r2, [pc, #96]	; (800d838 <pvPortMalloc+0x190>)
 800d7d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7dc:	685a      	ldr	r2, [r3, #4]
 800d7de:	4b13      	ldr	r3, [pc, #76]	; (800d82c <pvPortMalloc+0x184>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	431a      	orrs	r2, r3
 800d7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d7ee:	4b13      	ldr	r3, [pc, #76]	; (800d83c <pvPortMalloc+0x194>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	4a11      	ldr	r2, [pc, #68]	; (800d83c <pvPortMalloc+0x194>)
 800d7f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d7f8:	f7fe fd02 	bl	800c200 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7fc:	69fb      	ldr	r3, [r7, #28]
 800d7fe:	f003 0307 	and.w	r3, r3, #7
 800d802:	2b00      	cmp	r3, #0
 800d804:	d00a      	beq.n	800d81c <pvPortMalloc+0x174>
	__asm volatile
 800d806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d80a:	f383 8811 	msr	BASEPRI, r3
 800d80e:	f3bf 8f6f 	isb	sy
 800d812:	f3bf 8f4f 	dsb	sy
 800d816:	60fb      	str	r3, [r7, #12]
}
 800d818:	bf00      	nop
 800d81a:	e7fe      	b.n	800d81a <pvPortMalloc+0x172>
	return pvReturn;
 800d81c:	69fb      	ldr	r3, [r7, #28]
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3728      	adds	r7, #40	; 0x28
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	200021f0 	.word	0x200021f0
 800d82c:	20002204 	.word	0x20002204
 800d830:	200021f4 	.word	0x200021f4
 800d834:	200021e8 	.word	0x200021e8
 800d838:	200021f8 	.word	0x200021f8
 800d83c:	200021fc 	.word	0x200021fc

0800d840 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b086      	sub	sp, #24
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d04d      	beq.n	800d8ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d852:	2308      	movs	r3, #8
 800d854:	425b      	negs	r3, r3
 800d856:	697a      	ldr	r2, [r7, #20]
 800d858:	4413      	add	r3, r2
 800d85a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	685a      	ldr	r2, [r3, #4]
 800d864:	4b24      	ldr	r3, [pc, #144]	; (800d8f8 <vPortFree+0xb8>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	4013      	ands	r3, r2
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d10a      	bne.n	800d884 <vPortFree+0x44>
	__asm volatile
 800d86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d872:	f383 8811 	msr	BASEPRI, r3
 800d876:	f3bf 8f6f 	isb	sy
 800d87a:	f3bf 8f4f 	dsb	sy
 800d87e:	60fb      	str	r3, [r7, #12]
}
 800d880:	bf00      	nop
 800d882:	e7fe      	b.n	800d882 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d00a      	beq.n	800d8a2 <vPortFree+0x62>
	__asm volatile
 800d88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d890:	f383 8811 	msr	BASEPRI, r3
 800d894:	f3bf 8f6f 	isb	sy
 800d898:	f3bf 8f4f 	dsb	sy
 800d89c:	60bb      	str	r3, [r7, #8]
}
 800d89e:	bf00      	nop
 800d8a0:	e7fe      	b.n	800d8a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	685a      	ldr	r2, [r3, #4]
 800d8a6:	4b14      	ldr	r3, [pc, #80]	; (800d8f8 <vPortFree+0xb8>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4013      	ands	r3, r2
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d01e      	beq.n	800d8ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d11a      	bne.n	800d8ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	685a      	ldr	r2, [r3, #4]
 800d8bc:	4b0e      	ldr	r3, [pc, #56]	; (800d8f8 <vPortFree+0xb8>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	43db      	mvns	r3, r3
 800d8c2:	401a      	ands	r2, r3
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d8c8:	f7fe fc8c 	bl	800c1e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	685a      	ldr	r2, [r3, #4]
 800d8d0:	4b0a      	ldr	r3, [pc, #40]	; (800d8fc <vPortFree+0xbc>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	4a09      	ldr	r2, [pc, #36]	; (800d8fc <vPortFree+0xbc>)
 800d8d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d8da:	6938      	ldr	r0, [r7, #16]
 800d8dc:	f000 f874 	bl	800d9c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d8e0:	4b07      	ldr	r3, [pc, #28]	; (800d900 <vPortFree+0xc0>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	4a06      	ldr	r2, [pc, #24]	; (800d900 <vPortFree+0xc0>)
 800d8e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d8ea:	f7fe fc89 	bl	800c200 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d8ee:	bf00      	nop
 800d8f0:	3718      	adds	r7, #24
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	20002204 	.word	0x20002204
 800d8fc:	200021f4 	.word	0x200021f4
 800d900:	20002200 	.word	0x20002200

0800d904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d904:	b480      	push	{r7}
 800d906:	b085      	sub	sp, #20
 800d908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d90a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d90e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d910:	4b27      	ldr	r3, [pc, #156]	; (800d9b0 <prvHeapInit+0xac>)
 800d912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f003 0307 	and.w	r3, r3, #7
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d00c      	beq.n	800d938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	3307      	adds	r3, #7
 800d922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f023 0307 	bic.w	r3, r3, #7
 800d92a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d92c:	68ba      	ldr	r2, [r7, #8]
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	1ad3      	subs	r3, r2, r3
 800d932:	4a1f      	ldr	r2, [pc, #124]	; (800d9b0 <prvHeapInit+0xac>)
 800d934:	4413      	add	r3, r2
 800d936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d93c:	4a1d      	ldr	r2, [pc, #116]	; (800d9b4 <prvHeapInit+0xb0>)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d942:	4b1c      	ldr	r3, [pc, #112]	; (800d9b4 <prvHeapInit+0xb0>)
 800d944:	2200      	movs	r2, #0
 800d946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	68ba      	ldr	r2, [r7, #8]
 800d94c:	4413      	add	r3, r2
 800d94e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d950:	2208      	movs	r2, #8
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	1a9b      	subs	r3, r3, r2
 800d956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f023 0307 	bic.w	r3, r3, #7
 800d95e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	4a15      	ldr	r2, [pc, #84]	; (800d9b8 <prvHeapInit+0xb4>)
 800d964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d966:	4b14      	ldr	r3, [pc, #80]	; (800d9b8 <prvHeapInit+0xb4>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	2200      	movs	r2, #0
 800d96c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d96e:	4b12      	ldr	r3, [pc, #72]	; (800d9b8 <prvHeapInit+0xb4>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	2200      	movs	r2, #0
 800d974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	68fa      	ldr	r2, [r7, #12]
 800d97e:	1ad2      	subs	r2, r2, r3
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d984:	4b0c      	ldr	r3, [pc, #48]	; (800d9b8 <prvHeapInit+0xb4>)
 800d986:	681a      	ldr	r2, [r3, #0]
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	685b      	ldr	r3, [r3, #4]
 800d990:	4a0a      	ldr	r2, [pc, #40]	; (800d9bc <prvHeapInit+0xb8>)
 800d992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	4a09      	ldr	r2, [pc, #36]	; (800d9c0 <prvHeapInit+0xbc>)
 800d99a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d99c:	4b09      	ldr	r3, [pc, #36]	; (800d9c4 <prvHeapInit+0xc0>)
 800d99e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d9a2:	601a      	str	r2, [r3, #0]
}
 800d9a4:	bf00      	nop
 800d9a6:	3714      	adds	r7, #20
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr
 800d9b0:	20001630 	.word	0x20001630
 800d9b4:	200021e8 	.word	0x200021e8
 800d9b8:	200021f0 	.word	0x200021f0
 800d9bc:	200021f8 	.word	0x200021f8
 800d9c0:	200021f4 	.word	0x200021f4
 800d9c4:	20002204 	.word	0x20002204

0800d9c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b085      	sub	sp, #20
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d9d0:	4b28      	ldr	r3, [pc, #160]	; (800da74 <prvInsertBlockIntoFreeList+0xac>)
 800d9d2:	60fb      	str	r3, [r7, #12]
 800d9d4:	e002      	b.n	800d9dc <prvInsertBlockIntoFreeList+0x14>
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	60fb      	str	r3, [r7, #12]
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	687a      	ldr	r2, [r7, #4]
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d8f7      	bhi.n	800d9d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	68ba      	ldr	r2, [r7, #8]
 800d9f0:	4413      	add	r3, r2
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d108      	bne.n	800da0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	685a      	ldr	r2, [r3, #4]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	441a      	add	r2, r3
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	68ba      	ldr	r2, [r7, #8]
 800da14:	441a      	add	r2, r3
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d118      	bne.n	800da50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	681a      	ldr	r2, [r3, #0]
 800da22:	4b15      	ldr	r3, [pc, #84]	; (800da78 <prvInsertBlockIntoFreeList+0xb0>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	429a      	cmp	r2, r3
 800da28:	d00d      	beq.n	800da46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	685a      	ldr	r2, [r3, #4]
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	685b      	ldr	r3, [r3, #4]
 800da34:	441a      	add	r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	601a      	str	r2, [r3, #0]
 800da44:	e008      	b.n	800da58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800da46:	4b0c      	ldr	r3, [pc, #48]	; (800da78 <prvInsertBlockIntoFreeList+0xb0>)
 800da48:	681a      	ldr	r2, [r3, #0]
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	601a      	str	r2, [r3, #0]
 800da4e:	e003      	b.n	800da58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681a      	ldr	r2, [r3, #0]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800da58:	68fa      	ldr	r2, [r7, #12]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d002      	beq.n	800da66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	687a      	ldr	r2, [r7, #4]
 800da64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da66:	bf00      	nop
 800da68:	3714      	adds	r7, #20
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	200021e8 	.word	0x200021e8
 800da78:	200021f0 	.word	0x200021f0

0800da7c <__libc_init_array>:
 800da7c:	b570      	push	{r4, r5, r6, lr}
 800da7e:	4d0d      	ldr	r5, [pc, #52]	; (800dab4 <__libc_init_array+0x38>)
 800da80:	4c0d      	ldr	r4, [pc, #52]	; (800dab8 <__libc_init_array+0x3c>)
 800da82:	1b64      	subs	r4, r4, r5
 800da84:	10a4      	asrs	r4, r4, #2
 800da86:	2600      	movs	r6, #0
 800da88:	42a6      	cmp	r6, r4
 800da8a:	d109      	bne.n	800daa0 <__libc_init_array+0x24>
 800da8c:	4d0b      	ldr	r5, [pc, #44]	; (800dabc <__libc_init_array+0x40>)
 800da8e:	4c0c      	ldr	r4, [pc, #48]	; (800dac0 <__libc_init_array+0x44>)
 800da90:	f000 f82e 	bl	800daf0 <_init>
 800da94:	1b64      	subs	r4, r4, r5
 800da96:	10a4      	asrs	r4, r4, #2
 800da98:	2600      	movs	r6, #0
 800da9a:	42a6      	cmp	r6, r4
 800da9c:	d105      	bne.n	800daaa <__libc_init_array+0x2e>
 800da9e:	bd70      	pop	{r4, r5, r6, pc}
 800daa0:	f855 3b04 	ldr.w	r3, [r5], #4
 800daa4:	4798      	blx	r3
 800daa6:	3601      	adds	r6, #1
 800daa8:	e7ee      	b.n	800da88 <__libc_init_array+0xc>
 800daaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800daae:	4798      	blx	r3
 800dab0:	3601      	adds	r6, #1
 800dab2:	e7f2      	b.n	800da9a <__libc_init_array+0x1e>
 800dab4:	0800dbc8 	.word	0x0800dbc8
 800dab8:	0800dbc8 	.word	0x0800dbc8
 800dabc:	0800dbc8 	.word	0x0800dbc8
 800dac0:	0800dbcc 	.word	0x0800dbcc

0800dac4 <memcpy>:
 800dac4:	440a      	add	r2, r1
 800dac6:	4291      	cmp	r1, r2
 800dac8:	f100 33ff 	add.w	r3, r0, #4294967295
 800dacc:	d100      	bne.n	800dad0 <memcpy+0xc>
 800dace:	4770      	bx	lr
 800dad0:	b510      	push	{r4, lr}
 800dad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dada:	4291      	cmp	r1, r2
 800dadc:	d1f9      	bne.n	800dad2 <memcpy+0xe>
 800dade:	bd10      	pop	{r4, pc}

0800dae0 <memset>:
 800dae0:	4402      	add	r2, r0
 800dae2:	4603      	mov	r3, r0
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d100      	bne.n	800daea <memset+0xa>
 800dae8:	4770      	bx	lr
 800daea:	f803 1b01 	strb.w	r1, [r3], #1
 800daee:	e7f9      	b.n	800dae4 <memset+0x4>

0800daf0 <_init>:
 800daf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daf2:	bf00      	nop
 800daf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daf6:	bc08      	pop	{r3}
 800daf8:	469e      	mov	lr, r3
 800dafa:	4770      	bx	lr

0800dafc <_fini>:
 800dafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dafe:	bf00      	nop
 800db00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db02:	bc08      	pop	{r3}
 800db04:	469e      	mov	lr, r3
 800db06:	4770      	bx	lr
